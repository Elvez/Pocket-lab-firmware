
pocketlabFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800369c  0800369c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a4  080036a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  080036b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080036b8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bccb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bee  00000000  00000000  0002bd07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  0002d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002e528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002236  00000000  00000000  0002f070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000091da  00000000  00000000  000312a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d207  00000000  00000000  0003a480  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003294  00000000  00000000  000c7704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003664 	.word	0x08003664

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003664 	.word	0x08003664

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb90 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f814 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f90a 	bl	80006fc <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f8e8 	bl	80006bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f88a 	bl	8000604 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f8ba 	bl	8000668 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80004f4:	f000 f872 	bl	80005dc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, commandBuffer, 20);
 80004f8:	2214      	movs	r2, #20
 80004fa:	4902      	ldr	r1, [pc, #8]	; (8000504 <main+0x2c>)
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <main+0x30>)
 80004fe:	f002 f95d 	bl	80027bc <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000502:	e7fe      	b.n	8000502 <main+0x2a>
 8000504:	20000028 	.word	0x20000028
 8000508:	200000a4 	.word	0x200000a4

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 f89a 	bl	8003654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <SystemClock_Config+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <SystemClock_Config+0xc8>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <SystemClock_Config+0xc8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <SystemClock_Config+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <SystemClock_Config+0xcc>)
 8000556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <SystemClock_Config+0xcc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2310      	movs	r3, #16
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000578:	2300      	movs	r3, #0
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f9a1 	bl	80018d8 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800059c:	f000 f948 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2103      	movs	r1, #3
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fbfb 	bl	8001db8 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c8:	f000 f932 	bl	8000830 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_CRC_Init+0x20>)
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <MX_CRC_Init+0x24>)
 80005e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_CRC_Init+0x20>)
 80005e8:	f000 fc2e 	bl	8000e48 <HAL_CRC_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005f2:	f000 f91d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000003c 	.word	0x2000003c
 8000600:	40023000 	.word	0x40023000

08000604 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <MX_USART1_UART_Init+0x60>)
 800060c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 800063c:	f001 ffd8 	bl	80025f0 <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000646:	f000 f8f3 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //Enable receive interrupt
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f042 0220 	orr.w	r2, r2, #32
 8000658:	60da      	str	r2, [r3, #12]
  //------------------------
  /* USER CODE END USART1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000a4 	.word	0x200000a4
 8000664:	40011000 	.word	0x40011000

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_USART2_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f001 ffa6 	bl	80025f0 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f8c1 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000e4 	.word	0x200000e4
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_DMA_Init+0x3c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <MX_DMA_Init+0x3c>)
 80006cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_DMA_Init+0x3c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	203a      	movs	r0, #58	; 0x3a
 80006e4:	f000 fb86 	bl	8000df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006e8:	203a      	movs	r0, #58	; 0x3a
 80006ea:	f000 fb9f 	bl	8000e2c <HAL_NVIC_EnableIRQ>

}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a30      	ldr	r2, [pc, #192]	; (80007dc <MX_GPIO_Init+0xe0>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a29      	ldr	r2, [pc, #164]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a22      	ldr	r2, [pc, #136]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_GPIO_Init+0xe0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_GPIO_Init+0xe0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_GPIO_Init+0xe0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	4815      	ldr	r0, [pc, #84]	; (80007e0 <MX_GPIO_Init+0xe4>)
 800078a:	f001 f88b 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2102      	movs	r1, #2
 8000792:	4814      	ldr	r0, [pc, #80]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000794:	f001 f886 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <MX_GPIO_Init+0xe4>)
 80007b2:	f000 fef5 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_GPIO_Init+0xe8>)
 80007ce:	f000 fee7 	bl	80015a0 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020800 	.word	0x40020800
 80007e4:	40020400 	.word	0x40020400

080007e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, commandBuffer, 20, 100);
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	2214      	movs	r2, #20
 80007f4:	4903      	ldr	r1, [pc, #12]	; (8000804 <HAL_UART_RxCpltCallback+0x1c>)
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <HAL_UART_RxCpltCallback+0x20>)
 80007f8:	f001 ff47 	bl	800268a <HAL_UART_Transmit>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000028 	.word	0x20000028
 8000808:	200000a4 	.word	0x200000a4

0800080c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d101      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081e:	f000 fa11 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010000 	.word	0x40010000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000836:	e7fe      	b.n	8000836 <Error_Handler+0x6>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <HAL_CRC_MspInit+0x3c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d10d      	bne.n	80008b6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <HAL_CRC_MspInit+0x40>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <HAL_CRC_MspInit+0x40>)
 80008a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <HAL_CRC_MspInit+0x40>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023000 	.word	0x40023000
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a4e      	ldr	r2, [pc, #312]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d164      	bne.n	80009b8 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a4c      	ldr	r2, [pc, #304]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b4a      	ldr	r3, [pc, #296]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	4b46      	ldr	r3, [pc, #280]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a45      	ldr	r2, [pc, #276]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000926:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000938:	2307      	movs	r3, #7
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	483a      	ldr	r0, [pc, #232]	; (8000a2c <HAL_UART_MspInit+0x160>)
 8000944:	f000 fe2c 	bl	80015a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000948:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <HAL_UART_MspInit+0x164>)
 800094a:	4a3a      	ldr	r2, [pc, #232]	; (8000a34 <HAL_UART_MspInit+0x168>)
 800094c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800094e:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000950:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000954:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000956:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <HAL_UART_MspInit+0x164>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000962:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <HAL_UART_MspInit+0x164>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800097c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800098a:	4829      	ldr	r0, [pc, #164]	; (8000a30 <HAL_UART_MspInit+0x164>)
 800098c:	f000 fa78 	bl	8000e80 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000996:	f7ff ff4b 	bl	8000830 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <HAL_UART_MspInit+0x164>)
 800099e:	635a      	str	r2, [r3, #52]	; 0x34
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <HAL_UART_MspInit+0x164>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2025      	movs	r0, #37	; 0x25
 80009ac:	f000 fa22 	bl	8000df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b0:	2025      	movs	r0, #37	; 0x25
 80009b2:	f000 fa3b 	bl	8000e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b6:	e030      	b.n	8000a1a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12b      	bne.n	8000a1a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x160>)
 8000a16:	f000 fdc3 	bl	80015a0 <HAL_GPIO_Init>
}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40011000 	.word	0x40011000
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	20000044 	.word	0x20000044
 8000a34:	40026440 	.word	0x40026440
 8000a38:	40004400 	.word	0x40004400

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	2019      	movs	r0, #25
 8000a52:	f000 f9cf 	bl	8000df4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a56:	2019      	movs	r0, #25
 8000a58:	f000 f9e8 	bl	8000e2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_InitTick+0xa0>)
 8000a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_InitTick+0xa0>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <HAL_InitTick+0xa0>)
 8000a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a78:	f107 0210 	add.w	r2, r7, #16
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fb64 	bl	8002150 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a88:	f001 fb4e 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 8000a8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	0c9b      	lsrs	r3, r3, #18
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_InitTick+0xac>)
 8000aa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000abe:	f001 fb79 	bl	80021b4 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d104      	bne.n	8000ad2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000aca:	f001 fba8 	bl	800221e <HAL_TIM_Base_Start_IT>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20000124 	.word	0x20000124
 8000ae8:	40010000 	.word	0x40010000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b4a:	f001 fb8c 	bl	8002266 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000124 	.word	0x20000124

08000b58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <USART1_IRQHandler+0x10>)
 8000b5e:	f001 fead 	bl	80028bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000a4 	.word	0x200000a4

08000b6c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <DMA2_Stream2_IRQHandler+0x10>)
 8000b72:	f000 faad 	bl	80010d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000044 	.word	0x20000044

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <SystemInit+0x28>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <SystemInit+0x28>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SystemInit+0x28>)
 8000b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bb2:	e003      	b.n	8000bbc <LoopCopyDataInit>

08000bb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bba:	3104      	adds	r1, #4

08000bbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bc4:	d3f6      	bcc.n	8000bb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc8:	e002      	b.n	8000bd0 <LoopFillZerobss>

08000bca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bcc:	f842 3b04 	str.w	r3, [r2], #4

08000bd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bd4:	d3f9      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd3 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 fd17 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fc7b 	bl	80004d8 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000be8:	080036ac 	.word	0x080036ac
  ldr  r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bf0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000bf4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000bf8:	20000168 	.word	0x20000168

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f8d8 	bl	8000dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff04 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe00 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000164 	.word	0x20000164

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000164 	.word	0x20000164

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff4c 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e06:	f7ff ff61 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ffb1 	bl	8000d78 <NVIC_EncodePriority>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff80 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff54 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	795b      	ldrb	r3, [r3, #5]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d105      	bne.n	8000e70 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fd0c 	bl	8000888 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff feee 	bl	8000c6c <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e099      	b.n	8000fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ebc:	e00f      	b.n	8000ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ebe:	f7ff fed5 	bl	8000c6c <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d908      	bls.n	8000ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2220      	movs	r2, #32
 8000ed0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e078      	b.n	8000fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1e8      	bne.n	8000ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <HAL_DMA_Init+0x158>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d107      	bne.n	8000f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4313      	orrs	r3, r2
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f023 0307 	bic.w	r3, r3, #7
 8000f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d117      	bne.n	8000fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00e      	beq.n	8000fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 fa91 	bl	80014ac <DMA_CheckFifoParam>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d008      	beq.n	8000fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2240      	movs	r2, #64	; 0x40
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e016      	b.n	8000fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fa48 	bl	8001440 <DMA_CalcBaseAndBitshift>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb8:	223f      	movs	r2, #63	; 0x3f
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	f010803f 	.word	0xf010803f

08000fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_DMA_Start_IT+0x26>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e040      	b.n	8001084 <HAL_DMA_Start_IT+0xa8>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d12f      	bne.n	8001076 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2202      	movs	r2, #2
 800101a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f9da 	bl	80013e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	223f      	movs	r2, #63	; 0x3f
 8001036:	409a      	lsls	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0216 	orr.w	r2, r2, #22
 800104a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0208 	orr.w	r2, r2, #8
 8001062:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e005      	b.n	8001082 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800107e:	2302      	movs	r3, #2
 8001080:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001082:	7dfb      	ldrb	r3, [r7, #23]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d004      	beq.n	80010aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00c      	b.n	80010c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2205      	movs	r2, #5
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010dc:	4b92      	ldr	r3, [pc, #584]	; (8001328 <HAL_DMA_IRQHandler+0x258>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a92      	ldr	r2, [pc, #584]	; (800132c <HAL_DMA_IRQHandler+0x25c>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0a9b      	lsrs	r3, r3, #10
 80010e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	2208      	movs	r2, #8
 80010fc:	409a      	lsls	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d01a      	beq.n	800113c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	2208      	movs	r2, #8
 800112a:	409a      	lsls	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001134:	f043 0201 	orr.w	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	2201      	movs	r2, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d012      	beq.n	8001172 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115e:	2201      	movs	r2, #1
 8001160:	409a      	lsls	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116a:	f043 0202 	orr.w	r2, r3, #2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001176:	2204      	movs	r2, #4
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d012      	beq.n	80011a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	2204      	movs	r2, #4
 8001196:	409a      	lsls	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a0:	f043 0204 	orr.w	r2, r3, #4
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	2210      	movs	r2, #16
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d043      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03c      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ca:	2210      	movs	r2, #16
 80011cc:	409a      	lsls	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d018      	beq.n	8001212 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d108      	bne.n	8001200 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d024      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
 80011fe:	e01f      	b.n	8001240 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01b      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	4798      	blx	r3
 8001210:	e016      	b.n	8001240 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0208 	bic.w	r2, r2, #8
 800122e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	2220      	movs	r2, #32
 8001246:	409a      	lsls	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 808e 	beq.w	800136e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 8086 	beq.w	800136e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2220      	movs	r2, #32
 8001268:	409a      	lsls	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b05      	cmp	r3, #5
 8001278:	d136      	bne.n	80012e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0216 	bic.w	r2, r2, #22
 8001288:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	695a      	ldr	r2, [r3, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001298:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <HAL_DMA_IRQHandler+0x1da>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0208 	bic.w	r2, r2, #8
 80012b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012be:	223f      	movs	r2, #63	; 0x3f
 80012c0:	409a      	lsls	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d07d      	beq.n	80013da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	4798      	blx	r3
        }
        return;
 80012e6:	e078      	b.n	80013da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01c      	beq.n	8001330 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d108      	bne.n	8001316 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001308:	2b00      	cmp	r3, #0
 800130a:	d030      	beq.n	800136e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	4798      	blx	r3
 8001314:	e02b      	b.n	800136e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131a:	2b00      	cmp	r3, #0
 800131c:	d027      	beq.n	800136e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	4798      	blx	r3
 8001326:	e022      	b.n	800136e <HAL_DMA_IRQHandler+0x29e>
 8001328:	20000000 	.word	0x20000000
 800132c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10f      	bne.n	800135e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0210 	bic.w	r2, r2, #16
 800134c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	2b00      	cmp	r3, #0
 8001374:	d032      	beq.n	80013dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d022      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2205      	movs	r2, #5
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3301      	adds	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d307      	bcc.n	80013b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f2      	bne.n	800139a <HAL_DMA_IRQHandler+0x2ca>
 80013b4:	e000      	b.n	80013b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	4798      	blx	r3
 80013d8:	e000      	b.n	80013dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80013da:	bf00      	nop
    }
  }
}
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop

080013e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001400:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b40      	cmp	r3, #64	; 0x40
 8001410:	d108      	bne.n	8001424 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001422:	e007      	b.n	8001434 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3b10      	subs	r3, #16
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <DMA_CalcBaseAndBitshift+0x64>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <DMA_CalcBaseAndBitshift+0x68>)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d909      	bls.n	8001482 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	1d1a      	adds	r2, r3, #4
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	659a      	str	r2, [r3, #88]	; 0x58
 8001480:	e007      	b.n	8001492 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800148a:	f023 0303 	bic.w	r3, r3, #3
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	aaaaaaab 	.word	0xaaaaaaab
 80014a8:	08003694 	.word	0x08003694

080014ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d11f      	bne.n	8001506 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d855      	bhi.n	8001578 <DMA_CheckFifoParam+0xcc>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <DMA_CheckFifoParam+0x28>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014f7 	.word	0x080014f7
 80014dc:	080014e5 	.word	0x080014e5
 80014e0:	08001579 	.word	0x08001579
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d045      	beq.n	800157c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f4:	e042      	b.n	800157c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014fe:	d13f      	bne.n	8001580 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001504:	e03c      	b.n	8001580 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800150e:	d121      	bne.n	8001554 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d836      	bhi.n	8001584 <DMA_CheckFifoParam+0xd8>
 8001516:	a201      	add	r2, pc, #4	; (adr r2, 800151c <DMA_CheckFifoParam+0x70>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001533 	.word	0x08001533
 8001524:	0800152d 	.word	0x0800152d
 8001528:	08001545 	.word	0x08001545
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
      break;
 8001530:	e02f      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d024      	beq.n	8001588 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001542:	e021      	b.n	8001588 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800154c:	d11e      	bne.n	800158c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001552:	e01b      	b.n	800158c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d902      	bls.n	8001560 <DMA_CheckFifoParam+0xb4>
 800155a:	2b03      	cmp	r3, #3
 800155c:	d003      	beq.n	8001566 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800155e:	e018      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
      break;
 8001564:	e015      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00e      	beq.n	8001590 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
      break;
 8001576:	e00b      	b.n	8001590 <DMA_CheckFifoParam+0xe4>
      break;
 8001578:	bf00      	nop
 800157a:	e00a      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
      break;
 800157c:	bf00      	nop
 800157e:	e008      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
      break;
 8001580:	bf00      	nop
 8001582:	e006      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
      break;
 8001584:	bf00      	nop
 8001586:	e004      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
      break;
 8001588:	bf00      	nop
 800158a:	e002      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
      break;   
 800158c:	bf00      	nop
 800158e:	e000      	b.n	8001592 <DMA_CheckFifoParam+0xe6>
      break;
 8001590:	bf00      	nop
    }
  } 
  
  return status; 
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	e159      	b.n	8001870 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	f040 8148 	bne.w	800186a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d00b      	beq.n	80015fa <HAL_GPIO_Init+0x5a>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ee:	2b11      	cmp	r3, #17
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0xfc>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b12      	cmp	r3, #18
 800169a:	d123      	bne.n	80016e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	69b9      	ldr	r1, [r7, #24]
 80016e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0203 	and.w	r2, r3, #3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a2 	beq.w	800186a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b56      	ldr	r3, [pc, #344]	; (8001884 <HAL_GPIO_Init+0x2e4>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a55      	ldr	r2, [pc, #340]	; (8001884 <HAL_GPIO_Init+0x2e4>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_GPIO_Init+0x2e4>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001742:	4a51      	ldr	r2, [pc, #324]	; (8001888 <HAL_GPIO_Init+0x2e8>)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	220f      	movs	r2, #15
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a48      	ldr	r2, [pc, #288]	; (800188c <HAL_GPIO_Init+0x2ec>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0x202>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a47      	ldr	r2, [pc, #284]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x1fe>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <HAL_GPIO_Init+0x2f4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x1fa>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a45      	ldr	r2, [pc, #276]	; (8001898 <HAL_GPIO_Init+0x2f8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x1f6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a44      	ldr	r2, [pc, #272]	; (800189c <HAL_GPIO_Init+0x2fc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x1f2>
 800178e:	2304      	movs	r3, #4
 8001790:	e008      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 8001792:	2307      	movs	r3, #7
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 8001796:	2303      	movs	r3, #3
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 800179a:	2302      	movs	r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 80017a2:	2300      	movs	r3, #0
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b4:	4934      	ldr	r1, [pc, #208]	; (8001888 <HAL_GPIO_Init+0x2e8>)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_GPIO_Init+0x300>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e6:	4a2e      	ldr	r2, [pc, #184]	; (80018a0 <HAL_GPIO_Init+0x300>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017ec:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_GPIO_Init+0x300>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001810:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <HAL_GPIO_Init+0x300>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_GPIO_Init+0x300>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183a:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_GPIO_Init+0x300>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_GPIO_Init+0x300>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_GPIO_Init+0x300>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3301      	adds	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2b0f      	cmp	r3, #15
 8001874:	f67f aea2 	bls.w	80015bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001878:	bf00      	nop
 800187a:	3724      	adds	r7, #36	; 0x24
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40013c00 	.word	0x40013c00

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c0:	e003      	b.n	80018ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	041a      	lsls	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e25b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d075      	beq.n	80019e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f6:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d00c      	beq.n	800191c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d112      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191a:	d10b      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4b99      	ldr	r3, [pc, #612]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d05b      	beq.n	80019e0 <HAL_RCC_OscConfig+0x108>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d157      	bne.n	80019e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e236      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x74>
 800193e:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a90      	ldr	r2, [pc, #576]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x98>
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a8a      	ldr	r2, [pc, #552]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 8001970:	4b84      	ldr	r3, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a83      	ldr	r2, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a80      	ldr	r2, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff f96c 	bl	8000c6c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff f968 	bl	8000c6c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1fb      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xc0>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f958 	bl	8000c6c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff f954 	bl	8000c6c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1e7      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0xe8>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ee:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1bb      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4952      	ldr	r1, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f90d 	bl	8000c6c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff f909 	bl	8000c6c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e19c      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4940      	ldr	r1, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f8ec 	bl	8000c6c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff f8e8 	bl	8000c6c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e17b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d030      	beq.n	8001b24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f8cc 	bl	8000c6c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f8c8 	bl	8000c6c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e15b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x200>
 8001af6:	e015      	b.n	8001b24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff f8b5 	bl	8000c6c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff f8b1 	bl	8000c6c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e144      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a0 	beq.w	8001c72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d121      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f877 	bl	8000c6c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	e011      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2ce>
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470000 	.word	0x42470000
 8001b8c:	42470e80 	.word	0x42470e80
 8001b90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7ff f86a 	bl	8000c6c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0fd      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x4d4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
 8001bba:	4b7d      	ldr	r3, [pc, #500]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a7c      	ldr	r2, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	e01c      	b.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x312>
 8001bd0:	4b77      	ldr	r3, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a76      	ldr	r2, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	4b74      	ldr	r3, [pc, #464]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4a73      	ldr	r2, [pc, #460]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6713      	str	r3, [r2, #112]	; 0x70
 8001be8:	e00b      	b.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001bea:	4b71      	ldr	r3, [pc, #452]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a70      	ldr	r2, [pc, #448]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	4b6e      	ldr	r3, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a6d      	ldr	r2, [pc, #436]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f82f 	bl	8000c6c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff f82b 	bl	8000c6c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0bc      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <HAL_RCC_OscConfig+0x33a>
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f819 	bl	8000c6c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff f815 	bl	8000c6c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0a6      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8092 	beq.w	8001da0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7c:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d05c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d141      	bne.n	8001d14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7fe ffe9 	bl	8000c6c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe ffe5 	bl	8000c6c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e078      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	019b      	lsls	r3, r3, #6
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	061b      	lsls	r3, r3, #24
 8001ce0:	4933      	ldr	r1, [pc, #204]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe ffbe 	bl	8000c6c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe ffba 	bl	8000c6c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e04d      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
 8001d12:	e045      	b.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7fe ffa7 	bl	8000c6c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d22:	f7fe ffa3 	bl	8000c6c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e036      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x44a>
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e029      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d115      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d10d      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40007000 	.word	0x40007000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470060 	.word	0x42470060

08001db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0cc      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d90c      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b8      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	494d      	ldr	r1, [pc, #308]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d044      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d119      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e07f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e067      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4934      	ldr	r1, [pc, #208]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7fe fee0 	bl	8000c6c <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7fe fedc 	bl	8000c6c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d20c      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e032      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4916      	ldr	r1, [pc, #88]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3e:	f000 f821 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	fa21 f303 	lsr.w	r3, r1, r3
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fd6c 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00
 8001f74:	40023800 	.word	0x40023800
 8001f78:	0800367c 	.word	0x0800367c
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_GetSysClockFreq+0x158>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d007      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x32>
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d008      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x38>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 808d 	bne.w	80020ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fb2:	60bb      	str	r3, [r7, #8]
       break;
 8001fb4:	e08c      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fb8:	60bb      	str	r3, [r7, #8]
      break;
 8001fba:	e089      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fbc:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_GetSysClockFreq+0x158>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc6:	4b45      	ldr	r3, [pc, #276]	; (80020dc <HAL_RCC_GetSysClockFreq+0x158>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d023      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b42      	ldr	r3, [pc, #264]	; (80020dc <HAL_RCC_GetSysClockFreq+0x158>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	ea03 0501 	and.w	r5, r3, r1
 8001fe8:	ea04 0602 	and.w	r6, r4, r2
 8001fec:	4a3d      	ldr	r2, [pc, #244]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fee:	fb02 f106 	mul.w	r1, r2, r6
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	fb02 f205 	mul.w	r2, r2, r5
 8001ff8:	440a      	add	r2, r1
 8001ffa:	493a      	ldr	r1, [pc, #232]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ffc:	fba5 0101 	umull	r0, r1, r5, r1
 8002000:	1853      	adds	r3, r2, r1
 8002002:	4619      	mov	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f04f 0400 	mov.w	r4, #0
 800200a:	461a      	mov	r2, r3
 800200c:	4623      	mov	r3, r4
 800200e:	f7fe f8e3 	bl	80001d8 <__aeabi_uldivmod>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e049      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201a:	4b30      	ldr	r3, [pc, #192]	; (80020dc <HAL_RCC_GetSysClockFreq+0x158>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	f04f 0400 	mov.w	r4, #0
 8002024:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	ea03 0501 	and.w	r5, r3, r1
 8002030:	ea04 0602 	and.w	r6, r4, r2
 8002034:	4629      	mov	r1, r5
 8002036:	4632      	mov	r2, r6
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	0154      	lsls	r4, r2, #5
 8002042:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002046:	014b      	lsls	r3, r1, #5
 8002048:	4619      	mov	r1, r3
 800204a:	4622      	mov	r2, r4
 800204c:	1b49      	subs	r1, r1, r5
 800204e:	eb62 0206 	sbc.w	r2, r2, r6
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	f04f 0400 	mov.w	r4, #0
 800205a:	0194      	lsls	r4, r2, #6
 800205c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002060:	018b      	lsls	r3, r1, #6
 8002062:	1a5b      	subs	r3, r3, r1
 8002064:	eb64 0402 	sbc.w	r4, r4, r2
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	00e2      	lsls	r2, r4, #3
 8002072:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002076:	00d9      	lsls	r1, r3, #3
 8002078:	460b      	mov	r3, r1
 800207a:	4614      	mov	r4, r2
 800207c:	195b      	adds	r3, r3, r5
 800207e:	eb44 0406 	adc.w	r4, r4, r6
 8002082:	f04f 0100 	mov.w	r1, #0
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	02a2      	lsls	r2, r4, #10
 800208c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002090:	0299      	lsls	r1, r3, #10
 8002092:	460b      	mov	r3, r1
 8002094:	4614      	mov	r4, r2
 8002096:	4618      	mov	r0, r3
 8002098:	4621      	mov	r1, r4
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f04f 0400 	mov.w	r4, #0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	f7fe f898 	bl	80001d8 <__aeabi_uldivmod>
 80020a8:	4603      	mov	r3, r0
 80020aa:	460c      	mov	r4, r1
 80020ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_GetSysClockFreq+0x158>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	3301      	adds	r3, #1
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	60bb      	str	r3, [r7, #8]
      break;
 80020c8:	e002      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020cc:	60bb      	str	r3, [r7, #8]
      break;
 80020ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d0:	68bb      	ldr	r3, [r7, #8]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	017d7840 	.word	0x017d7840

080020e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002104:	f7ff fff0 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002108:	4601      	mov	r1, r0
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	0a9b      	lsrs	r3, r3, #10
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4a03      	ldr	r2, [pc, #12]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	fa21 f303 	lsr.w	r3, r1, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	0800368c 	.word	0x0800368c

08002128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800212c:	f7ff ffdc 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002130:	4601      	mov	r1, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0b5b      	lsrs	r3, r3, #13
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4a03      	ldr	r2, [pc, #12]	; (800214c <HAL_RCC_GetPCLK2Freq+0x24>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	0800368c 	.word	0x0800368c

08002150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	220f      	movs	r2, #15
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCC_GetClockConfig+0x60>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e01d      	b.n	8002202 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f815 	bl	800220a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 f968 	bl	80024c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d007      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b02      	cmp	r3, #2
 800227a:	d122      	bne.n	80022c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d11b      	bne.n	80022c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f06f 0202 	mvn.w	r2, #2
 8002292:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f8ee 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 80022ae:	e005      	b.n	80022bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f8e0 	bl	8002476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8f1 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d122      	bne.n	8002316 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d11b      	bne.n	8002316 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f06f 0204 	mvn.w	r2, #4
 80022e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f8c4 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 8002302:	e005      	b.n	8002310 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f8b6 	bl	8002476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8c7 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b08      	cmp	r3, #8
 8002322:	d122      	bne.n	800236a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11b      	bne.n	800236a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f06f 0208 	mvn.w	r2, #8
 800233a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2204      	movs	r2, #4
 8002340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f89a 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 8002356:	e005      	b.n	8002364 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f88c 	bl	8002476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f89d 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b10      	cmp	r3, #16
 8002376:	d122      	bne.n	80023be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b10      	cmp	r3, #16
 8002384:	d11b      	bne.n	80023be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f06f 0210 	mvn.w	r2, #16
 800238e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2208      	movs	r2, #8
 8002394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f870 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 80023aa:	e005      	b.n	80023b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f862 	bl	8002476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f873 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10e      	bne.n	80023ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f06f 0201 	mvn.w	r2, #1
 80023e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe fa11 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	2b80      	cmp	r3, #128	; 0x80
 80023f6:	d10e      	bne.n	8002416 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	d107      	bne.n	8002416 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800240e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f8e3 	bl	80025dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d10e      	bne.n	8002442 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d107      	bne.n	8002442 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800243a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f838 	bl	80024b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b20      	cmp	r3, #32
 800244e:	d10e      	bne.n	800246e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b20      	cmp	r3, #32
 800245c:	d107      	bne.n	800246e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f06f 0220 	mvn.w	r2, #32
 8002466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f8ad 	bl	80025c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <TIM_Base_SetConfig+0xe4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00f      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e6:	d00b      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <TIM_Base_SetConfig+0xe8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <TIM_Base_SetConfig+0xec>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <TIM_Base_SetConfig+0xf0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d108      	bne.n	8002512 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a25      	ldr	r2, [pc, #148]	; (80025ac <TIM_Base_SetConfig+0xe4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01b      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d017      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <TIM_Base_SetConfig+0xe8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <TIM_Base_SetConfig+0xec>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00f      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <TIM_Base_SetConfig+0xf0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <TIM_Base_SetConfig+0xf4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <TIM_Base_SetConfig+0xf8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <TIM_Base_SetConfig+0xfc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <TIM_Base_SetConfig+0xe4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40000c00 	.word	0x40000c00
 80025bc:	40014000 	.word	0x40014000
 80025c0:	40014400 	.word	0x40014400
 80025c4:	40014800 	.word	0x40014800

080025c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e03f      	b.n	8002682 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe f958 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	; 0x24
 8002620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fc6d 	bl	8002f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b088      	sub	sp, #32
 800268e:	af02      	add	r7, sp, #8
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	f040 8083 	bne.w	80027b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_UART_Transmit+0x2e>
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e07b      	b.n	80027b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Transmit+0x40>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e074      	b.n	80027b4 <HAL_UART_Transmit+0x12a>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2221      	movs	r2, #33	; 0x21
 80026dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fac4 	bl	8000c6c <HAL_GetTick>
 80026e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	88fa      	ldrh	r2, [r7, #6]
 80026ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80026fa:	e042      	b.n	8002782 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002712:	d122      	bne.n	800275a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2200      	movs	r2, #0
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fa76 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e042      	b.n	80027b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002740:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3302      	adds	r3, #2
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	e017      	b.n	8002782 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3301      	adds	r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	e013      	b.n	8002782 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2200      	movs	r2, #0
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fa53 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e01f      	b.n	80027b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	60ba      	str	r2, [r7, #8]
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1b7      	bne.n	80026fc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2200      	movs	r2, #0
 8002794:	2140      	movs	r1, #64	; 0x40
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fa3a 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e006      	b.n	80027b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d166      	bne.n	80028a4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_UART_Receive_DMA+0x26>
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e05f      	b.n	80028a6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_UART_Receive_DMA+0x38>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e058      	b.n	80028a6 <HAL_UART_Receive_DMA+0xea>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2222      	movs	r2, #34	; 0x22
 8002812:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <HAL_UART_Receive_DMA+0xf4>)
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HAL_UART_Receive_DMA+0xf8>)
 8002824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <HAL_UART_Receive_DMA+0xfc>)
 800282c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	2200      	movs	r2, #0
 8002834:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3304      	adds	r3, #4
 8002846:	4619      	mov	r1, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	f7fe fbc5 	bl	8000fdc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	08002af9 	.word	0x08002af9
 80028b4:	08002b61 	.word	0x08002b61
 80028b8:	08002b7d 	.word	0x08002b7d

080028bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_UART_IRQHandler+0x52>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa82 	bl	8002e10 <UART_Receive_IT>
      return;
 800290c:	e0d1      	b.n	8002ab2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80b0 	beq.w	8002a76 <HAL_UART_IRQHandler+0x1ba>
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_UART_IRQHandler+0x70>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80a5 	beq.w	8002a76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_UART_IRQHandler+0x90>
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_UART_IRQHandler+0xb0>
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	f043 0202 	orr.w	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_UART_IRQHandler+0xd0>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	f043 0204 	orr.w	r2, r3, #4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00f      	beq.n	80029b6 <HAL_UART_IRQHandler+0xfa>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <HAL_UART_IRQHandler+0xee>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	f043 0208 	orr.w	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d078      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_UART_IRQHandler+0x11c>
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa1c 	bl	8002e10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_UART_IRQHandler+0x144>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d031      	beq.n	8002a64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f965 	bl	8002cd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d123      	bne.n	8002a5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <HAL_UART_IRQHandler+0x1fc>)
 8002a32:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fb27 	bl	800108c <HAL_DMA_Abort_IT>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d016      	beq.n	8002a72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a52:	e00e      	b.n	8002a72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f845 	bl	8002ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5a:	e00a      	b.n	8002a72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f841 	bl	8002ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a62:	e006      	b.n	8002a72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f83d 	bl	8002ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a70:	e01e      	b.n	8002ab0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a72:	bf00      	nop
    return;
 8002a74:	e01c      	b.n	8002ab0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1d6>
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f952 	bl	8002d34 <UART_Transmit_IT>
    return;
 8002a90:	e00f      	b.n	8002ab2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x1f6>
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f99a 	bl	8002de0 <UART_EndTransmit_IT>
    return;
 8002aac:	bf00      	nop
 8002aae:	e000      	b.n	8002ab2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002ab0:	bf00      	nop
  }
}
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	08002d0d 	.word	0x08002d0d

08002abc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11e      	bne.n	8002b52 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b28:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b48:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7fd fe48 	bl	80007e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ffae 	bl	8002ad0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b21      	cmp	r3, #33	; 0x21
 8002bae:	d108      	bne.n	8002bc2 <UART_DMAError+0x46>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002bbc:	68b8      	ldr	r0, [r7, #8]
 8002bbe:	f000 f871 	bl	8002ca4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b22      	cmp	r3, #34	; 0x22
 8002be2:	d108      	bne.n	8002bf6 <UART_DMAError+0x7a>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f86d 	bl	8002cd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c02:	68b8      	ldr	r0, [r7, #8]
 8002c04:	f7ff ff6e 	bl	8002ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c20:	e02c      	b.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d028      	beq.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c30:	f7fe f81c 	bl	8000c6c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d21d      	bcs.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e00f      	b.n	8002c9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4013      	ands	r3, r2
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d0c3      	beq.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002cba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ce6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff fedc 	bl	8002ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b21      	cmp	r3, #33	; 0x21
 8002d46:	d144      	bne.n	8002dd2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d50:	d11a      	bne.n	8002d88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]
 8002d7a:	e00e      	b.n	8002d9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	621a      	str	r2, [r3, #32]
 8002d86:	e008      	b.n	8002d9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	1c59      	adds	r1, r3, #1
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6211      	str	r1, [r2, #32]
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4619      	mov	r1, r3
 8002da8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff fe5b 	bl	8002abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b22      	cmp	r3, #34	; 0x22
 8002e22:	d171      	bne.n	8002f08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2c:	d123      	bne.n	8002e76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10e      	bne.n	8002e5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
 8002e58:	e029      	b.n	8002eae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
 8002e74:	e01b      	b.n	8002eae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6858      	ldr	r0, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6291      	str	r1, [r2, #40]	; 0x28
 8002e8e:	b2c2      	uxtb	r2, r0
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e00c      	b.n	8002eae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	1c58      	adds	r0, r3, #1
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6288      	str	r0, [r1, #40]	; 0x28
 8002ea6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d120      	bne.n	8002f04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0220 	bic.w	r2, r2, #32
 8002ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fc74 	bl	80007e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e002      	b.n	8002f0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f56:	f023 030c 	bic.w	r3, r3, #12
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f82:	f040 818b 	bne.w	800329c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4ac1      	ldr	r2, [pc, #772]	; (8003290 <UART_SetConfig+0x37c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d005      	beq.n	8002f9c <UART_SetConfig+0x88>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4abf      	ldr	r2, [pc, #764]	; (8003294 <UART_SetConfig+0x380>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	f040 80bd 	bne.w	8003116 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f9c:	f7ff f8c4 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 8002fa0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	f04f 0600 	mov.w	r6, #0
 8002faa:	46a8      	mov	r8, r5
 8002fac:	46b1      	mov	r9, r6
 8002fae:	eb18 0308 	adds.w	r3, r8, r8
 8002fb2:	eb49 0409 	adc.w	r4, r9, r9
 8002fb6:	4698      	mov	r8, r3
 8002fb8:	46a1      	mov	r9, r4
 8002fba:	eb18 0805 	adds.w	r8, r8, r5
 8002fbe:	eb49 0906 	adc.w	r9, r9, r6
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fd6:	4688      	mov	r8, r1
 8002fd8:	4691      	mov	r9, r2
 8002fda:	eb18 0005 	adds.w	r0, r8, r5
 8002fde:	eb49 0106 	adc.w	r1, r9, r6
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	461d      	mov	r5, r3
 8002fe8:	f04f 0600 	mov.w	r6, #0
 8002fec:	196b      	adds	r3, r5, r5
 8002fee:	eb46 0406 	adc.w	r4, r6, r6
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4623      	mov	r3, r4
 8002ff6:	f7fd f8ef 	bl	80001d8 <__aeabi_uldivmod>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	461a      	mov	r2, r3
 8003000:	4ba5      	ldr	r3, [pc, #660]	; (8003298 <UART_SetConfig+0x384>)
 8003002:	fba3 2302 	umull	r2, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	461d      	mov	r5, r3
 8003010:	f04f 0600 	mov.w	r6, #0
 8003014:	46a9      	mov	r9, r5
 8003016:	46b2      	mov	sl, r6
 8003018:	eb19 0309 	adds.w	r3, r9, r9
 800301c:	eb4a 040a 	adc.w	r4, sl, sl
 8003020:	4699      	mov	r9, r3
 8003022:	46a2      	mov	sl, r4
 8003024:	eb19 0905 	adds.w	r9, r9, r5
 8003028:	eb4a 0a06 	adc.w	sl, sl, r6
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003038:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800303c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003040:	4689      	mov	r9, r1
 8003042:	4692      	mov	sl, r2
 8003044:	eb19 0005 	adds.w	r0, r9, r5
 8003048:	eb4a 0106 	adc.w	r1, sl, r6
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	461d      	mov	r5, r3
 8003052:	f04f 0600 	mov.w	r6, #0
 8003056:	196b      	adds	r3, r5, r5
 8003058:	eb46 0406 	adc.w	r4, r6, r6
 800305c:	461a      	mov	r2, r3
 800305e:	4623      	mov	r3, r4
 8003060:	f7fd f8ba 	bl	80001d8 <__aeabi_uldivmod>
 8003064:	4603      	mov	r3, r0
 8003066:	460c      	mov	r4, r1
 8003068:	461a      	mov	r2, r3
 800306a:	4b8b      	ldr	r3, [pc, #556]	; (8003298 <UART_SetConfig+0x384>)
 800306c:	fba3 1302 	umull	r1, r3, r3, r2
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	2164      	movs	r1, #100	; 0x64
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	3332      	adds	r3, #50	; 0x32
 800307e:	4a86      	ldr	r2, [pc, #536]	; (8003298 <UART_SetConfig+0x384>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800308c:	4498      	add	r8, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	461d      	mov	r5, r3
 8003092:	f04f 0600 	mov.w	r6, #0
 8003096:	46a9      	mov	r9, r5
 8003098:	46b2      	mov	sl, r6
 800309a:	eb19 0309 	adds.w	r3, r9, r9
 800309e:	eb4a 040a 	adc.w	r4, sl, sl
 80030a2:	4699      	mov	r9, r3
 80030a4:	46a2      	mov	sl, r4
 80030a6:	eb19 0905 	adds.w	r9, r9, r5
 80030aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030c2:	4689      	mov	r9, r1
 80030c4:	4692      	mov	sl, r2
 80030c6:	eb19 0005 	adds.w	r0, r9, r5
 80030ca:	eb4a 0106 	adc.w	r1, sl, r6
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	461d      	mov	r5, r3
 80030d4:	f04f 0600 	mov.w	r6, #0
 80030d8:	196b      	adds	r3, r5, r5
 80030da:	eb46 0406 	adc.w	r4, r6, r6
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	f7fd f879 	bl	80001d8 <__aeabi_uldivmod>
 80030e6:	4603      	mov	r3, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <UART_SetConfig+0x384>)
 80030ee:	fba3 1302 	umull	r1, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2164      	movs	r1, #100	; 0x64
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	4a65      	ldr	r2, [pc, #404]	; (8003298 <UART_SetConfig+0x384>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 0207 	and.w	r2, r3, #7
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4442      	add	r2, r8
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e26f      	b.n	80035f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003116:	f7fe fff3 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800311a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	461d      	mov	r5, r3
 8003120:	f04f 0600 	mov.w	r6, #0
 8003124:	46a8      	mov	r8, r5
 8003126:	46b1      	mov	r9, r6
 8003128:	eb18 0308 	adds.w	r3, r8, r8
 800312c:	eb49 0409 	adc.w	r4, r9, r9
 8003130:	4698      	mov	r8, r3
 8003132:	46a1      	mov	r9, r4
 8003134:	eb18 0805 	adds.w	r8, r8, r5
 8003138:	eb49 0906 	adc.w	r9, r9, r6
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003148:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800314c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003150:	4688      	mov	r8, r1
 8003152:	4691      	mov	r9, r2
 8003154:	eb18 0005 	adds.w	r0, r8, r5
 8003158:	eb49 0106 	adc.w	r1, r9, r6
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	461d      	mov	r5, r3
 8003162:	f04f 0600 	mov.w	r6, #0
 8003166:	196b      	adds	r3, r5, r5
 8003168:	eb46 0406 	adc.w	r4, r6, r6
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	f7fd f832 	bl	80001d8 <__aeabi_uldivmod>
 8003174:	4603      	mov	r3, r0
 8003176:	460c      	mov	r4, r1
 8003178:	461a      	mov	r2, r3
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <UART_SetConfig+0x384>)
 800317c:	fba3 2302 	umull	r2, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	461d      	mov	r5, r3
 800318a:	f04f 0600 	mov.w	r6, #0
 800318e:	46a9      	mov	r9, r5
 8003190:	46b2      	mov	sl, r6
 8003192:	eb19 0309 	adds.w	r3, r9, r9
 8003196:	eb4a 040a 	adc.w	r4, sl, sl
 800319a:	4699      	mov	r9, r3
 800319c:	46a2      	mov	sl, r4
 800319e:	eb19 0905 	adds.w	r9, r9, r5
 80031a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ba:	4689      	mov	r9, r1
 80031bc:	4692      	mov	sl, r2
 80031be:	eb19 0005 	adds.w	r0, r9, r5
 80031c2:	eb4a 0106 	adc.w	r1, sl, r6
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	461d      	mov	r5, r3
 80031cc:	f04f 0600 	mov.w	r6, #0
 80031d0:	196b      	adds	r3, r5, r5
 80031d2:	eb46 0406 	adc.w	r4, r6, r6
 80031d6:	461a      	mov	r2, r3
 80031d8:	4623      	mov	r3, r4
 80031da:	f7fc fffd 	bl	80001d8 <__aeabi_uldivmod>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <UART_SetConfig+0x384>)
 80031e6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2164      	movs	r1, #100	; 0x64
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a27      	ldr	r2, [pc, #156]	; (8003298 <UART_SetConfig+0x384>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003206:	4498      	add	r8, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	461d      	mov	r5, r3
 800320c:	f04f 0600 	mov.w	r6, #0
 8003210:	46a9      	mov	r9, r5
 8003212:	46b2      	mov	sl, r6
 8003214:	eb19 0309 	adds.w	r3, r9, r9
 8003218:	eb4a 040a 	adc.w	r4, sl, sl
 800321c:	4699      	mov	r9, r3
 800321e:	46a2      	mov	sl, r4
 8003220:	eb19 0905 	adds.w	r9, r9, r5
 8003224:	eb4a 0a06 	adc.w	sl, sl, r6
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003234:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003238:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800323c:	4689      	mov	r9, r1
 800323e:	4692      	mov	sl, r2
 8003240:	eb19 0005 	adds.w	r0, r9, r5
 8003244:	eb4a 0106 	adc.w	r1, sl, r6
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	461d      	mov	r5, r3
 800324e:	f04f 0600 	mov.w	r6, #0
 8003252:	196b      	adds	r3, r5, r5
 8003254:	eb46 0406 	adc.w	r4, r6, r6
 8003258:	461a      	mov	r2, r3
 800325a:	4623      	mov	r3, r4
 800325c:	f7fc ffbc 	bl	80001d8 <__aeabi_uldivmod>
 8003260:	4603      	mov	r3, r0
 8003262:	460c      	mov	r4, r1
 8003264:	461a      	mov	r2, r3
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <UART_SetConfig+0x384>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	; 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <UART_SetConfig+0x384>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4442      	add	r2, r8
 800328c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800328e:	e1b2      	b.n	80035f6 <UART_SetConfig+0x6e2>
 8003290:	40011000 	.word	0x40011000
 8003294:	40011400 	.word	0x40011400
 8003298:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4ad7      	ldr	r2, [pc, #860]	; (8003600 <UART_SetConfig+0x6ec>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d005      	beq.n	80032b2 <UART_SetConfig+0x39e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4ad6      	ldr	r2, [pc, #856]	; (8003604 <UART_SetConfig+0x6f0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	f040 80d1 	bne.w	8003454 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b2:	f7fe ff39 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 80032b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	469a      	mov	sl, r3
 80032bc:	f04f 0b00 	mov.w	fp, #0
 80032c0:	46d0      	mov	r8, sl
 80032c2:	46d9      	mov	r9, fp
 80032c4:	eb18 0308 	adds.w	r3, r8, r8
 80032c8:	eb49 0409 	adc.w	r4, r9, r9
 80032cc:	4698      	mov	r8, r3
 80032ce:	46a1      	mov	r9, r4
 80032d0:	eb18 080a 	adds.w	r8, r8, sl
 80032d4:	eb49 090b 	adc.w	r9, r9, fp
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032ec:	4688      	mov	r8, r1
 80032ee:	4691      	mov	r9, r2
 80032f0:	eb1a 0508 	adds.w	r5, sl, r8
 80032f4:	eb4b 0609 	adc.w	r6, fp, r9
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4619      	mov	r1, r3
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	f04f 0400 	mov.w	r4, #0
 800330a:	0094      	lsls	r4, r2, #2
 800330c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003310:	008b      	lsls	r3, r1, #2
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	4628      	mov	r0, r5
 8003318:	4631      	mov	r1, r6
 800331a:	f7fc ff5d 	bl	80001d8 <__aeabi_uldivmod>
 800331e:	4603      	mov	r3, r0
 8003320:	460c      	mov	r4, r1
 8003322:	461a      	mov	r2, r3
 8003324:	4bb8      	ldr	r3, [pc, #736]	; (8003608 <UART_SetConfig+0x6f4>)
 8003326:	fba3 2302 	umull	r2, r3, r3, r2
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	469b      	mov	fp, r3
 8003334:	f04f 0c00 	mov.w	ip, #0
 8003338:	46d9      	mov	r9, fp
 800333a:	46e2      	mov	sl, ip
 800333c:	eb19 0309 	adds.w	r3, r9, r9
 8003340:	eb4a 040a 	adc.w	r4, sl, sl
 8003344:	4699      	mov	r9, r3
 8003346:	46a2      	mov	sl, r4
 8003348:	eb19 090b 	adds.w	r9, r9, fp
 800334c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003350:	f04f 0100 	mov.w	r1, #0
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800335c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003360:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003364:	4689      	mov	r9, r1
 8003366:	4692      	mov	sl, r2
 8003368:	eb1b 0509 	adds.w	r5, fp, r9
 800336c:	eb4c 060a 	adc.w	r6, ip, sl
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4619      	mov	r1, r3
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	f04f 0400 	mov.w	r4, #0
 8003382:	0094      	lsls	r4, r2, #2
 8003384:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003388:	008b      	lsls	r3, r1, #2
 800338a:	461a      	mov	r2, r3
 800338c:	4623      	mov	r3, r4
 800338e:	4628      	mov	r0, r5
 8003390:	4631      	mov	r1, r6
 8003392:	f7fc ff21 	bl	80001d8 <__aeabi_uldivmod>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	461a      	mov	r2, r3
 800339c:	4b9a      	ldr	r3, [pc, #616]	; (8003608 <UART_SetConfig+0x6f4>)
 800339e:	fba3 1302 	umull	r1, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2164      	movs	r1, #100	; 0x64
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	3332      	adds	r3, #50	; 0x32
 80033b0:	4a95      	ldr	r2, [pc, #596]	; (8003608 <UART_SetConfig+0x6f4>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033bc:	4498      	add	r8, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	469b      	mov	fp, r3
 80033c2:	f04f 0c00 	mov.w	ip, #0
 80033c6:	46d9      	mov	r9, fp
 80033c8:	46e2      	mov	sl, ip
 80033ca:	eb19 0309 	adds.w	r3, r9, r9
 80033ce:	eb4a 040a 	adc.w	r4, sl, sl
 80033d2:	4699      	mov	r9, r3
 80033d4:	46a2      	mov	sl, r4
 80033d6:	eb19 090b 	adds.w	r9, r9, fp
 80033da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033f2:	4689      	mov	r9, r1
 80033f4:	4692      	mov	sl, r2
 80033f6:	eb1b 0509 	adds.w	r5, fp, r9
 80033fa:	eb4c 060a 	adc.w	r6, ip, sl
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4619      	mov	r1, r3
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	0094      	lsls	r4, r2, #2
 8003412:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	461a      	mov	r2, r3
 800341a:	4623      	mov	r3, r4
 800341c:	4628      	mov	r0, r5
 800341e:	4631      	mov	r1, r6
 8003420:	f7fc feda 	bl	80001d8 <__aeabi_uldivmod>
 8003424:	4603      	mov	r3, r0
 8003426:	460c      	mov	r4, r1
 8003428:	461a      	mov	r2, r3
 800342a:	4b77      	ldr	r3, [pc, #476]	; (8003608 <UART_SetConfig+0x6f4>)
 800342c:	fba3 1302 	umull	r1, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2164      	movs	r1, #100	; 0x64
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a72      	ldr	r2, [pc, #456]	; (8003608 <UART_SetConfig+0x6f4>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	f003 020f 	and.w	r2, r3, #15
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4442      	add	r2, r8
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	e0d0      	b.n	80035f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003454:	f7fe fe54 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8003458:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	469a      	mov	sl, r3
 800345e:	f04f 0b00 	mov.w	fp, #0
 8003462:	46d0      	mov	r8, sl
 8003464:	46d9      	mov	r9, fp
 8003466:	eb18 0308 	adds.w	r3, r8, r8
 800346a:	eb49 0409 	adc.w	r4, r9, r9
 800346e:	4698      	mov	r8, r3
 8003470:	46a1      	mov	r9, r4
 8003472:	eb18 080a 	adds.w	r8, r8, sl
 8003476:	eb49 090b 	adc.w	r9, r9, fp
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003486:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800348a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800348e:	4688      	mov	r8, r1
 8003490:	4691      	mov	r9, r2
 8003492:	eb1a 0508 	adds.w	r5, sl, r8
 8003496:	eb4b 0609 	adc.w	r6, fp, r9
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4619      	mov	r1, r3
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	f04f 0400 	mov.w	r4, #0
 80034ac:	0094      	lsls	r4, r2, #2
 80034ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034b2:	008b      	lsls	r3, r1, #2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	4628      	mov	r0, r5
 80034ba:	4631      	mov	r1, r6
 80034bc:	f7fc fe8c 	bl	80001d8 <__aeabi_uldivmod>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b50      	ldr	r3, [pc, #320]	; (8003608 <UART_SetConfig+0x6f4>)
 80034c8:	fba3 2302 	umull	r2, r3, r3, r2
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	469b      	mov	fp, r3
 80034d6:	f04f 0c00 	mov.w	ip, #0
 80034da:	46d9      	mov	r9, fp
 80034dc:	46e2      	mov	sl, ip
 80034de:	eb19 0309 	adds.w	r3, r9, r9
 80034e2:	eb4a 040a 	adc.w	r4, sl, sl
 80034e6:	4699      	mov	r9, r3
 80034e8:	46a2      	mov	sl, r4
 80034ea:	eb19 090b 	adds.w	r9, r9, fp
 80034ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003502:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003506:	4689      	mov	r9, r1
 8003508:	4692      	mov	sl, r2
 800350a:	eb1b 0509 	adds.w	r5, fp, r9
 800350e:	eb4c 060a 	adc.w	r6, ip, sl
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4619      	mov	r1, r3
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	f04f 0400 	mov.w	r4, #0
 8003524:	0094      	lsls	r4, r2, #2
 8003526:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800352a:	008b      	lsls	r3, r1, #2
 800352c:	461a      	mov	r2, r3
 800352e:	4623      	mov	r3, r4
 8003530:	4628      	mov	r0, r5
 8003532:	4631      	mov	r1, r6
 8003534:	f7fc fe50 	bl	80001d8 <__aeabi_uldivmod>
 8003538:	4603      	mov	r3, r0
 800353a:	460c      	mov	r4, r1
 800353c:	461a      	mov	r2, r3
 800353e:	4b32      	ldr	r3, [pc, #200]	; (8003608 <UART_SetConfig+0x6f4>)
 8003540:	fba3 1302 	umull	r1, r3, r3, r2
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	2164      	movs	r1, #100	; 0x64
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	3332      	adds	r3, #50	; 0x32
 8003552:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <UART_SetConfig+0x6f4>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355e:	4498      	add	r8, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	469b      	mov	fp, r3
 8003564:	f04f 0c00 	mov.w	ip, #0
 8003568:	46d9      	mov	r9, fp
 800356a:	46e2      	mov	sl, ip
 800356c:	eb19 0309 	adds.w	r3, r9, r9
 8003570:	eb4a 040a 	adc.w	r4, sl, sl
 8003574:	4699      	mov	r9, r3
 8003576:	46a2      	mov	sl, r4
 8003578:	eb19 090b 	adds.w	r9, r9, fp
 800357c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003580:	f04f 0100 	mov.w	r1, #0
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800358c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003590:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003594:	4689      	mov	r9, r1
 8003596:	4692      	mov	sl, r2
 8003598:	eb1b 0509 	adds.w	r5, fp, r9
 800359c:	eb4c 060a 	adc.w	r6, ip, sl
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	f04f 0400 	mov.w	r4, #0
 80035b2:	0094      	lsls	r4, r2, #2
 80035b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035b8:	008b      	lsls	r3, r1, #2
 80035ba:	461a      	mov	r2, r3
 80035bc:	4623      	mov	r3, r4
 80035be:	4628      	mov	r0, r5
 80035c0:	4631      	mov	r1, r6
 80035c2:	f7fc fe09 	bl	80001d8 <__aeabi_uldivmod>
 80035c6:	4603      	mov	r3, r0
 80035c8:	460c      	mov	r4, r1
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <UART_SetConfig+0x6f4>)
 80035ce:	fba3 1302 	umull	r1, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2164      	movs	r1, #100	; 0x64
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3332      	adds	r3, #50	; 0x32
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <UART_SetConfig+0x6f4>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4442      	add	r2, r8
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	e7ff      	b.n	80035f6 <UART_SetConfig+0x6e2>
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003600:	40011000 	.word	0x40011000
 8003604:	40011400 	.word	0x40011400
 8003608:	51eb851f 	.word	0x51eb851f

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4e0d      	ldr	r6, [pc, #52]	; (8003644 <__libc_init_array+0x38>)
 8003610:	4c0d      	ldr	r4, [pc, #52]	; (8003648 <__libc_init_array+0x3c>)
 8003612:	1ba4      	subs	r4, r4, r6
 8003614:	10a4      	asrs	r4, r4, #2
 8003616:	2500      	movs	r5, #0
 8003618:	42a5      	cmp	r5, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	4e0b      	ldr	r6, [pc, #44]	; (800364c <__libc_init_array+0x40>)
 800361e:	4c0c      	ldr	r4, [pc, #48]	; (8003650 <__libc_init_array+0x44>)
 8003620:	f000 f820 	bl	8003664 <_init>
 8003624:	1ba4      	subs	r4, r4, r6
 8003626:	10a4      	asrs	r4, r4, #2
 8003628:	2500      	movs	r5, #0
 800362a:	42a5      	cmp	r5, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003634:	4798      	blx	r3
 8003636:	3501      	adds	r5, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800363e:	4798      	blx	r3
 8003640:	3501      	adds	r5, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	080036a4 	.word	0x080036a4
 8003648:	080036a4 	.word	0x080036a4
 800364c:	080036a4 	.word	0x080036a4
 8003650:	080036a8 	.word	0x080036a8

08003654 <memset>:
 8003654:	4402      	add	r2, r0
 8003656:	4603      	mov	r3, r0
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	f803 1b01 	strb.w	r1, [r3], #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
