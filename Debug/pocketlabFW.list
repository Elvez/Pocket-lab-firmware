
pocketlabFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051bc  080051bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051c4  080051c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  0800523c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  0800523c  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f6b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002643  00000000  00000000  0003100b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00033650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  00034478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001853b  00000000  00000000  00035168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c323  00000000  00000000  0004d6a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000923e9  00000000  00000000  000599c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebdaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d58  00000000  00000000  000ebe2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800513c 	.word	0x0800513c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800513c 	.word	0x0800513c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sendFormat>:

	//Send buffer
	sendPacket(&nack, 1);
}

void sendFormat(char* format, ...) {
 8000590:	b40f      	push	{r0, r1, r2, r3}
 8000592:	b580      	push	{r7, lr}
 8000594:	b086      	sub	sp, #24
 8000596:	af00      	add	r7, sp, #0
	char message[20];
	va_list args;
	va_start(args, format);
 8000598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800059c:	603b      	str	r3, [r7, #0]
	vsprintf(message, format, args);
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	6a39      	ldr	r1, [r7, #32]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 f9d9 	bl	800495c <vsiprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe17 	bl	80001e0 <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	1d39      	adds	r1, r7, #4
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <sendFormat+0x40>)
 80005be:	f003 f9c4 	bl	800394a <HAL_UART_Transmit>
	va_end(args);
}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005cc:	b004      	add	sp, #16
 80005ce:	4770      	bx	lr
 80005d0:	2000016c 	.word	0x2000016c

080005d4 <debug>:
 */


#include "debugger.h"

void debug(char* format, ...) {
 80005d4:	b40f      	push	{r0, r1, r2, r3}
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b09a      	sub	sp, #104	; 0x68
 80005da:	af00      	add	r7, sp, #0

	//Arguments
	va_list args;

	//Get arguments from format
	va_start(args, format);
 80005dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005e0:	603b      	str	r3, [r7, #0]

	//Copy arguments to the message
	vsprintf(message, format, args);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 f9b7 	bl	800495c <vsiprintf>

	//Send message
	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdf5 	bl	80001e0 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	1d39      	adds	r1, r7, #4
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <debug+0x40>)
 8000602:	f003 f9a2 	bl	800394a <HAL_UART_Transmit>
	va_end(args);
}
 8000606:	bf00      	nop
 8000608:	3768      	adds	r7, #104	; 0x68
 800060a:	46bd      	mov	sp, r7
 800060c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000610:	b004      	add	sp, #16
 8000612:	4770      	bx	lr
 8000614:	200001d8 	.word	0x200001d8

08000618 <processCMD>:

//Oscilloscope plot
uint16_t oscVal_[1000];


void processCMD(char* command_) {
 8000618:	b580      	push	{r7, lr}
 800061a:	ed2d 8b02 	vpush	{d8}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	//Command buffer's first character.
	char header_ = command_[0];
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	72fb      	strb	r3, [r7, #11]

	//Number of digits after decimal
	int decimals = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]

	//Is there decimal in the command
	bool decimalFlag = false;
 800062e:	2300      	movs	r3, #0
 8000630:	76fb      	strb	r3, [r7, #27]

	//General use iterator
	int iter = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]

	switch(header_) {
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	3b4d      	subs	r3, #77	; 0x4d
 800063a:	2b0a      	cmp	r3, #10
 800063c:	f200 826e 	bhi.w	8000b1c <processCMD+0x504>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <processCMD+0x30>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000675 	.word	0x08000675
 800064c:	08000b1d 	.word	0x08000b1d
 8000650:	08000917 	.word	0x08000917
 8000654:	08000843 	.word	0x08000843
 8000658:	08000b1d 	.word	0x08000b1d
 800065c:	08000b1d 	.word	0x08000b1d
 8000660:	08000b1d 	.word	0x08000b1d
 8000664:	08000b1d 	.word	0x08000b1d
 8000668:	08000b1d 	.word	0x08000b1d
 800066c:	08000b1d 	.word	0x08000b1d
 8000670:	080006b5 	.word	0x080006b5
	//Multimeter command
	case MULTIMETER:
		//Store source
		multimeter_.source_ = parseInt(command_[1]);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3301      	adds	r3, #1
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fae2 	bl	8000c44 <parseInt>
 8000680:	4603      	mov	r3, r0
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4bac      	ldr	r3, [pc, #688]	; (8000938 <processCMD+0x320>)
 8000686:	705a      	strb	r2, [r3, #1]

		//Store state
		if(command_[2] == STATE_HIGH) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3302      	adds	r3, #2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b48      	cmp	r3, #72	; 0x48
 8000690:	d103      	bne.n	800069a <processCMD+0x82>
		  multimeter_.state_ = STATE_ON;
 8000692:	4ba9      	ldr	r3, [pc, #676]	; (8000938 <processCMD+0x320>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
		  multimeter_.state_ = STATE_OFF;
		} else {
		  debug("Bad command\n\r");
		}

		break;
 8000698:	e243      	b.n	8000b22 <processCMD+0x50a>
		} else if(command_[2] == STATE_LOW) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3302      	adds	r3, #2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b4c      	cmp	r3, #76	; 0x4c
 80006a2:	d103      	bne.n	80006ac <processCMD+0x94>
		  multimeter_.state_ = STATE_OFF;
 80006a4:	4ba4      	ldr	r3, [pc, #656]	; (8000938 <processCMD+0x320>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
		break;
 80006aa:	e23a      	b.n	8000b22 <processCMD+0x50a>
		  debug("Bad command\n\r");
 80006ac:	48a3      	ldr	r0, [pc, #652]	; (800093c <processCMD+0x324>)
 80006ae:	f7ff ff91 	bl	80005d4 <debug>
		break;
 80006b2:	e236      	b.n	8000b22 <processCMD+0x50a>

	//Wave generator command
	case WAVE_GENERATOR:
		//Store source
		waveGenerator_.source_ = parseInt(command_[1]);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3301      	adds	r3, #1
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fac2 	bl	8000c44 <parseInt>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b9e      	ldr	r3, [pc, #632]	; (8000940 <processCMD+0x328>)
 80006c6:	701a      	strb	r2, [r3, #0]

		//Store state
		if(command_[2] == STATE_HIGH) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3302      	adds	r3, #2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b48      	cmp	r3, #72	; 0x48
 80006d0:	f040 80a1 	bne.w	8000816 <processCMD+0x1fe>
			waveGenerator_.state = STATE_ON;
 80006d4:	4b9a      	ldr	r3, [pc, #616]	; (8000940 <processCMD+0x328>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	705a      	strb	r2, [r3, #1]

			//Store wave type
			switch(command_[3]) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3303      	adds	r3, #3
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b32      	cmp	r3, #50	; 0x32
 80006e2:	d008      	beq.n	80006f6 <processCMD+0xde>
 80006e4:	2b33      	cmp	r3, #51	; 0x33
 80006e6:	d00a      	beq.n	80006fe <processCMD+0xe6>
 80006e8:	2b31      	cmp	r3, #49	; 0x31
 80006ea:	d000      	beq.n	80006ee <processCMD+0xd6>
					break;
				case '3':
					waveGenerator_.wave_ = TRIANG;
					break;
				default:
					break;
 80006ec:	e00b      	b.n	8000706 <processCMD+0xee>
					waveGenerator_.wave_ = SINE;
 80006ee:	4b94      	ldr	r3, [pc, #592]	; (8000940 <processCMD+0x328>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	709a      	strb	r2, [r3, #2]
					break;
 80006f4:	e007      	b.n	8000706 <processCMD+0xee>
					waveGenerator_.wave_ = SQUARE;
 80006f6:	4b92      	ldr	r3, [pc, #584]	; (8000940 <processCMD+0x328>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	709a      	strb	r2, [r3, #2]
					break;
 80006fc:	e003      	b.n	8000706 <processCMD+0xee>
					waveGenerator_.wave_ = TRIANG;
 80006fe:	4b90      	ldr	r3, [pc, #576]	; (8000940 <processCMD+0x328>)
 8000700:	2203      	movs	r2, #3
 8000702:	709a      	strb	r2, [r3, #2]
					break;
 8000704:	bf00      	nop
				}

			//Parse and store wave phase as integer
			for(iter = 4; command_[iter] != 'A'; iter++) {
 8000706:	2304      	movs	r3, #4
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	e026      	b.n	800075a <processCMD+0x142>
				if(command_[iter] != '.') {
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b2e      	cmp	r3, #46	; 0x2e
 8000716:	d01b      	beq.n	8000750 <processCMD+0x138>
					if(decimalFlag) decimals++;
 8000718:	7efb      	ldrb	r3, [r7, #27]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <processCMD+0x10c>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3301      	adds	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
					waveGenerator_.period_ = (waveGenerator_.period_* 10) + parseFloat(command_[iter]);
 8000724:	4b86      	ldr	r3, [pc, #536]	; (8000940 <processCMD+0x328>)
 8000726:	edd3 7a02 	vldr	s15, [r3, #8]
 800072a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800072e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fa70 	bl	8000c20 <parseFloat>
 8000740:	eef0 7a40 	vmov.f32	s15, s0
 8000744:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000748:	4b7d      	ldr	r3, [pc, #500]	; (8000940 <processCMD+0x328>)
 800074a:	edc3 7a02 	vstr	s15, [r3, #8]
 800074e:	e001      	b.n	8000754 <processCMD+0x13c>
				} else {
					decimalFlag = true;
 8000750:	2301      	movs	r3, #1
 8000752:	76fb      	strb	r3, [r7, #27]
			for(iter = 4; command_[iter] != 'A'; iter++) {
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b41      	cmp	r3, #65	; 0x41
 8000764:	d1d2      	bne.n	800070c <processCMD+0xf4>
				}
			}

			//Convert integer to float
			while(decimals > 0) {
 8000766:	e00c      	b.n	8000782 <processCMD+0x16a>
				waveGenerator_.period_ = waveGenerator_.period_ / 10;
 8000768:	4b75      	ldr	r3, [pc, #468]	; (8000940 <processCMD+0x328>)
 800076a:	ed93 7a02 	vldr	s14, [r3, #8]
 800076e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000776:	4b72      	ldr	r3, [pc, #456]	; (8000940 <processCMD+0x328>)
 8000778:	edc3 7a02 	vstr	s15, [r3, #8]
				decimals--;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	3b01      	subs	r3, #1
 8000780:	61fb      	str	r3, [r7, #28]
			while(decimals > 0) {
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcef      	bgt.n	8000768 <processCMD+0x150>
			}

			//Reset vars
			decimals = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
			decimalFlag = false;
 800078c:	2300      	movs	r3, #0
 800078e:	76fb      	strb	r3, [r7, #27]
			iter++;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	3301      	adds	r3, #1
 8000794:	617b      	str	r3, [r7, #20]

			//Parse and store wave amplitude as integer
			while(command_[iter] != '-') {
 8000796:	e026      	b.n	80007e6 <processCMD+0x1ce>
				if(command_[iter] != '.') {
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b2e      	cmp	r3, #46	; 0x2e
 80007a2:	d01b      	beq.n	80007dc <processCMD+0x1c4>
					if(decimalFlag) decimals++;
 80007a4:	7efb      	ldrb	r3, [r7, #27]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <processCMD+0x198>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3301      	adds	r3, #1
 80007ae:	61fb      	str	r3, [r7, #28]
					waveGenerator_.amplitude_ = (waveGenerator_.amplitude_ * 10) + parseFloat(command_[iter]);
 80007b0:	4b63      	ldr	r3, [pc, #396]	; (8000940 <processCMD+0x328>)
 80007b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80007b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80007ba:	ee27 8a87 	vmul.f32	s16, s15, s14
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fa2a 	bl	8000c20 <parseFloat>
 80007cc:	eef0 7a40 	vmov.f32	s15, s0
 80007d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80007d4:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <processCMD+0x328>)
 80007d6:	edc3 7a01 	vstr	s15, [r3, #4]
 80007da:	e001      	b.n	80007e0 <processCMD+0x1c8>
				} else {
					decimalFlag = true;
 80007dc:	2301      	movs	r3, #1
 80007de:	76fb      	strb	r3, [r7, #27]
				}
				iter++;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
			while(command_[iter] != '-') {
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b2d      	cmp	r3, #45	; 0x2d
 80007f0:	d1d2      	bne.n	8000798 <processCMD+0x180>
			}

			//Convert integer to float
			while(decimals > 0) {
 80007f2:	e00c      	b.n	800080e <processCMD+0x1f6>
				waveGenerator_.amplitude_ = waveGenerator_.amplitude_ / 10;
 80007f4:	4b52      	ldr	r3, [pc, #328]	; (8000940 <processCMD+0x328>)
 80007f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80007fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80007fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000802:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <processCMD+0x328>)
 8000804:	edc3 7a01 	vstr	s15, [r3, #4]
				decimals--;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3b01      	subs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
			while(decimals > 0) {
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	2b00      	cmp	r3, #0
 8000812:	dcef      	bgt.n	80007f4 <processCMD+0x1dc>
 8000814:	e00e      	b.n	8000834 <processCMD+0x21c>
			}
		} else if(command_[2] == STATE_LOW) {
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3302      	adds	r3, #2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b4c      	cmp	r3, #76	; 0x4c
 800081e:	d106      	bne.n	800082e <processCMD+0x216>
			//Store state
			waveGenerator_.state = STATE_OFF;
 8000820:	4b47      	ldr	r3, [pc, #284]	; (8000940 <processCMD+0x328>)
 8000822:	2200      	movs	r2, #0
 8000824:	705a      	strb	r2, [r3, #1]
			resetParams(WAVE_GENERATOR);
 8000826:	2057      	movs	r0, #87	; 0x57
 8000828:	f000 fa1a 	bl	8000c60 <resetParams>
 800082c:	e002      	b.n	8000834 <processCMD+0x21c>
		} else {
			debug("Bad command\n\r");
 800082e:	4843      	ldr	r0, [pc, #268]	; (800093c <processCMD+0x324>)
 8000830:	f7ff fed0 	bl	80005d4 <debug>
		}

		//Reset vars
		decimals = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
		decimalFlag = false;
 8000838:	2300      	movs	r3, #0
 800083a:	76fb      	strb	r3, [r7, #27]
		iter = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

		break;
 8000840:	e16f      	b.n	8000b22 <processCMD+0x50a>

	//Power source command
	case POWER_SOURCE:
		//Store source
		powerSource_.source_ = parseInt(command_[1]);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f9fb 	bl	8000c44 <parseInt>
 800084e:	4603      	mov	r3, r0
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <processCMD+0x32c>)
 8000854:	701a      	strb	r2, [r3, #0]

		//Store state
		if(command_[2] == STATE_HIGH) {
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3302      	adds	r3, #2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b48      	cmp	r3, #72	; 0x48
 800085e:	d144      	bne.n	80008ea <processCMD+0x2d2>
			powerSource_.state_ = STATE_ON;
 8000860:	4b38      	ldr	r3, [pc, #224]	; (8000944 <processCMD+0x32c>)
 8000862:	2201      	movs	r2, #1
 8000864:	705a      	strb	r2, [r3, #1]

			//Store amplitude as integer
			for(iter = 3; command_[iter] != '-'; iter++) {
 8000866:	2303      	movs	r3, #3
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e026      	b.n	80008ba <processCMD+0x2a2>
				if(command_[iter] != '.') {
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b2e      	cmp	r3, #46	; 0x2e
 8000876:	d01b      	beq.n	80008b0 <processCMD+0x298>
					if(decimalFlag) decimals++;
 8000878:	7efb      	ldrb	r3, [r7, #27]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <processCMD+0x26c>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3301      	adds	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
					powerSource_.value_ = (powerSource_.value_ * 10) + parseFloat(command_[iter]);
 8000884:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <processCMD+0x32c>)
 8000886:	edd3 7a01 	vldr	s15, [r3, #4]
 800088a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800088e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f9c0 	bl	8000c20 <parseFloat>
 80008a0:	eef0 7a40 	vmov.f32	s15, s0
 80008a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <processCMD+0x32c>)
 80008aa:	edc3 7a01 	vstr	s15, [r3, #4]
 80008ae:	e001      	b.n	80008b4 <processCMD+0x29c>
				} else {
					decimalFlag = true;
 80008b0:	2301      	movs	r3, #1
 80008b2:	76fb      	strb	r3, [r7, #27]
			for(iter = 3; command_[iter] != '-'; iter++) {
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3301      	adds	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b2d      	cmp	r3, #45	; 0x2d
 80008c4:	d1d2      	bne.n	800086c <processCMD+0x254>
				}
			}

			//Convert integer to float
			while(decimals > 0) {
 80008c6:	e00c      	b.n	80008e2 <processCMD+0x2ca>
				powerSource_.value_ = powerSource_.value_ / 10;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <processCMD+0x32c>)
 80008ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80008ce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80008d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <processCMD+0x32c>)
 80008d8:	edc3 7a01 	vstr	s15, [r3, #4]
				decimals--;
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	3b01      	subs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
			while(decimals > 0) {
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	dcef      	bgt.n	80008c8 <processCMD+0x2b0>
 80008e8:	e00e      	b.n	8000908 <processCMD+0x2f0>
			}
		} else if(command_[2] == STATE_LOW) {
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3302      	adds	r3, #2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b4c      	cmp	r3, #76	; 0x4c
 80008f2:	d106      	bne.n	8000902 <processCMD+0x2ea>
			//Store state and reset params
			powerSource_.state_ = STATE_OFF;
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <processCMD+0x32c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	705a      	strb	r2, [r3, #1]
			resetParams(POWER_SOURCE);
 80008fa:	2050      	movs	r0, #80	; 0x50
 80008fc:	f000 f9b0 	bl	8000c60 <resetParams>
 8000900:	e002      	b.n	8000908 <processCMD+0x2f0>
		} else {
			debug("Bad command\n\r");
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <processCMD+0x324>)
 8000904:	f7ff fe66 	bl	80005d4 <debug>
		}

		//Reset vars
		decimals = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
		decimalFlag = false;
 800090c:	2300      	movs	r3, #0
 800090e:	76fb      	strb	r3, [r7, #27]
		iter = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

		break;
 8000914:	e105      	b.n	8000b22 <processCMD+0x50a>

	//Oscilloscope command
	case OSCILLOSCOPE:
		//Store channel
		if(command_[1] == '1') {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3301      	adds	r3, #1
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b31      	cmp	r3, #49	; 0x31
 800091e:	f040 8081 	bne.w	8000a24 <processCMD+0x40c>
			if(command_[2] == STATE_HIGH) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3302      	adds	r3, #2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b48      	cmp	r3, #72	; 0x48
 800092a:	d164      	bne.n	80009f6 <processCMD+0x3de>
				//Store state
				oscilloscopeCh1_.state_ = STATE_ON;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <processCMD+0x330>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]

				//Store period as integer
				for(int iter = 3; command_[iter] != 'U'; iter++) {
 8000932:	2303      	movs	r3, #3
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	e030      	b.n	800099a <processCMD+0x382>
 8000938:	200001b8 	.word	0x200001b8
 800093c:	08005154 	.word	0x08005154
 8000940:	200001bc 	.word	0x200001bc
 8000944:	200001cc 	.word	0x200001cc
 8000948:	200001ac 	.word	0x200001ac
					if(command_[iter] != '.') {
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b2e      	cmp	r3, #46	; 0x2e
 8000956:	d01b      	beq.n	8000990 <processCMD+0x378>
						if(decimalFlag) decimals++;
 8000958:	7efb      	ldrb	r3, [r7, #27]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <processCMD+0x34c>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3301      	adds	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
						oscilloscopeCh1_.period_ = (oscilloscopeCh1_.period_ * 10) + parseFloat(command_[iter]);
 8000964:	4b72      	ldr	r3, [pc, #456]	; (8000b30 <processCMD+0x518>)
 8000966:	edd3 7a01 	vldr	s15, [r3, #4]
 800096a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800096e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f950 	bl	8000c20 <parseFloat>
 8000980:	eef0 7a40 	vmov.f32	s15, s0
 8000984:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000988:	4b69      	ldr	r3, [pc, #420]	; (8000b30 <processCMD+0x518>)
 800098a:	edc3 7a01 	vstr	s15, [r3, #4]
 800098e:	e001      	b.n	8000994 <processCMD+0x37c>
					} else {
						decimalFlag = true;
 8000990:	2301      	movs	r3, #1
 8000992:	76fb      	strb	r3, [r7, #27]
				for(int iter = 3; command_[iter] != 'U'; iter++) {
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	3301      	adds	r3, #1
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	4413      	add	r3, r2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b55      	cmp	r3, #85	; 0x55
 80009a4:	d1d2      	bne.n	800094c <processCMD+0x334>
					}
				}

				//Convert to float
				while(decimals > 0) {
 80009a6:	e00c      	b.n	80009c2 <processCMD+0x3aa>
					oscilloscopeCh1_.period_ = oscilloscopeCh1_.period_ / 10;
 80009a8:	4b61      	ldr	r3, [pc, #388]	; (8000b30 <processCMD+0x518>)
 80009aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80009ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80009b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b6:	4b5e      	ldr	r3, [pc, #376]	; (8000b30 <processCMD+0x518>)
 80009b8:	edc3 7a01 	vstr	s15, [r3, #4]
					decimals--;
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	3b01      	subs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
				while(decimals > 0) {
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dcef      	bgt.n	80009a8 <processCMD+0x390>
				}

				//Store period unit
				switch(command_[iter]) {
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b32      	cmp	r3, #50	; 0x32
 80009d2:	d008      	beq.n	80009e6 <processCMD+0x3ce>
 80009d4:	2b33      	cmp	r3, #51	; 0x33
 80009d6:	d00a      	beq.n	80009ee <processCMD+0x3d6>
 80009d8:	2b31      	cmp	r3, #49	; 0x31
 80009da:	d000      	beq.n	80009de <processCMD+0x3c6>
					break;
				case '3':
					oscilloscopeCh1_.unit_ = SECOND;
					break;
				default:
					break;
 80009dc:	e01a      	b.n	8000a14 <processCMD+0x3fc>
					oscilloscopeCh1_.unit_ = MICRO;
 80009de:	4b54      	ldr	r3, [pc, #336]	; (8000b30 <processCMD+0x518>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	721a      	strb	r2, [r3, #8]
					break;
 80009e4:	e016      	b.n	8000a14 <processCMD+0x3fc>
					oscilloscopeCh1_.unit_ = MILLI;
 80009e6:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <processCMD+0x518>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	721a      	strb	r2, [r3, #8]
					break;
 80009ec:	e012      	b.n	8000a14 <processCMD+0x3fc>
					oscilloscopeCh1_.unit_ = SECOND;
 80009ee:	4b50      	ldr	r3, [pc, #320]	; (8000b30 <processCMD+0x518>)
 80009f0:	2203      	movs	r2, #3
 80009f2:	721a      	strb	r2, [r3, #8]
					break;
 80009f4:	e00e      	b.n	8000a14 <processCMD+0x3fc>
				}
			} else if(command_[2] == STATE_LOW) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3302      	adds	r3, #2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b4c      	cmp	r3, #76	; 0x4c
 80009fe:	d109      	bne.n	8000a14 <processCMD+0x3fc>
				//Store state
				oscilloscopeCh1_.state_ = STATE_OFF;
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <processCMD+0x518>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]

				//Reset params
				oscilloscopeCh1_.period_ = 0;
 8000a06:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <processCMD+0x518>)
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
				oscilloscopeCh1_.unit_ = MICRO;
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <processCMD+0x518>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	721a      	strb	r2, [r3, #8]
			}

			//Reset vars
			iter++;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	3301      	adds	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
			decimals = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
			decimalFlag = false;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	76fb      	strb	r3, [r7, #27]
			iter++;
			decimals = 0;
			decimalFlag = false;
		}

		break;
 8000a22:	e07d      	b.n	8000b20 <processCMD+0x508>
		} else if(command_[1] == '2') {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3301      	adds	r3, #1
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b32      	cmp	r3, #50	; 0x32
 8000a2c:	d178      	bne.n	8000b20 <processCMD+0x508>
			if(command_[2] == STATE_HIGH) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3302      	adds	r3, #2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b48      	cmp	r3, #72	; 0x48
 8000a36:	d15a      	bne.n	8000aee <processCMD+0x4d6>
				oscilloscopeCh2_.state_ = STATE_ON;
 8000a38:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <processCMD+0x51c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
				for(int iter = 3; command_[iter] != 'U'; iter++) {
 8000a3e:	2303      	movs	r3, #3
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e026      	b.n	8000a92 <processCMD+0x47a>
					if(command_[iter] != '.') {
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8000a4e:	d01b      	beq.n	8000a88 <processCMD+0x470>
						if(decimalFlag) decimals++;
 8000a50:	7efb      	ldrb	r3, [r7, #27]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <processCMD+0x444>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
						oscilloscopeCh2_.period_ = (oscilloscopeCh2_.period_ * 10) + parseFloat(command_[iter]);
 8000a5c:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <processCMD+0x51c>)
 8000a5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a66:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f8d4 	bl	8000c20 <parseFloat>
 8000a78:	eef0 7a40 	vmov.f32	s15, s0
 8000a7c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <processCMD+0x51c>)
 8000a82:	edc3 7a01 	vstr	s15, [r3, #4]
 8000a86:	e001      	b.n	8000a8c <processCMD+0x474>
						decimalFlag = true;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	76fb      	strb	r3, [r7, #27]
				for(int iter = 3; command_[iter] != 'U'; iter++) {
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b55      	cmp	r3, #85	; 0x55
 8000a9c:	d1d2      	bne.n	8000a44 <processCMD+0x42c>
				while(decimals > 0) {
 8000a9e:	e00c      	b.n	8000aba <processCMD+0x4a2>
					oscilloscopeCh2_.period_ = oscilloscopeCh2_.period_ / 10;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <processCMD+0x51c>)
 8000aa2:	ed93 7a01 	vldr	s14, [r3, #4]
 8000aa6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <processCMD+0x51c>)
 8000ab0:	edc3 7a01 	vstr	s15, [r3, #4]
					decimals--;
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
				while(decimals > 0) {
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	dcef      	bgt.n	8000aa0 <processCMD+0x488>
				switch(command_[iter]) {
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b32      	cmp	r3, #50	; 0x32
 8000aca:	d008      	beq.n	8000ade <processCMD+0x4c6>
 8000acc:	2b33      	cmp	r3, #51	; 0x33
 8000ace:	d00a      	beq.n	8000ae6 <processCMD+0x4ce>
 8000ad0:	2b31      	cmp	r3, #49	; 0x31
 8000ad2:	d000      	beq.n	8000ad6 <processCMD+0x4be>
					break;
 8000ad4:	e01a      	b.n	8000b0c <processCMD+0x4f4>
					oscilloscopeCh2_.unit_ = MICRO;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <processCMD+0x51c>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	721a      	strb	r2, [r3, #8]
					break;
 8000adc:	e016      	b.n	8000b0c <processCMD+0x4f4>
					oscilloscopeCh2_.unit_ = MILLI;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <processCMD+0x51c>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	721a      	strb	r2, [r3, #8]
					break;
 8000ae4:	e012      	b.n	8000b0c <processCMD+0x4f4>
					oscilloscopeCh2_.unit_ = SECOND;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <processCMD+0x51c>)
 8000ae8:	2203      	movs	r2, #3
 8000aea:	721a      	strb	r2, [r3, #8]
					break;
 8000aec:	e00e      	b.n	8000b0c <processCMD+0x4f4>
			} else if(command_[2] == STATE_LOW) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3302      	adds	r3, #2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b4c      	cmp	r3, #76	; 0x4c
 8000af6:	d109      	bne.n	8000b0c <processCMD+0x4f4>
				oscilloscopeCh2_.state_ = STATE_OFF;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <processCMD+0x51c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
				oscilloscopeCh2_.period_ = 0;
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <processCMD+0x51c>)
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
				oscilloscopeCh2_.unit_ = MICRO;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <processCMD+0x51c>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	721a      	strb	r2, [r3, #8]
			iter++;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
			decimals = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
			decimalFlag = false;
 8000b16:	2300      	movs	r3, #0
 8000b18:	76fb      	strb	r3, [r7, #27]
		break;
 8000b1a:	e001      	b.n	8000b20 <processCMD+0x508>

	//Bad command received
	default:
		break;
 8000b1c:	bf00      	nop
 8000b1e:	e000      	b.n	8000b22 <processCMD+0x50a>
		break;
 8000b20:	bf00      	nop
	}
}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	ecbd 8b02 	vpop	{d8}
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200001ac 	.word	0x200001ac
 8000b34:	200000b8 	.word	0x200000b8

08000b38 <runDevice>:


void runDevice(MultimeterTypedef mul_, WaveGeneratorTypedef wg_, PowerSourceTypedef ps_,
		OscilloscopeTypedef osc1_, OscilloscopeTypedef osc2_) {
 8000b38:	b084      	sub	sp, #16
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	80b8      	strh	r0, [r7, #4]
 8000b42:	f107 0014 	add.w	r0, r7, #20
 8000b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Multimeter turned on
	if(mul_.state_ == STATE_ON) {
 8000b4a:	793b      	ldrb	r3, [r7, #4]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d114      	bne.n	8000b7a <runDevice+0x42>
		//Stop any running service
		killOscilloscope();
 8000b50:	f000 f8de 	bl	8000d10 <killOscilloscope>

		//Start multimeter
		if(mul_.source_ == 1) {
 8000b54:	797b      	ldrb	r3, [r7, #5]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d105      	bne.n	8000b66 <runDevice+0x2e>
			//Get ADC value
			multimeterVoltVal_ = getADCvalue();
 8000b5a:	f000 f847 	bl	8000bec <getADCvalue>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <runDevice+0x8c>)
 8000b64:	801a      	strh	r2, [r3, #0]
		} else {

		}

		//Send value at approximately 5Hz
		sendFormat("%d!", multimeterVoltVal_);
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <runDevice+0x8c>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <runDevice+0x90>)
 8000b6e:	f7ff fd0f 	bl	8000590 <sendFormat>
		delayMS(150);
 8000b72:	2096      	movs	r0, #150	; 0x96
 8000b74:	f000 f82e 	bl	8000bd4 <delayMS>
		//Free device
		powerSource_.isWaiting_ = false;
	} else {

	}
}
 8000b78:	e01c      	b.n	8000bb4 <runDevice+0x7c>
	} else if(osc1_.state_ == STATE_ON) {
 8000b7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <runDevice+0x50>
		killMultimeter();
 8000b82:	f000 f8d7 	bl	8000d34 <killMultimeter>
}
 8000b86:	e015      	b.n	8000bb4 <runDevice+0x7c>
	} else if(osc2_.state_ == STATE_ON) {
 8000b88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d102      	bne.n	8000b96 <runDevice+0x5e>
		killMultimeter();
 8000b90:	f000 f8d0 	bl	8000d34 <killMultimeter>
}
 8000b94:	e00e      	b.n	8000bb4 <runDevice+0x7c>
	} else if(waveGenerator_.isWaiting_) {
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <runDevice+0x94>)
 8000b98:	7b1b      	ldrb	r3, [r3, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <runDevice+0x6e>
		waveGenerator_.isWaiting_ = false;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <runDevice+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	731a      	strb	r2, [r3, #12]
}
 8000ba4:	e006      	b.n	8000bb4 <runDevice+0x7c>
	} else if(powerSource_.isWaiting_) {
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <runDevice+0x98>)
 8000ba8:	7a1b      	ldrb	r3, [r3, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <runDevice+0x7c>
		powerSource_.isWaiting_ = false;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <runDevice+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	721a      	strb	r2, [r3, #8]
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bbe:	b004      	add	sp, #16
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	08005164 	.word	0x08005164
 8000bcc:	200001bc 	.word	0x200001bc
 8000bd0:	200001cc 	.word	0x200001cc

08000bd4 <delayMS>:

void delayMS(uint32_t time) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fde5 	bl	80017ac <HAL_Delay>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <getADCvalue>:

uint16_t getADCvalue(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	//ADC value
	uint16_t value_ = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	80fb      	strh	r3, [r7, #6]

	//Start conversion
	HAL_ADC_Start(&hadc1);
 8000bf6:	4809      	ldr	r0, [pc, #36]	; (8000c1c <getADCvalue+0x30>)
 8000bf8:	f000 fe3e 	bl	8001878 <HAL_ADC_Start>

	//Wait for conversion
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <getADCvalue+0x30>)
 8000c02:	f000 fedf 	bl	80019c4 <HAL_ADC_PollForConversion>

	//Get value and return
	value_ = HAL_ADC_GetValue(&hadc1);
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <getADCvalue+0x30>)
 8000c08:	f000 ff60 	bl	8001acc <HAL_ADC_GetValue>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	80fb      	strh	r3, [r7, #6]
	return value_;
 8000c10:	88fb      	ldrh	r3, [r7, #6]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000c4 	.word	0x200000c4

08000c20 <parseFloat>:

float parseFloat(char c) {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	return c - '0';
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	3b30      	subs	r3, #48	; 0x30
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c36:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <parseInt>:

int parseInt(char c) {
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	return c - '0';
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	3b30      	subs	r3, #48	; 0x30
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <resetParams>:

void resetParams(char device) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	//Set all params to default
	switch(device) {
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	3b4d      	subs	r3, #77	; 0x4d
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	d83c      	bhi.n	8000cec <resetParams+0x8c>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <resetParams+0x18>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000cc3 	.word	0x08000cc3
 8000c7c:	08000ced 	.word	0x08000ced
 8000c80:	08000ca5 	.word	0x08000ca5
 8000c84:	08000ce3 	.word	0x08000ce3
 8000c88:	08000ced 	.word	0x08000ced
 8000c8c:	08000ced 	.word	0x08000ced
 8000c90:	08000ced 	.word	0x08000ced
 8000c94:	08000ced 	.word	0x08000ced
 8000c98:	08000ced 	.word	0x08000ced
 8000c9c:	08000ced 	.word	0x08000ced
 8000ca0:	08000cd1 	.word	0x08000cd1
	case OSCILLOSCOPE:
		oscilloscopeCh1_.period_ = 0;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <resetParams+0x9c>)
 8000ca6:	f04f 0200 	mov.w	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
		oscilloscopeCh1_.unit_ = MICRO;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <resetParams+0x9c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	721a      	strb	r2, [r3, #8]
		oscilloscopeCh2_.period_ = 0;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <resetParams+0xa0>)
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
		oscilloscopeCh2_.unit_ = MICRO;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <resetParams+0xa0>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	721a      	strb	r2, [r3, #8]
		break;
 8000cc0:	e015      	b.n	8000cee <resetParams+0x8e>
	case MULTIMETER:
		multimeter_.source_ = 1;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <resetParams+0xa4>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	705a      	strb	r2, [r3, #1]
		multimeter_.state_ = STATE_OFF;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <resetParams+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
		break;
 8000cce:	e00e      	b.n	8000cee <resetParams+0x8e>
	case WAVE_GENERATOR:
		waveGenerator_.amplitude_ = 0;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <resetParams+0xa8>)
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
		waveGenerator_.period_ = 0;
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <resetParams+0xa8>)
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
		break;
 8000ce0:	e005      	b.n	8000cee <resetParams+0x8e>
	case POWER_SOURCE:
		powerSource_.value_ = 0;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <resetParams+0xac>)
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
		break;
 8000cea:	e000      	b.n	8000cee <resetParams+0x8e>
	default :
		break;
 8000cec:	bf00      	nop
	}
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200001ac 	.word	0x200001ac
 8000d00:	200000b8 	.word	0x200000b8
 8000d04:	200001b8 	.word	0x200001b8
 8000d08:	200001bc 	.word	0x200001bc
 8000d0c:	200001cc 	.word	0x200001cc

08000d10 <killOscilloscope>:

void killOscilloscope(void) {
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
	oscilloscopeCh1_.state_ = STATE_OFF;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <killOscilloscope+0x1c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	oscilloscopeCh2_.state_ = STATE_OFF;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <killOscilloscope+0x20>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200001ac 	.word	0x200001ac
 8000d30:	200000b8 	.word	0x200000b8

08000d34 <killMultimeter>:

void killMultimeter(void) {
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	multimeter_.state_ = STATE_OFF;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <killMultimeter+0x14>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	200001b8 	.word	0x200001b8

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d52:	f000 fce9 	bl	8001728 <HAL_Init>

  /* USER CODE BEGIN Init */
  initDevices();
 8000d56:	f000 fa21 	bl	800119c <initDevices>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f84f 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 f997 	bl	8001090 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d62:	f000 f975 	bl	8001050 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d66:	f000 f917 	bl	8000f98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d6a:	f000 f947 	bl	8000ffc <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000d6e:	f000 f8ff 	bl	8000f70 <MX_CRC_Init>
  MX_ADC1_Init();
 8000d72:	f000 f8ab 	bl	8000ecc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)commandBuffer, 20);
 8000d76:	2214      	movs	r2, #20
 8000d78:	4918      	ldr	r1, [pc, #96]	; (8000ddc <main+0x90>)
 8000d7a:	4819      	ldr	r0, [pc, #100]	; (8000de0 <main+0x94>)
 8000d7c:	f002 fe7e 	bl	8003a7c <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(commandState == WAITING) {
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <main+0x98>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d106      	bne.n	8000d96 <main+0x4a>
	  processCMD(commandBuffer);
 8000d88:	4814      	ldr	r0, [pc, #80]	; (8000ddc <main+0x90>)
 8000d8a:	f7ff fc45 	bl	8000618 <processCMD>
	  commandState = FREE;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <main+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e7f4      	b.n	8000d80 <main+0x34>
	} else if(commandState == FREE) {
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <main+0x98>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f0      	bne.n	8000d80 <main+0x34>
	  runDevice(multimeter_, waveGenerator_, powerSource_, oscilloscopeCh1_, oscilloscopeCh2_);
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <main+0x9c>)
 8000da0:	4d12      	ldr	r5, [pc, #72]	; (8000dec <main+0xa0>)
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <main+0xa4>)
 8000da4:	ac07      	add	r4, sp, #28
 8000da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000dac:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <main+0xa8>)
 8000dae:	ac04      	add	r4, sp, #16
 8000db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <main+0xac>)
 8000db8:	ac01      	add	r4, sp, #4
 8000dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000dc0:	782a      	ldrb	r2, [r5, #0]
 8000dc2:	7869      	ldrb	r1, [r5, #1]
 8000dc4:	0209      	lsls	r1, r1, #8
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f362 000f 	bfi	r0, r2, #0, #16
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	9200      	str	r2, [sp, #0]
 8000dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd4:	f7ff feb0 	bl	8000b38 <runDevice>
	if(commandState == WAITING) {
 8000dd8:	e7d2      	b.n	8000d80 <main+0x34>
 8000dda:	bf00      	nop
 8000ddc:	2000009c 	.word	0x2000009c
 8000de0:	2000016c 	.word	0x2000016c
 8000de4:	2000008e 	.word	0x2000008e
 8000de8:	200001bc 	.word	0x200001bc
 8000dec:	200001b8 	.word	0x200001b8
 8000df0:	200000b8 	.word	0x200000b8
 8000df4:	200001ac 	.word	0x200001ac
 8000df8:	200001cc 	.word	0x200001cc

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fd88 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e60:	2310      	movs	r3, #16
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e70:	2364      	movs	r3, #100	; 0x64
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fe89 	bl	8002b98 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e8c:	f000 f9ea 	bl	8001264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2103      	movs	r1, #3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 f8e3 	bl	8003078 <HAL_RCC_ClockConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eb8:	f000 f9d4 	bl	8001264 <Error_Handler>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3750      	adds	r7, #80	; 0x50
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x9c>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MX_ADC1_Init+0xa0>)
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f2e:	f000 fc5f 	bl	80017f0 <HAL_ADC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f38:	f000 f994 	bl	8001264 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f44:	2302      	movs	r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f4e:	f000 fdcb 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f58:	f000 f984 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000c4 	.word	0x200000c4
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	0f000001 	.word	0x0f000001

08000f70 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_CRC_Init+0x20>)
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <MX_CRC_Init+0x24>)
 8000f78:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_CRC_Init+0x20>)
 8000f7c:	f001 f8c4 	bl	8002108 <HAL_CRC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f86:	f000 f96d 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000b0 	.word	0x200000b0
 8000f94:	40023000 	.word	0x40023000

08000f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000f9e:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <MX_USART1_UART_Init+0x60>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fd0:	f002 fc6e 	bl	80038b0 <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fda:	f000 f943 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //Enable receive interrupt
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0220 	orr.w	r2, r2, #32
 8000fec:	60da      	str	r2, [r3, #12]
  //------------------------
  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000016c 	.word	0x2000016c
 8000ff8:	40011000 	.word	0x40011000

08000ffc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_USART2_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001034:	f002 fc3c 	bl	80038b0 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800103e:	f000 f911 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001d8 	.word	0x200001d8
 800104c:	40004400 	.word	0x40004400

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_DMA_Init+0x3c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <MX_DMA_Init+0x3c>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_DMA_Init+0x3c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	203a      	movs	r0, #58	; 0x3a
 8001078:	f001 f81c 	bl	80020b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800107c:	203a      	movs	r0, #58	; 0x3a
 800107e:	f001 f835 	bl	80020ec <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a29      	ldr	r2, [pc, #164]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a22      	ldr	r2, [pc, #136]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_GPIO_Init+0xe0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <MX_GPIO_Init+0xe0>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_GPIO_Init+0xe0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111c:	4815      	ldr	r0, [pc, #84]	; (8001174 <MX_GPIO_Init+0xe4>)
 800111e:	f001 fd21 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2102      	movs	r1, #2
 8001126:	4814      	ldr	r0, [pc, #80]	; (8001178 <MX_GPIO_Init+0xe8>)
 8001128:	f001 fd1c 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <MX_GPIO_Init+0xe4>)
 8001146:	f001 fb8b 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800114a:	2302      	movs	r3, #2
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_GPIO_Init+0xe8>)
 8001162:	f001 fb7d 	bl	8002860 <HAL_GPIO_Init>

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40020800 	.word	0x40020800
 8001178:	40020400 	.word	0x40020400

0800117c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	commandState = WAITING;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_UART_RxCpltCallback+0x1c>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000008e 	.word	0x2000008e

0800119c <initDevices>:

void initDevices(void) {
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	multimeter_.source_ = 1;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <initDevices+0x8c>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	705a      	strb	r2, [r3, #1]
	multimeter_.state_ = STATE_OFF;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <initDevices+0x8c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]

	waveGenerator_.amplitude_ = 0;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <initDevices+0x90>)
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
	waveGenerator_.period_ = 0;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <initDevices+0x90>)
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
	waveGenerator_.source_ = 1;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <initDevices+0x90>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
	waveGenerator_.state = STATE_OFF;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <initDevices+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	705a      	strb	r2, [r3, #1]
	waveGenerator_.wave_ = SINE;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <initDevices+0x90>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	709a      	strb	r2, [r3, #2]
	waveGenerator_.isWaiting_ = false;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <initDevices+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	731a      	strb	r2, [r3, #12]

	powerSource_.source_ = 1;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <initDevices+0x94>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
	powerSource_.state_ = STATE_OFF;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <initDevices+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	705a      	strb	r2, [r3, #1]
	powerSource_.value_ = 0;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <initDevices+0x94>)
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
	powerSource_.isWaiting_ = false;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <initDevices+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	721a      	strb	r2, [r3, #8]

	oscilloscopeCh1_.state_ = STATE_OFF;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <initDevices+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
	oscilloscopeCh1_.period_ = 0;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <initDevices+0x98>)
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
	oscilloscopeCh1_.unit_ = MICRO;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <initDevices+0x98>)
 80011fe:	2201      	movs	r2, #1
 8001200:	721a      	strb	r2, [r3, #8]

	oscilloscopeCh2_.state_ = STATE_OFF;
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <initDevices+0x9c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
	oscilloscopeCh2_.period_ = 0;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <initDevices+0x9c>)
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
	oscilloscopeCh2_.unit_ = MICRO;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <initDevices+0x9c>)
 8001212:	2201      	movs	r2, #1
 8001214:	721a      	strb	r2, [r3, #8]

	commandState = FREE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <initDevices+0xa0>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200001b8 	.word	0x200001b8
 800122c:	200001bc 	.word	0x200001bc
 8001230:	200001cc 	.word	0x200001cc
 8001234:	200001ac 	.word	0x200001ac
 8001238:	200000b8 	.word	0x200000b8
 800123c:	2000008e 	.word	0x2000008e

08001240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001252:	f000 fa8b 	bl	800176c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126a:	e7fe      	b.n	800126a <Error_Handler+0x6>

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_ADC_MspInit+0x7c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d127      	bne.n	800132e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_ADC_MspInit+0x80>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a15      	ldr	r2, [pc, #84]	; (800133c <HAL_ADC_MspInit+0x80>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_ADC_MspInit+0x80>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_ADC_MspInit+0x80>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_ADC_MspInit+0x80>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_ADC_MspInit+0x80>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7;
 8001316:	23a2      	movs	r3, #162	; 0xa2
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_ADC_MspInit+0x84>)
 800132a:	f001 fa99 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40012000 	.word	0x40012000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_CRC_MspInit+0x3c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10d      	bne.n	8001372 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_CRC_MspInit+0x40>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_CRC_MspInit+0x40>)
 8001360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_CRC_MspInit+0x40>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023000 	.word	0x40023000
 8001384:	40023800 	.word	0x40023800

08001388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a4e      	ldr	r2, [pc, #312]	; (80014e0 <HAL_UART_MspInit+0x158>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d164      	bne.n	8001474 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a4c      	ldr	r2, [pc, #304]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a45      	ldr	r2, [pc, #276]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f4:	2307      	movs	r3, #7
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	483a      	ldr	r0, [pc, #232]	; (80014e8 <HAL_UART_MspInit+0x160>)
 8001400:	f001 fa2e 	bl	8002860 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_UART_MspInit+0x164>)
 8001406:	4a3a      	ldr	r2, [pc, #232]	; (80014f0 <HAL_UART_MspInit+0x168>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <HAL_UART_MspInit+0x164>)
 800140c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001410:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001412:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_UART_MspInit+0x164>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_UART_MspInit+0x164>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_UART_MspInit+0x164>)
 8001420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001424:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001426:	4b31      	ldr	r3, [pc, #196]	; (80014ec <HAL_UART_MspInit+0x164>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_UART_MspInit+0x164>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <HAL_UART_MspInit+0x164>)
 8001434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001438:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <HAL_UART_MspInit+0x164>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_UART_MspInit+0x164>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001446:	4829      	ldr	r0, [pc, #164]	; (80014ec <HAL_UART_MspInit+0x164>)
 8001448:	f000 fe7a 	bl	8002140 <HAL_DMA_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001452:	f7ff ff07 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a24      	ldr	r2, [pc, #144]	; (80014ec <HAL_UART_MspInit+0x164>)
 800145a:	635a      	str	r2, [r3, #52]	; 0x34
 800145c:	4a23      	ldr	r2, [pc, #140]	; (80014ec <HAL_UART_MspInit+0x164>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2025      	movs	r0, #37	; 0x25
 8001468:	f000 fe24 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146c:	2025      	movs	r0, #37	; 0x25
 800146e:	f000 fe3d 	bl	80020ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001472:	e030      	b.n	80014d6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <HAL_UART_MspInit+0x16c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12b      	bne.n	80014d6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_UART_MspInit+0x15c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b6:	230c      	movs	r3, #12
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c6:	2307      	movs	r3, #7
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_UART_MspInit+0x160>)
 80014d2:	f001 f9c5 	bl	8002860 <HAL_GPIO_Init>
}
 80014d6:	bf00      	nop
 80014d8:	3730      	adds	r7, #48	; 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	2000010c 	.word	0x2000010c
 80014f0:	40026440 	.word	0x40026440
 80014f4:	40004400 	.word	0x40004400

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	2019      	movs	r0, #25
 800150e:	f000 fdd1 	bl	80020b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001512:	2019      	movs	r0, #25
 8001514:	f000 fdea 	bl	80020ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_InitTick+0xa0>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <HAL_InitTick+0xa0>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6453      	str	r3, [r2, #68]	; 0x44
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_InitTick+0xa0>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001534:	f107 0210 	add.w	r2, r7, #16
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f001 ff66 	bl	8003410 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001544:	f001 ff50 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8001548:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_InitTick+0xa4>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0c9b      	lsrs	r3, r3, #18
 8001554:	3b01      	subs	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_InitTick+0xa8>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <HAL_InitTick+0xac>)
 800155c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_InitTick+0xa8>)
 8001560:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001564:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_InitTick+0xa8>)
 8001568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_InitTick+0xa8>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_InitTick+0xa8>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <HAL_InitTick+0xa8>)
 800157a:	f001 ff7b 	bl	8003474 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d104      	bne.n	800158e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <HAL_InitTick+0xa8>)
 8001586:	f001 ffaa 	bl	80034de <HAL_TIM_Base_Start_IT>
 800158a:	4603      	mov	r3, r0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3730      	adds	r7, #48	; 0x30
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	431bde83 	.word	0x431bde83
 80015a0:	20000218 	.word	0x20000218
 80015a4:	40010000 	.word	0x40010000

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001606:	f001 ff8e 	bl	8003526 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000218 	.word	0x20000218

08001614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <USART1_IRQHandler+0x10>)
 800161a:	f002 faaf 	bl	8003b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000016c 	.word	0x2000016c

08001628 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA2_Stream2_IRQHandler+0x10>)
 800162e:	f000 feaf 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000010c 	.word	0x2000010c

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f003 f92e 	bl	80048cc <__errno>
 8001670:	4602      	mov	r2, r0
 8001672:	230c      	movs	r3, #12
 8001674:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20020000 	.word	0x20020000
 800169c:	00000400 	.word	0x00000400
 80016a0:	20000090 	.word	0x20000090
 80016a4:	20000260 	.word	0x20000260

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <SystemInit+0x28>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <SystemInit+0x28>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SystemInit+0x28>)
 80016be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c2:	609a      	str	r2, [r3, #8]
#endif
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800170c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016da:	e003      	b.n	80016e4 <LoopCopyDataInit>

080016dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016e2:	3104      	adds	r1, #4

080016e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016ec:	d3f6      	bcc.n	80016dc <CopyDataInit>
  ldr  r2, =_sbss
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016f0:	e002      	b.n	80016f8 <LoopFillZerobss>

080016f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016f4:	f842 3b04 	str.w	r3, [r2], #4

080016f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016fc:	d3f9      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fe:	f7ff ffd3 	bl	80016a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001702:	f003 f8e9 	bl	80048d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001706:	f7ff fb21 	bl	8000d4c <main>
  bx  lr    
 800170a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800170c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001710:	080051cc 	.word	0x080051cc
  ldr  r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001718:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800171c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001720:	20000260 	.word	0x20000260

08001724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC_IRQHandler>
	...

08001728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HAL_Init+0x40>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_Init+0x40>)
 800173e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_Init+0x40>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 fca4 	bl	800209e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fece 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fd86 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00

0800176c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008
 8001790:	20000258 	.word	0x20000258

08001794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000258 	.word	0x20000258

080017ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff ffee 	bl	8001794 <HAL_GetTick>
 80017b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d005      	beq.n	80017d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_Delay+0x40>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017d2:	bf00      	nop
 80017d4:	f7ff ffde 	bl	8001794 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8f7      	bhi.n	80017d4 <HAL_Delay+0x28>
  {
  }
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e033      	b.n	800186e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fd54 	bl	80012bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d118      	bne.n	8001860 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	f043 0202 	orr.w	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fa82 	bl	8001d4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
 800185e:	e001      	b.n	8001864 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_ADC_Start+0x1a>
 800188e:	2302      	movs	r3, #2
 8001890:	e08a      	b.n	80019a8 <HAL_ADC_Start+0x130>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d018      	beq.n	80018da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018b8:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <HAL_ADC_Start+0x13c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a3e      	ldr	r2, [pc, #248]	; (80019b8 <HAL_ADC_Start+0x140>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0c9a      	lsrs	r2, r3, #18
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f9      	bne.n	80018ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d15e      	bne.n	80019a6 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001912:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001926:	d106      	bne.n	8001936 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f023 0206 	bic.w	r2, r3, #6
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
 8001934:	e002      	b.n	800193c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_ADC_Start+0x144>)
 8001946:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001950:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d11c      	bne.n	80019a6 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e013      	b.n	80019a6 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_ADC_Start+0x148>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d10e      	bne.n	80019a6 <HAL_ADC_Start+0x12e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20000000 	.word	0x20000000
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	40012300 	.word	0x40012300
 80019c0:	40012000 	.word	0x40012000

080019c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e0:	d113      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f0:	d10b      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f043 0220 	orr.w	r2, r3, #32
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e05c      	b.n	8001ac4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a0a:	f7ff fec3 	bl	8001794 <HAL_GetTick>
 8001a0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a10:	e01a      	b.n	8001a48 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d016      	beq.n	8001a48 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_ADC_PollForConversion+0x6c>
 8001a20:	f7ff feb8 	bl	8001794 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d20b      	bcs.n	8001a48 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e03d      	b.n	8001ac4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d1dd      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f06f 0212 	mvn.w	r2, #18
 8001a5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d123      	bne.n	8001ac2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d11f      	bne.n	8001ac2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d111      	bne.n	8001ac2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d105      	bne.n	8001ac2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1c>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e113      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x244>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d925      	bls.n	8001b60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68d9      	ldr	r1, [r3, #12]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	3b1e      	subs	r3, #30
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43da      	mvns	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	400a      	ands	r2, r1
 8001b38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68d9      	ldr	r1, [r3, #12]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4403      	add	r3, r0
 8001b52:	3b1e      	subs	r3, #30
 8001b54:	409a      	lsls	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	e022      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6919      	ldr	r1, [r3, #16]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	2207      	movs	r2, #7
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	400a      	ands	r2, r1
 8001b82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4403      	add	r3, r0
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d824      	bhi.n	8001bf8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b05      	subs	r3, #5
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	400a      	ands	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b05      	subs	r3, #5
 8001bea:	fa00 f203 	lsl.w	r2, r0, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf6:	e04c      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d824      	bhi.n	8001c4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b23      	subs	r3, #35	; 0x23
 8001c12:	221f      	movs	r2, #31
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b23      	subs	r3, #35	; 0x23
 8001c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
 8001c48:	e023      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b41      	subs	r3, #65	; 0x41
 8001c5c:	221f      	movs	r2, #31
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	3b41      	subs	r3, #65	; 0x41
 8001c86:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_ADC_ConfigChannel+0x250>)
 8001c94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <HAL_ADC_ConfigChannel+0x254>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d10f      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d8>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b12      	cmp	r3, #18
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <HAL_ADC_ConfigChannel+0x254>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d12b      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x23a>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_ADC_ConfigChannel+0x258>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d003      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x1f4>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b11      	cmp	r3, #17
 8001cda:	d122      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <HAL_ADC_ConfigChannel+0x258>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d111      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_ADC_ConfigChannel+0x25c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_ADC_ConfigChannel+0x260>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0c9a      	lsrs	r2, r3, #18
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40012300 	.word	0x40012300
 8001d3c:	40012000 	.word	0x40012000
 8001d40:	10000012 	.word	0x10000012
 8001d44:	20000000 	.word	0x20000000
 8001d48:	431bde83 	.word	0x431bde83

08001d4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d54:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <ADC_Init+0x1f0>)
 8001d56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	021a      	lsls	r2, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6899      	ldr	r1, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <ADC_Init+0x1f4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d022      	beq.n	8001e2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6899      	ldr	r1, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6899      	ldr	r1, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	e00f      	b.n	8001e4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0202 	bic.w	r2, r2, #2
 8001e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6899      	ldr	r1, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	005a      	lsls	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01b      	beq.n	8001eb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6859      	ldr	r1, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	035a      	lsls	r2, r3, #13
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	e007      	b.n	8001ec0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	051a      	lsls	r2, r3, #20
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6899      	ldr	r1, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f02:	025a      	lsls	r2, r3, #9
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	029a      	lsls	r2, r3, #10
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40012300 	.word	0x40012300
 8001f40:	0f000001 	.word	0x0f000001

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ff4c 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c6:	f7ff ff61 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 80020ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	6978      	ldr	r0, [r7, #20]
 80020d2:	f7ff ffb1 	bl	8002038 <NVIC_EncodePriority>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff80 	bl	8001fe4 <__NVIC_SetPriority>
}
 80020e4:	bf00      	nop
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff54 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	795b      	ldrb	r3, [r3, #5]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff f90a 	bl	8001344 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff fb22 	bl	8001794 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e099      	b.n	8002290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	e00f      	b.n	800219e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217e:	f7ff fb09 	bl	8001794 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b05      	cmp	r3, #5
 800218a:	d908      	bls.n	800219e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e078      	b.n	8002290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e8      	bne.n	800217e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_DMA_Init+0x158>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d107      	bne.n	8002208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4313      	orrs	r3, r2
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0307 	bic.w	r3, r3, #7
 800221e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2b04      	cmp	r3, #4
 8002230:	d117      	bne.n	8002262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fa91 	bl	800276c <DMA_CheckFifoParam>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800225e:	2301      	movs	r3, #1
 8002260:	e016      	b.n	8002290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa48 	bl	8002700 <DMA_CalcBaseAndBitshift>
 8002270:	4603      	mov	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	223f      	movs	r2, #63	; 0x3f
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	f010803f 	.word	0xf010803f

0800229c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_DMA_Start_IT+0x26>
 80022be:	2302      	movs	r3, #2
 80022c0:	e040      	b.n	8002344 <HAL_DMA_Start_IT+0xa8>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d12f      	bne.n	8002336 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f9da 	bl	80026a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	223f      	movs	r2, #63	; 0x3f
 80022f6:	409a      	lsls	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0216 	orr.w	r2, r2, #22
 800230a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e005      	b.n	8002342 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d004      	beq.n	800236a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e00c      	b.n	8002384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2205      	movs	r2, #5
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_DMA_IRQHandler+0x258>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a92      	ldr	r2, [pc, #584]	; (80025ec <HAL_DMA_IRQHandler+0x25c>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a9b      	lsrs	r3, r3, #10
 80023a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	2208      	movs	r2, #8
 80023bc:	409a      	lsls	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01a      	beq.n	80023fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0204 	bic.w	r2, r2, #4
 80023e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	2208      	movs	r2, #8
 80023ea:	409a      	lsls	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	2201      	movs	r2, #1
 8002420:	409a      	lsls	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0202 	orr.w	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	2204      	movs	r2, #4
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2204      	movs	r2, #4
 8002456:	409a      	lsls	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2210      	movs	r2, #16
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d043      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d03c      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	2210      	movs	r2, #16
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d024      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
 80024be:	e01f      	b.n	8002500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
 80024d0:	e016      	b.n	8002500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0208 	bic.w	r2, r2, #8
 80024ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2220      	movs	r2, #32
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 808e 	beq.w	800262e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8086 	beq.w	800262e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2220      	movs	r2, #32
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b05      	cmp	r3, #5
 8002538:	d136      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0216 	bic.w	r2, r2, #22
 8002548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <HAL_DMA_IRQHandler+0x1da>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0208 	bic.w	r2, r2, #8
 8002578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	223f      	movs	r2, #63	; 0x3f
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	2b00      	cmp	r3, #0
 800259c:	d07d      	beq.n	800269a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
        }
        return;
 80025a6:	e078      	b.n	800269a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01c      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d030      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e02b      	b.n	800262e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d027      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
 80025e6:	e022      	b.n	800262e <HAL_DMA_IRQHandler+0x29e>
 80025e8:	20000000 	.word	0x20000000
 80025ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0210 	bic.w	r2, r2, #16
 800260c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	2b00      	cmp	r3, #0
 8002634:	d032      	beq.n	800269c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d022      	beq.n	8002688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3301      	adds	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	429a      	cmp	r2, r3
 8002664:	d307      	bcc.n	8002676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f2      	bne.n	800265a <HAL_DMA_IRQHandler+0x2ca>
 8002674:	e000      	b.n	8002678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002676:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e000      	b.n	800269c <HAL_DMA_IRQHandler+0x30c>
        return;
 800269a:	bf00      	nop
    }
  }
}
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d108      	bne.n	80026e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026e2:	e007      	b.n	80026f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3b10      	subs	r3, #16
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <DMA_CalcBaseAndBitshift+0x64>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <DMA_CalcBaseAndBitshift+0x68>)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d909      	bls.n	8002742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	1d1a      	adds	r2, r3, #4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	659a      	str	r2, [r3, #88]	; 0x58
 8002740:	e007      	b.n	8002752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	aaaaaaab 	.word	0xaaaaaaab
 8002768:	08005180 	.word	0x08005180

0800276c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11f      	bne.n	80027c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d855      	bhi.n	8002838 <DMA_CheckFifoParam+0xcc>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <DMA_CheckFifoParam+0x28>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027b7 	.word	0x080027b7
 800279c:	080027a5 	.word	0x080027a5
 80027a0:	08002839 	.word	0x08002839
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d045      	beq.n	800283c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b4:	e042      	b.n	800283c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027be:	d13f      	bne.n	8002840 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e03c      	b.n	8002840 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ce:	d121      	bne.n	8002814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d836      	bhi.n	8002844 <DMA_CheckFifoParam+0xd8>
 80027d6:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <DMA_CheckFifoParam+0x70>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	080027f3 	.word	0x080027f3
 80027e4:	080027ed 	.word	0x080027ed
 80027e8:	08002805 	.word	0x08002805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e02f      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d024      	beq.n	8002848 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002802:	e021      	b.n	8002848 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800280c:	d11e      	bne.n	800284c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002812:	e01b      	b.n	800284c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <DMA_CheckFifoParam+0xb4>
 800281a:	2b03      	cmp	r3, #3
 800281c:	d003      	beq.n	8002826 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800281e:	e018      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e015      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00e      	beq.n	8002850 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
      break;
 8002836:	e00b      	b.n	8002850 <DMA_CheckFifoParam+0xe4>
      break;
 8002838:	bf00      	nop
 800283a:	e00a      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 800283c:	bf00      	nop
 800283e:	e008      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 8002840:	bf00      	nop
 8002842:	e006      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 8002844:	bf00      	nop
 8002846:	e004      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 8002848:	bf00      	nop
 800284a:	e002      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;   
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 8002850:	bf00      	nop
    }
  } 
  
  return status; 
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e159      	b.n	8002b30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8148 	bne.w	8002b2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d00b      	beq.n	80028ba <HAL_GPIO_Init+0x5a>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ae:	2b11      	cmp	r3, #17
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d130      	bne.n	800291c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 0201 	and.w	r2, r3, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0xfc>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b12      	cmp	r3, #18
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a2 	beq.w	8002b2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b56      	ldr	r3, [pc, #344]	; (8002b44 <HAL_GPIO_Init+0x2e4>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a55      	ldr	r2, [pc, #340]	; (8002b44 <HAL_GPIO_Init+0x2e4>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_GPIO_Init+0x2e4>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a51      	ldr	r2, [pc, #324]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a48      	ldr	r2, [pc, #288]	; (8002b4c <HAL_GPIO_Init+0x2ec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x202>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <HAL_GPIO_Init+0x2f0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x1fe>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a46      	ldr	r2, [pc, #280]	; (8002b54 <HAL_GPIO_Init+0x2f4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x1fa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a45      	ldr	r2, [pc, #276]	; (8002b58 <HAL_GPIO_Init+0x2f8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x1f6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a44      	ldr	r2, [pc, #272]	; (8002b5c <HAL_GPIO_Init+0x2fc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x1f2>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a74:	4934      	ldr	r1, [pc, #208]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa6:	4a2e      	ldr	r2, [pc, #184]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aac:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad0:	4a23      	ldr	r2, [pc, #140]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afa:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f aea2 	bls.w	800287c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3724      	adds	r7, #36	; 0x24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020c00 	.word	0x40020c00
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e25b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d075      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb6:	4ba3      	ldr	r3, [pc, #652]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d00c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4ba0      	ldr	r3, [pc, #640]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d112      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4b9d      	ldr	r3, [pc, #628]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	4b99      	ldr	r3, [pc, #612]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05b      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x108>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d157      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e236      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x74>
 8002bfe:	4b91      	ldr	r3, [pc, #580]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a90      	ldr	r2, [pc, #576]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xb0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b8b      	ldr	r3, [pc, #556]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a8a      	ldr	r2, [pc, #552]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a87      	ldr	r2, [pc, #540]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xb0>
 8002c30:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a83      	ldr	r2, [pc, #524]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b81      	ldr	r3, [pc, #516]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a80      	ldr	r2, [pc, #512]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fda0 	bl	8001794 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fd9c 	bl	8001794 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1fb      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xc0>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fd8c 	bl	8001794 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fd88 	bl	8001794 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1e7      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0xe8>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cae:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x152>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1bb      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4952      	ldr	r1, [pc, #328]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCC_OscConfig+0x2b0>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fd41 	bl	8001794 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe fd3d 	bl	8001794 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e19c      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4940      	ldr	r1, [pc, #256]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <HAL_RCC_OscConfig+0x2b0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fd20 	bl	8001794 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fe fd1c 	bl	8001794 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e17b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d030      	beq.n	8002de4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x2b4>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe fd00 	bl	8001794 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe fcfc 	bl	8001794 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e15b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x200>
 8002db6:	e015      	b.n	8002de4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <HAL_RCC_OscConfig+0x2b4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fce9 	bl	8001794 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7fe fce5 	bl	8001794 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e144      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80a0 	beq.w	8002f32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d121      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fcab 	bl	8001794 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	e011      	b.n	8002e66 <HAL_RCC_OscConfig+0x2ce>
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470000 	.word	0x42470000
 8002e4c:	42470e80 	.word	0x42470e80
 8002e50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fe fc9e 	bl	8001794 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0fd      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x4d4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	e01c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x32a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x312>
 8002e90:	4b77      	ldr	r3, [pc, #476]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a76      	ldr	r2, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	4b74      	ldr	r3, [pc, #464]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a73      	ldr	r2, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x32a>
 8002eaa:	4b71      	ldr	r3, [pc, #452]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a70      	ldr	r2, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	4b6e      	ldr	r3, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a6d      	ldr	r2, [pc, #436]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe fc63 	bl	8001794 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe fc5f 	bl	8001794 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0bc      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ee      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x33a>
 8002ef4:	e014      	b.n	8002f20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fc4d 	bl	8001794 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe fc49 	bl	8001794 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0a6      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ee      	bne.n	8002efe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b52      	ldr	r3, [pc, #328]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a51      	ldr	r2, [pc, #324]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8092 	beq.w	8003060 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3c:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d05c      	beq.n	8003002 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d141      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe fc1d 	bl	8001794 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe fc19 	bl	8001794 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e078      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	019b      	lsls	r3, r3, #6
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	4933      	ldr	r1, [pc, #204]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fbf2 	bl	8001794 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fbee 	bl	8001794 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04d      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
 8002fd2:	e045      	b.n	8003060 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fe fbdb 	bl	8001794 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe fbd7 	bl	8001794 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e036      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x44a>
 8003000:	e02e      	b.n	8003060 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e029      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	429a      	cmp	r2, r3
 8003020:	d11c      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d115      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003036:	4013      	ands	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d10d      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40007000 	.word	0x40007000
 8003070:	40023800 	.word	0x40023800
 8003074:	42470060 	.word	0x42470060

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0cc      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d90c      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b65      	ldr	r3, [pc, #404]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b8      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	494d      	ldr	r1, [pc, #308]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d044      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d119      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	2b03      	cmp	r3, #3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e067      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b37      	ldr	r3, [pc, #220]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4934      	ldr	r1, [pc, #208]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7fe fb14 	bl	8001794 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe fb10 	bl	8001794 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d20c      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e032      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4916      	ldr	r1, [pc, #88]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fe:	f000 f821 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003202:	4601      	mov	r1, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	5cd3      	ldrb	r3, [r2, r3]
 8003212:	fa21 f303 	lsr.w	r3, r1, r3
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe f96a 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00
 8003234:	40023800 	.word	0x40023800
 8003238:	08005168 	.word	0x08005168
 800323c:	20000000 	.word	0x20000000
 8003240:	20000004 	.word	0x20000004

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325a:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b04      	cmp	r3, #4
 8003264:	d007      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0x32>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d008      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x38>
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 808d 	bne.w	800338a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003272:	60bb      	str	r3, [r7, #8]
       break;
 8003274:	e08c      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003276:	4b4b      	ldr	r3, [pc, #300]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003278:	60bb      	str	r3, [r7, #8]
      break;
 800327a:	e089      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003286:	4b45      	ldr	r3, [pc, #276]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d023      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	f04f 0400 	mov.w	r4, #0
 800329c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	ea03 0501 	and.w	r5, r3, r1
 80032a8:	ea04 0602 	and.w	r6, r4, r2
 80032ac:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ae:	fb02 f106 	mul.w	r1, r2, r6
 80032b2:	2200      	movs	r2, #0
 80032b4:	fb02 f205 	mul.w	r2, r2, r5
 80032b8:	440a      	add	r2, r1
 80032ba:	493a      	ldr	r1, [pc, #232]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032bc:	fba5 0101 	umull	r0, r1, r5, r1
 80032c0:	1853      	adds	r3, r2, r1
 80032c2:	4619      	mov	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	461a      	mov	r2, r3
 80032cc:	4623      	mov	r3, r4
 80032ce:	f7fc ffdf 	bl	8000290 <__aeabi_uldivmod>
 80032d2:	4603      	mov	r3, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e049      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	f04f 0400 	mov.w	r4, #0
 80032e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	ea03 0501 	and.w	r5, r3, r1
 80032f0:	ea04 0602 	and.w	r6, r4, r2
 80032f4:	4629      	mov	r1, r5
 80032f6:	4632      	mov	r2, r6
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f04f 0400 	mov.w	r4, #0
 8003300:	0154      	lsls	r4, r2, #5
 8003302:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003306:	014b      	lsls	r3, r1, #5
 8003308:	4619      	mov	r1, r3
 800330a:	4622      	mov	r2, r4
 800330c:	1b49      	subs	r1, r1, r5
 800330e:	eb62 0206 	sbc.w	r2, r2, r6
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f04f 0400 	mov.w	r4, #0
 800331a:	0194      	lsls	r4, r2, #6
 800331c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003320:	018b      	lsls	r3, r1, #6
 8003322:	1a5b      	subs	r3, r3, r1
 8003324:	eb64 0402 	sbc.w	r4, r4, r2
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	00e2      	lsls	r2, r4, #3
 8003332:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003336:	00d9      	lsls	r1, r3, #3
 8003338:	460b      	mov	r3, r1
 800333a:	4614      	mov	r4, r2
 800333c:	195b      	adds	r3, r3, r5
 800333e:	eb44 0406 	adc.w	r4, r4, r6
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	02a2      	lsls	r2, r4, #10
 800334c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003350:	0299      	lsls	r1, r3, #10
 8003352:	460b      	mov	r3, r1
 8003354:	4614      	mov	r4, r2
 8003356:	4618      	mov	r0, r3
 8003358:	4621      	mov	r1, r4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f04f 0400 	mov.w	r4, #0
 8003360:	461a      	mov	r2, r3
 8003362:	4623      	mov	r3, r4
 8003364:	f7fc ff94 	bl	8000290 <__aeabi_uldivmod>
 8003368:	4603      	mov	r3, r0
 800336a:	460c      	mov	r4, r1
 800336c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0c1b      	lsrs	r3, r3, #16
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	3301      	adds	r3, #1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	60bb      	str	r3, [r7, #8]
      break;
 8003388:	e002      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800338c:	60bb      	str	r3, [r7, #8]
      break;
 800338e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003390:	68bb      	ldr	r3, [r7, #8]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	017d7840 	.word	0x017d7840

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4601      	mov	r1, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08005178 	.word	0x08005178

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffdc 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033f0:	4601      	mov	r1, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4a03      	ldr	r2, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	08005178 	.word	0x08005178

08003410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	220f      	movs	r2, #15
 800341e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_RCC_GetClockConfig+0x60>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40023c00 	.word	0x40023c00

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e01d      	b.n	80034c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f815 	bl	80034ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 f968 	bl	8003788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b06      	cmp	r3, #6
 8003506:	d007      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b02      	cmp	r3, #2
 800353a:	d122      	bne.n	8003582 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d11b      	bne.n	8003582 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f06f 0202 	mvn.w	r2, #2
 8003552:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8ee 	bl	800374a <HAL_TIM_IC_CaptureCallback>
 800356e:	e005      	b.n	800357c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8e0 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8f1 	bl	800375e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b04      	cmp	r3, #4
 800358e:	d122      	bne.n	80035d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d11b      	bne.n	80035d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f06f 0204 	mvn.w	r2, #4
 80035a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8c4 	bl	800374a <HAL_TIM_IC_CaptureCallback>
 80035c2:	e005      	b.n	80035d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8b6 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8c7 	bl	800375e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d122      	bne.n	800362a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d11b      	bne.n	800362a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f06f 0208 	mvn.w	r2, #8
 80035fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2204      	movs	r2, #4
 8003600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f89a 	bl	800374a <HAL_TIM_IC_CaptureCallback>
 8003616:	e005      	b.n	8003624 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f88c 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f89d 	bl	800375e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b10      	cmp	r3, #16
 8003636:	d122      	bne.n	800367e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b10      	cmp	r3, #16
 8003644:	d11b      	bne.n	800367e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f06f 0210 	mvn.w	r2, #16
 800364e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2208      	movs	r2, #8
 8003654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f870 	bl	800374a <HAL_TIM_IC_CaptureCallback>
 800366a:	e005      	b.n	8003678 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f862 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f873 	bl	800375e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10e      	bne.n	80036aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f06f 0201 	mvn.w	r2, #1
 80036a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fd fdcb 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d10e      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d107      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8e3 	bl	800389c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d10e      	bne.n	8003702 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d107      	bne.n	8003702 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f838 	bl	8003772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d10e      	bne.n	800372e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b20      	cmp	r3, #32
 800371c:	d107      	bne.n	800372e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0220 	mvn.w	r2, #32
 8003726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f8ad 	bl	8003888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a34      	ldr	r2, [pc, #208]	; (800386c <TIM_Base_SetConfig+0xe4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00f      	beq.n	80037c0 <TIM_Base_SetConfig+0x38>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0x38>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a31      	ldr	r2, [pc, #196]	; (8003870 <TIM_Base_SetConfig+0xe8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0x38>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a30      	ldr	r2, [pc, #192]	; (8003874 <TIM_Base_SetConfig+0xec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x38>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <TIM_Base_SetConfig+0xf0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a25      	ldr	r2, [pc, #148]	; (800386c <TIM_Base_SetConfig+0xe4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01b      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d017      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <TIM_Base_SetConfig+0xe8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <TIM_Base_SetConfig+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00f      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <TIM_Base_SetConfig+0xf0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00b      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <TIM_Base_SetConfig+0xf4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <TIM_Base_SetConfig+0xf8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <TIM_Base_SetConfig+0xfc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <TIM_Base_SetConfig+0xe4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d103      	bne.n	8003858 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	615a      	str	r2, [r3, #20]
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800

08003888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e03f      	b.n	8003942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fd56 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fc6d 	bl	80041d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	af02      	add	r7, sp, #8
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	f040 8083 	bne.w	8003a72 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Transmit+0x2e>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e07b      	b.n	8003a74 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_UART_Transmit+0x40>
 8003986:	2302      	movs	r3, #2
 8003988:	e074      	b.n	8003a74 <HAL_UART_Transmit+0x12a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2221      	movs	r2, #33	; 0x21
 800399c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039a0:	f7fd fef8 	bl	8001794 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039ba:	e042      	b.n	8003a42 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d122      	bne.n	8003a1a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fa76 	bl	8003ed0 <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e042      	b.n	8003a74 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a00:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	e017      	b.n	8003a42 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	e013      	b.n	8003a42 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2180      	movs	r1, #128	; 0x80
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fa53 	bl	8003ed0 <UART_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e01f      	b.n	8003a74 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	60ba      	str	r2, [r7, #8]
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1b7      	bne.n	80039bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2200      	movs	r2, #0
 8003a54:	2140      	movs	r1, #64	; 0x40
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa3a 	bl	8003ed0 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e006      	b.n	8003a74 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d166      	bne.n	8003b64 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_UART_Receive_DMA+0x26>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e05f      	b.n	8003b66 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Receive_DMA+0x38>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e058      	b.n	8003b66 <HAL_UART_Receive_DMA+0xea>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	88fa      	ldrh	r2, [r7, #6]
 8003ac6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2222      	movs	r2, #34	; 0x22
 8003ad2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <HAL_UART_Receive_DMA+0xf4>)
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <HAL_UART_Receive_DMA+0xf8>)
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	4a23      	ldr	r2, [pc, #140]	; (8003b78 <HAL_UART_Receive_DMA+0xfc>)
 8003aec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	2200      	movs	r2, #0
 8003af4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	f7fe fbc5 	bl	800229c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	08003db9 	.word	0x08003db9
 8003b74:	08003e21 	.word	0x08003e21
 8003b78:	08003e3d 	.word	0x08003e3d

08003b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_UART_IRQHandler+0x52>
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa82 	bl	80040d0 <UART_Receive_IT>
      return;
 8003bcc:	e0d1      	b.n	8003d72 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80b0 	beq.w	8003d36 <HAL_UART_IRQHandler+0x1ba>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <HAL_UART_IRQHandler+0x70>
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a5 	beq.w	8003d36 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_UART_IRQHandler+0x90>
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_UART_IRQHandler+0xb0>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	f043 0202 	orr.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_UART_IRQHandler+0xd0>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	f043 0204 	orr.w	r2, r3, #4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <HAL_UART_IRQHandler+0xfa>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <HAL_UART_IRQHandler+0xee>
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	f043 0208 	orr.w	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d078      	beq.n	8003d70 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <HAL_UART_IRQHandler+0x11c>
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa1c 	bl	80040d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x144>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d031      	beq.n	8003d24 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f965 	bl	8003f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d123      	bne.n	8003d1c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_UART_IRQHandler+0x1fc>)
 8003cf2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fb27 	bl	800234c <HAL_DMA_Abort_IT>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d12:	e00e      	b.n	8003d32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f845 	bl	8003da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1a:	e00a      	b.n	8003d32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f841 	bl	8003da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d22:	e006      	b.n	8003d32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f83d 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d30:	e01e      	b.n	8003d70 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d32:	bf00      	nop
    return;
 8003d34:	e01c      	b.n	8003d70 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1d6>
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f952 	bl	8003ff4 <UART_Transmit_IT>
    return;
 8003d50:	e00f      	b.n	8003d72 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_UART_IRQHandler+0x1f6>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f99a 	bl	80040a0 <UART_EndTransmit_IT>
    return;
 8003d6c:	bf00      	nop
 8003d6e:	e000      	b.n	8003d72 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003d70:	bf00      	nop
  }
}
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	08003fcd 	.word	0x08003fcd

08003d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11e      	bne.n	8003e12 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0201 	bic.w	r2, r2, #1
 8003df8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e08:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7fd f9b2 	bl	800117c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff ffae 	bl	8003d90 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b21      	cmp	r3, #33	; 0x21
 8003e6e:	d108      	bne.n	8003e82 <UART_DMAError+0x46>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f000 f871 	bl	8003f64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b22      	cmp	r3, #34	; 0x22
 8003ea2:	d108      	bne.n	8003eb6 <UART_DMAError+0x7a>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2200      	movs	r2, #0
 8003eae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003eb0:	68b8      	ldr	r0, [r7, #8]
 8003eb2:	f000 f86d 	bl	8003f90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec2:	68b8      	ldr	r0, [r7, #8]
 8003ec4:	f7ff ff6e 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee0:	e02c      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d028      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef0:	f7fd fc50 	bl	8001794 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d21d      	bcs.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e00f      	b.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d0c3      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f7a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff fedc 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b21      	cmp	r3, #33	; 0x21
 8004006:	d144      	bne.n	8004092 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d11a      	bne.n	8004048 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004026:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]
 800403a:	e00e      	b.n	800405a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]
 8004046:	e008      	b.n	800405a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	1c59      	adds	r1, r3, #1
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6211      	str	r1, [r2, #32]
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29b      	uxth	r3, r3
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4619      	mov	r1, r3
 8004068:	84d1      	strh	r1, [r2, #38]	; 0x26
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10f      	bne.n	800408e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800407c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fe5b 	bl	8003d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b22      	cmp	r3, #34	; 0x22
 80040e2:	d171      	bne.n	80041c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d123      	bne.n	8004136 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10e      	bne.n	800411a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	1c9a      	adds	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
 8004118:	e029      	b.n	800416e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	b29b      	uxth	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28
 8004134:	e01b      	b.n	800416e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6858      	ldr	r0, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	1c59      	adds	r1, r3, #1
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6291      	str	r1, [r2, #40]	; 0x28
 800414e:	b2c2      	uxtb	r2, r0
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e00c      	b.n	800416e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	1c58      	adds	r0, r3, #1
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	6288      	str	r0, [r1, #40]	; 0x28
 8004166:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29b      	uxth	r3, r3
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4619      	mov	r1, r3
 800417c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800417e:	2b00      	cmp	r3, #0
 8004180:	d120      	bne.n	80041c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0220 	bic.w	r2, r2, #32
 8004190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fc ffde 	bl	800117c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e002      	b.n	80041ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e000      	b.n	80041ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004216:	f023 030c 	bic.w	r3, r3, #12
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	430b      	orrs	r3, r1
 8004222:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004242:	f040 818b 	bne.w	800455c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4ac1      	ldr	r2, [pc, #772]	; (8004550 <UART_SetConfig+0x37c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d005      	beq.n	800425c <UART_SetConfig+0x88>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4abf      	ldr	r2, [pc, #764]	; (8004554 <UART_SetConfig+0x380>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f040 80bd 	bne.w	80043d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7ff f8c4 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8004260:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	461d      	mov	r5, r3
 8004266:	f04f 0600 	mov.w	r6, #0
 800426a:	46a8      	mov	r8, r5
 800426c:	46b1      	mov	r9, r6
 800426e:	eb18 0308 	adds.w	r3, r8, r8
 8004272:	eb49 0409 	adc.w	r4, r9, r9
 8004276:	4698      	mov	r8, r3
 8004278:	46a1      	mov	r9, r4
 800427a:	eb18 0805 	adds.w	r8, r8, r5
 800427e:	eb49 0906 	adc.w	r9, r9, r6
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800428e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004292:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004296:	4688      	mov	r8, r1
 8004298:	4691      	mov	r9, r2
 800429a:	eb18 0005 	adds.w	r0, r8, r5
 800429e:	eb49 0106 	adc.w	r1, r9, r6
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	461d      	mov	r5, r3
 80042a8:	f04f 0600 	mov.w	r6, #0
 80042ac:	196b      	adds	r3, r5, r5
 80042ae:	eb46 0406 	adc.w	r4, r6, r6
 80042b2:	461a      	mov	r2, r3
 80042b4:	4623      	mov	r3, r4
 80042b6:	f7fb ffeb 	bl	8000290 <__aeabi_uldivmod>
 80042ba:	4603      	mov	r3, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	461a      	mov	r2, r3
 80042c0:	4ba5      	ldr	r3, [pc, #660]	; (8004558 <UART_SetConfig+0x384>)
 80042c2:	fba3 2302 	umull	r2, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	461d      	mov	r5, r3
 80042d0:	f04f 0600 	mov.w	r6, #0
 80042d4:	46a9      	mov	r9, r5
 80042d6:	46b2      	mov	sl, r6
 80042d8:	eb19 0309 	adds.w	r3, r9, r9
 80042dc:	eb4a 040a 	adc.w	r4, sl, sl
 80042e0:	4699      	mov	r9, r3
 80042e2:	46a2      	mov	sl, r4
 80042e4:	eb19 0905 	adds.w	r9, r9, r5
 80042e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004300:	4689      	mov	r9, r1
 8004302:	4692      	mov	sl, r2
 8004304:	eb19 0005 	adds.w	r0, r9, r5
 8004308:	eb4a 0106 	adc.w	r1, sl, r6
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	461d      	mov	r5, r3
 8004312:	f04f 0600 	mov.w	r6, #0
 8004316:	196b      	adds	r3, r5, r5
 8004318:	eb46 0406 	adc.w	r4, r6, r6
 800431c:	461a      	mov	r2, r3
 800431e:	4623      	mov	r3, r4
 8004320:	f7fb ffb6 	bl	8000290 <__aeabi_uldivmod>
 8004324:	4603      	mov	r3, r0
 8004326:	460c      	mov	r4, r1
 8004328:	461a      	mov	r2, r3
 800432a:	4b8b      	ldr	r3, [pc, #556]	; (8004558 <UART_SetConfig+0x384>)
 800432c:	fba3 1302 	umull	r1, r3, r3, r2
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	2164      	movs	r1, #100	; 0x64
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	3332      	adds	r3, #50	; 0x32
 800433e:	4a86      	ldr	r2, [pc, #536]	; (8004558 <UART_SetConfig+0x384>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800434c:	4498      	add	r8, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	461d      	mov	r5, r3
 8004352:	f04f 0600 	mov.w	r6, #0
 8004356:	46a9      	mov	r9, r5
 8004358:	46b2      	mov	sl, r6
 800435a:	eb19 0309 	adds.w	r3, r9, r9
 800435e:	eb4a 040a 	adc.w	r4, sl, sl
 8004362:	4699      	mov	r9, r3
 8004364:	46a2      	mov	sl, r4
 8004366:	eb19 0905 	adds.w	r9, r9, r5
 800436a:	eb4a 0a06 	adc.w	sl, sl, r6
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800437a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800437e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004382:	4689      	mov	r9, r1
 8004384:	4692      	mov	sl, r2
 8004386:	eb19 0005 	adds.w	r0, r9, r5
 800438a:	eb4a 0106 	adc.w	r1, sl, r6
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	461d      	mov	r5, r3
 8004394:	f04f 0600 	mov.w	r6, #0
 8004398:	196b      	adds	r3, r5, r5
 800439a:	eb46 0406 	adc.w	r4, r6, r6
 800439e:	461a      	mov	r2, r3
 80043a0:	4623      	mov	r3, r4
 80043a2:	f7fb ff75 	bl	8000290 <__aeabi_uldivmod>
 80043a6:	4603      	mov	r3, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	461a      	mov	r2, r3
 80043ac:	4b6a      	ldr	r3, [pc, #424]	; (8004558 <UART_SetConfig+0x384>)
 80043ae:	fba3 1302 	umull	r1, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2164      	movs	r1, #100	; 0x64
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	3332      	adds	r3, #50	; 0x32
 80043c0:	4a65      	ldr	r2, [pc, #404]	; (8004558 <UART_SetConfig+0x384>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	f003 0207 	and.w	r2, r3, #7
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4442      	add	r2, r8
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	e26f      	b.n	80048b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043d6:	f7fe fff3 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80043da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	461d      	mov	r5, r3
 80043e0:	f04f 0600 	mov.w	r6, #0
 80043e4:	46a8      	mov	r8, r5
 80043e6:	46b1      	mov	r9, r6
 80043e8:	eb18 0308 	adds.w	r3, r8, r8
 80043ec:	eb49 0409 	adc.w	r4, r9, r9
 80043f0:	4698      	mov	r8, r3
 80043f2:	46a1      	mov	r9, r4
 80043f4:	eb18 0805 	adds.w	r8, r8, r5
 80043f8:	eb49 0906 	adc.w	r9, r9, r6
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004408:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800440c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004410:	4688      	mov	r8, r1
 8004412:	4691      	mov	r9, r2
 8004414:	eb18 0005 	adds.w	r0, r8, r5
 8004418:	eb49 0106 	adc.w	r1, r9, r6
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	461d      	mov	r5, r3
 8004422:	f04f 0600 	mov.w	r6, #0
 8004426:	196b      	adds	r3, r5, r5
 8004428:	eb46 0406 	adc.w	r4, r6, r6
 800442c:	461a      	mov	r2, r3
 800442e:	4623      	mov	r3, r4
 8004430:	f7fb ff2e 	bl	8000290 <__aeabi_uldivmod>
 8004434:	4603      	mov	r3, r0
 8004436:	460c      	mov	r4, r1
 8004438:	461a      	mov	r2, r3
 800443a:	4b47      	ldr	r3, [pc, #284]	; (8004558 <UART_SetConfig+0x384>)
 800443c:	fba3 2302 	umull	r2, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	461d      	mov	r5, r3
 800444a:	f04f 0600 	mov.w	r6, #0
 800444e:	46a9      	mov	r9, r5
 8004450:	46b2      	mov	sl, r6
 8004452:	eb19 0309 	adds.w	r3, r9, r9
 8004456:	eb4a 040a 	adc.w	r4, sl, sl
 800445a:	4699      	mov	r9, r3
 800445c:	46a2      	mov	sl, r4
 800445e:	eb19 0905 	adds.w	r9, r9, r5
 8004462:	eb4a 0a06 	adc.w	sl, sl, r6
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800447a:	4689      	mov	r9, r1
 800447c:	4692      	mov	sl, r2
 800447e:	eb19 0005 	adds.w	r0, r9, r5
 8004482:	eb4a 0106 	adc.w	r1, sl, r6
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	461d      	mov	r5, r3
 800448c:	f04f 0600 	mov.w	r6, #0
 8004490:	196b      	adds	r3, r5, r5
 8004492:	eb46 0406 	adc.w	r4, r6, r6
 8004496:	461a      	mov	r2, r3
 8004498:	4623      	mov	r3, r4
 800449a:	f7fb fef9 	bl	8000290 <__aeabi_uldivmod>
 800449e:	4603      	mov	r3, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <UART_SetConfig+0x384>)
 80044a6:	fba3 1302 	umull	r1, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2164      	movs	r1, #100	; 0x64
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	3332      	adds	r3, #50	; 0x32
 80044b8:	4a27      	ldr	r2, [pc, #156]	; (8004558 <UART_SetConfig+0x384>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044c6:	4498      	add	r8, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	461d      	mov	r5, r3
 80044cc:	f04f 0600 	mov.w	r6, #0
 80044d0:	46a9      	mov	r9, r5
 80044d2:	46b2      	mov	sl, r6
 80044d4:	eb19 0309 	adds.w	r3, r9, r9
 80044d8:	eb4a 040a 	adc.w	r4, sl, sl
 80044dc:	4699      	mov	r9, r3
 80044de:	46a2      	mov	sl, r4
 80044e0:	eb19 0905 	adds.w	r9, r9, r5
 80044e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044fc:	4689      	mov	r9, r1
 80044fe:	4692      	mov	sl, r2
 8004500:	eb19 0005 	adds.w	r0, r9, r5
 8004504:	eb4a 0106 	adc.w	r1, sl, r6
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	461d      	mov	r5, r3
 800450e:	f04f 0600 	mov.w	r6, #0
 8004512:	196b      	adds	r3, r5, r5
 8004514:	eb46 0406 	adc.w	r4, r6, r6
 8004518:	461a      	mov	r2, r3
 800451a:	4623      	mov	r3, r4
 800451c:	f7fb feb8 	bl	8000290 <__aeabi_uldivmod>
 8004520:	4603      	mov	r3, r0
 8004522:	460c      	mov	r4, r1
 8004524:	461a      	mov	r2, r3
 8004526:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <UART_SetConfig+0x384>)
 8004528:	fba3 1302 	umull	r1, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	2164      	movs	r1, #100	; 0x64
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	3332      	adds	r3, #50	; 0x32
 800453a:	4a07      	ldr	r2, [pc, #28]	; (8004558 <UART_SetConfig+0x384>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	f003 0207 	and.w	r2, r3, #7
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4442      	add	r2, r8
 800454c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800454e:	e1b2      	b.n	80048b6 <UART_SetConfig+0x6e2>
 8004550:	40011000 	.word	0x40011000
 8004554:	40011400 	.word	0x40011400
 8004558:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4ad7      	ldr	r2, [pc, #860]	; (80048c0 <UART_SetConfig+0x6ec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d005      	beq.n	8004572 <UART_SetConfig+0x39e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4ad6      	ldr	r2, [pc, #856]	; (80048c4 <UART_SetConfig+0x6f0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	f040 80d1 	bne.w	8004714 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004572:	f7fe ff39 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8004576:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	469a      	mov	sl, r3
 800457c:	f04f 0b00 	mov.w	fp, #0
 8004580:	46d0      	mov	r8, sl
 8004582:	46d9      	mov	r9, fp
 8004584:	eb18 0308 	adds.w	r3, r8, r8
 8004588:	eb49 0409 	adc.w	r4, r9, r9
 800458c:	4698      	mov	r8, r3
 800458e:	46a1      	mov	r9, r4
 8004590:	eb18 080a 	adds.w	r8, r8, sl
 8004594:	eb49 090b 	adc.w	r9, r9, fp
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045ac:	4688      	mov	r8, r1
 80045ae:	4691      	mov	r9, r2
 80045b0:	eb1a 0508 	adds.w	r5, sl, r8
 80045b4:	eb4b 0609 	adc.w	r6, fp, r9
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4619      	mov	r1, r3
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	f04f 0400 	mov.w	r4, #0
 80045ca:	0094      	lsls	r4, r2, #2
 80045cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045d0:	008b      	lsls	r3, r1, #2
 80045d2:	461a      	mov	r2, r3
 80045d4:	4623      	mov	r3, r4
 80045d6:	4628      	mov	r0, r5
 80045d8:	4631      	mov	r1, r6
 80045da:	f7fb fe59 	bl	8000290 <__aeabi_uldivmod>
 80045de:	4603      	mov	r3, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	461a      	mov	r2, r3
 80045e4:	4bb8      	ldr	r3, [pc, #736]	; (80048c8 <UART_SetConfig+0x6f4>)
 80045e6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	469b      	mov	fp, r3
 80045f4:	f04f 0c00 	mov.w	ip, #0
 80045f8:	46d9      	mov	r9, fp
 80045fa:	46e2      	mov	sl, ip
 80045fc:	eb19 0309 	adds.w	r3, r9, r9
 8004600:	eb4a 040a 	adc.w	r4, sl, sl
 8004604:	4699      	mov	r9, r3
 8004606:	46a2      	mov	sl, r4
 8004608:	eb19 090b 	adds.w	r9, r9, fp
 800460c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800461c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004624:	4689      	mov	r9, r1
 8004626:	4692      	mov	sl, r2
 8004628:	eb1b 0509 	adds.w	r5, fp, r9
 800462c:	eb4c 060a 	adc.w	r6, ip, sl
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4619      	mov	r1, r3
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	f04f 0400 	mov.w	r4, #0
 8004642:	0094      	lsls	r4, r2, #2
 8004644:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004648:	008b      	lsls	r3, r1, #2
 800464a:	461a      	mov	r2, r3
 800464c:	4623      	mov	r3, r4
 800464e:	4628      	mov	r0, r5
 8004650:	4631      	mov	r1, r6
 8004652:	f7fb fe1d 	bl	8000290 <__aeabi_uldivmod>
 8004656:	4603      	mov	r3, r0
 8004658:	460c      	mov	r4, r1
 800465a:	461a      	mov	r2, r3
 800465c:	4b9a      	ldr	r3, [pc, #616]	; (80048c8 <UART_SetConfig+0x6f4>)
 800465e:	fba3 1302 	umull	r1, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2164      	movs	r1, #100	; 0x64
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	3332      	adds	r3, #50	; 0x32
 8004670:	4a95      	ldr	r2, [pc, #596]	; (80048c8 <UART_SetConfig+0x6f4>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467c:	4498      	add	r8, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	469b      	mov	fp, r3
 8004682:	f04f 0c00 	mov.w	ip, #0
 8004686:	46d9      	mov	r9, fp
 8004688:	46e2      	mov	sl, ip
 800468a:	eb19 0309 	adds.w	r3, r9, r9
 800468e:	eb4a 040a 	adc.w	r4, sl, sl
 8004692:	4699      	mov	r9, r3
 8004694:	46a2      	mov	sl, r4
 8004696:	eb19 090b 	adds.w	r9, r9, fp
 800469a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046b2:	4689      	mov	r9, r1
 80046b4:	4692      	mov	sl, r2
 80046b6:	eb1b 0509 	adds.w	r5, fp, r9
 80046ba:	eb4c 060a 	adc.w	r6, ip, sl
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4619      	mov	r1, r3
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	f04f 0400 	mov.w	r4, #0
 80046d0:	0094      	lsls	r4, r2, #2
 80046d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046d6:	008b      	lsls	r3, r1, #2
 80046d8:	461a      	mov	r2, r3
 80046da:	4623      	mov	r3, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	4631      	mov	r1, r6
 80046e0:	f7fb fdd6 	bl	8000290 <__aeabi_uldivmod>
 80046e4:	4603      	mov	r3, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	461a      	mov	r2, r3
 80046ea:	4b77      	ldr	r3, [pc, #476]	; (80048c8 <UART_SetConfig+0x6f4>)
 80046ec:	fba3 1302 	umull	r1, r3, r3, r2
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	2164      	movs	r1, #100	; 0x64
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	3332      	adds	r3, #50	; 0x32
 80046fe:	4a72      	ldr	r2, [pc, #456]	; (80048c8 <UART_SetConfig+0x6f4>)
 8004700:	fba2 2303 	umull	r2, r3, r2, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	f003 020f 	and.w	r2, r3, #15
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4442      	add	r2, r8
 8004710:	609a      	str	r2, [r3, #8]
 8004712:	e0d0      	b.n	80048b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004714:	f7fe fe54 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	469a      	mov	sl, r3
 800471e:	f04f 0b00 	mov.w	fp, #0
 8004722:	46d0      	mov	r8, sl
 8004724:	46d9      	mov	r9, fp
 8004726:	eb18 0308 	adds.w	r3, r8, r8
 800472a:	eb49 0409 	adc.w	r4, r9, r9
 800472e:	4698      	mov	r8, r3
 8004730:	46a1      	mov	r9, r4
 8004732:	eb18 080a 	adds.w	r8, r8, sl
 8004736:	eb49 090b 	adc.w	r9, r9, fp
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800474a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800474e:	4688      	mov	r8, r1
 8004750:	4691      	mov	r9, r2
 8004752:	eb1a 0508 	adds.w	r5, sl, r8
 8004756:	eb4b 0609 	adc.w	r6, fp, r9
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4619      	mov	r1, r3
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	0094      	lsls	r4, r2, #2
 800476e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004772:	008b      	lsls	r3, r1, #2
 8004774:	461a      	mov	r2, r3
 8004776:	4623      	mov	r3, r4
 8004778:	4628      	mov	r0, r5
 800477a:	4631      	mov	r1, r6
 800477c:	f7fb fd88 	bl	8000290 <__aeabi_uldivmod>
 8004780:	4603      	mov	r3, r0
 8004782:	460c      	mov	r4, r1
 8004784:	461a      	mov	r2, r3
 8004786:	4b50      	ldr	r3, [pc, #320]	; (80048c8 <UART_SetConfig+0x6f4>)
 8004788:	fba3 2302 	umull	r2, r3, r3, r2
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	469b      	mov	fp, r3
 8004796:	f04f 0c00 	mov.w	ip, #0
 800479a:	46d9      	mov	r9, fp
 800479c:	46e2      	mov	sl, ip
 800479e:	eb19 0309 	adds.w	r3, r9, r9
 80047a2:	eb4a 040a 	adc.w	r4, sl, sl
 80047a6:	4699      	mov	r9, r3
 80047a8:	46a2      	mov	sl, r4
 80047aa:	eb19 090b 	adds.w	r9, r9, fp
 80047ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047c6:	4689      	mov	r9, r1
 80047c8:	4692      	mov	sl, r2
 80047ca:	eb1b 0509 	adds.w	r5, fp, r9
 80047ce:	eb4c 060a 	adc.w	r6, ip, sl
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	f04f 0400 	mov.w	r4, #0
 80047e4:	0094      	lsls	r4, r2, #2
 80047e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047ea:	008b      	lsls	r3, r1, #2
 80047ec:	461a      	mov	r2, r3
 80047ee:	4623      	mov	r3, r4
 80047f0:	4628      	mov	r0, r5
 80047f2:	4631      	mov	r1, r6
 80047f4:	f7fb fd4c 	bl	8000290 <__aeabi_uldivmod>
 80047f8:	4603      	mov	r3, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	461a      	mov	r2, r3
 80047fe:	4b32      	ldr	r3, [pc, #200]	; (80048c8 <UART_SetConfig+0x6f4>)
 8004800:	fba3 1302 	umull	r1, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	2164      	movs	r1, #100	; 0x64
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	3332      	adds	r3, #50	; 0x32
 8004812:	4a2d      	ldr	r2, [pc, #180]	; (80048c8 <UART_SetConfig+0x6f4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800481e:	4498      	add	r8, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	469b      	mov	fp, r3
 8004824:	f04f 0c00 	mov.w	ip, #0
 8004828:	46d9      	mov	r9, fp
 800482a:	46e2      	mov	sl, ip
 800482c:	eb19 0309 	adds.w	r3, r9, r9
 8004830:	eb4a 040a 	adc.w	r4, sl, sl
 8004834:	4699      	mov	r9, r3
 8004836:	46a2      	mov	sl, r4
 8004838:	eb19 090b 	adds.w	r9, r9, fp
 800483c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004840:	f04f 0100 	mov.w	r1, #0
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800484c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004850:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004854:	4689      	mov	r9, r1
 8004856:	4692      	mov	sl, r2
 8004858:	eb1b 0509 	adds.w	r5, fp, r9
 800485c:	eb4c 060a 	adc.w	r6, ip, sl
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4619      	mov	r1, r3
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	f04f 0400 	mov.w	r4, #0
 8004872:	0094      	lsls	r4, r2, #2
 8004874:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	461a      	mov	r2, r3
 800487c:	4623      	mov	r3, r4
 800487e:	4628      	mov	r0, r5
 8004880:	4631      	mov	r1, r6
 8004882:	f7fb fd05 	bl	8000290 <__aeabi_uldivmod>
 8004886:	4603      	mov	r3, r0
 8004888:	460c      	mov	r4, r1
 800488a:	461a      	mov	r2, r3
 800488c:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <UART_SetConfig+0x6f4>)
 800488e:	fba3 1302 	umull	r1, r3, r3, r2
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2164      	movs	r1, #100	; 0x64
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	3332      	adds	r3, #50	; 0x32
 80048a0:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <UART_SetConfig+0x6f4>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	f003 020f 	and.w	r2, r3, #15
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4442      	add	r2, r8
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	e7ff      	b.n	80048b6 <UART_SetConfig+0x6e2>
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c0:	40011000 	.word	0x40011000
 80048c4:	40011400 	.word	0x40011400
 80048c8:	51eb851f 	.word	0x51eb851f

080048cc <__errno>:
 80048cc:	4b01      	ldr	r3, [pc, #4]	; (80048d4 <__errno+0x8>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c

080048d8 <__libc_init_array>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0d      	ldr	r6, [pc, #52]	; (8004910 <__libc_init_array+0x38>)
 80048dc:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <__libc_init_array+0x3c>)
 80048de:	1ba4      	subs	r4, r4, r6
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	2500      	movs	r5, #0
 80048e4:	42a5      	cmp	r5, r4
 80048e6:	d109      	bne.n	80048fc <__libc_init_array+0x24>
 80048e8:	4e0b      	ldr	r6, [pc, #44]	; (8004918 <__libc_init_array+0x40>)
 80048ea:	4c0c      	ldr	r4, [pc, #48]	; (800491c <__libc_init_array+0x44>)
 80048ec:	f000 fc26 	bl	800513c <_init>
 80048f0:	1ba4      	subs	r4, r4, r6
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	2500      	movs	r5, #0
 80048f6:	42a5      	cmp	r5, r4
 80048f8:	d105      	bne.n	8004906 <__libc_init_array+0x2e>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004900:	4798      	blx	r3
 8004902:	3501      	adds	r5, #1
 8004904:	e7ee      	b.n	80048e4 <__libc_init_array+0xc>
 8004906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800490a:	4798      	blx	r3
 800490c:	3501      	adds	r5, #1
 800490e:	e7f2      	b.n	80048f6 <__libc_init_array+0x1e>
 8004910:	080051c4 	.word	0x080051c4
 8004914:	080051c4 	.word	0x080051c4
 8004918:	080051c4 	.word	0x080051c4
 800491c:	080051c8 	.word	0x080051c8

08004920 <memset>:
 8004920:	4402      	add	r2, r0
 8004922:	4603      	mov	r3, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <_vsiprintf_r>:
 8004930:	b500      	push	{lr}
 8004932:	b09b      	sub	sp, #108	; 0x6c
 8004934:	9100      	str	r1, [sp, #0]
 8004936:	9104      	str	r1, [sp, #16]
 8004938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800493c:	9105      	str	r1, [sp, #20]
 800493e:	9102      	str	r1, [sp, #8]
 8004940:	4905      	ldr	r1, [pc, #20]	; (8004958 <_vsiprintf_r+0x28>)
 8004942:	9103      	str	r1, [sp, #12]
 8004944:	4669      	mov	r1, sp
 8004946:	f000 f86d 	bl	8004a24 <_svfiprintf_r>
 800494a:	9b00      	ldr	r3, [sp, #0]
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	b01b      	add	sp, #108	; 0x6c
 8004952:	f85d fb04 	ldr.w	pc, [sp], #4
 8004956:	bf00      	nop
 8004958:	ffff0208 	.word	0xffff0208

0800495c <vsiprintf>:
 800495c:	4613      	mov	r3, r2
 800495e:	460a      	mov	r2, r1
 8004960:	4601      	mov	r1, r0
 8004962:	4802      	ldr	r0, [pc, #8]	; (800496c <vsiprintf+0x10>)
 8004964:	6800      	ldr	r0, [r0, #0]
 8004966:	f7ff bfe3 	b.w	8004930 <_vsiprintf_r>
 800496a:	bf00      	nop
 800496c:	2000000c 	.word	0x2000000c

08004970 <__ssputs_r>:
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	688e      	ldr	r6, [r1, #8]
 8004976:	429e      	cmp	r6, r3
 8004978:	4682      	mov	sl, r0
 800497a:	460c      	mov	r4, r1
 800497c:	4690      	mov	r8, r2
 800497e:	4699      	mov	r9, r3
 8004980:	d837      	bhi.n	80049f2 <__ssputs_r+0x82>
 8004982:	898a      	ldrh	r2, [r1, #12]
 8004984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004988:	d031      	beq.n	80049ee <__ssputs_r+0x7e>
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	6909      	ldr	r1, [r1, #16]
 800498e:	1a6f      	subs	r7, r5, r1
 8004990:	6965      	ldr	r5, [r4, #20]
 8004992:	2302      	movs	r3, #2
 8004994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004998:	fb95 f5f3 	sdiv	r5, r5, r3
 800499c:	f109 0301 	add.w	r3, r9, #1
 80049a0:	443b      	add	r3, r7
 80049a2:	429d      	cmp	r5, r3
 80049a4:	bf38      	it	cc
 80049a6:	461d      	movcc	r5, r3
 80049a8:	0553      	lsls	r3, r2, #21
 80049aa:	d530      	bpl.n	8004a0e <__ssputs_r+0x9e>
 80049ac:	4629      	mov	r1, r5
 80049ae:	f000 fb2b 	bl	8005008 <_malloc_r>
 80049b2:	4606      	mov	r6, r0
 80049b4:	b950      	cbnz	r0, 80049cc <__ssputs_r+0x5c>
 80049b6:	230c      	movs	r3, #12
 80049b8:	f8ca 3000 	str.w	r3, [sl]
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049cc:	463a      	mov	r2, r7
 80049ce:	6921      	ldr	r1, [r4, #16]
 80049d0:	f000 faa8 	bl	8004f24 <memcpy>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	6126      	str	r6, [r4, #16]
 80049e2:	6165      	str	r5, [r4, #20]
 80049e4:	443e      	add	r6, r7
 80049e6:	1bed      	subs	r5, r5, r7
 80049e8:	6026      	str	r6, [r4, #0]
 80049ea:	60a5      	str	r5, [r4, #8]
 80049ec:	464e      	mov	r6, r9
 80049ee:	454e      	cmp	r6, r9
 80049f0:	d900      	bls.n	80049f4 <__ssputs_r+0x84>
 80049f2:	464e      	mov	r6, r9
 80049f4:	4632      	mov	r2, r6
 80049f6:	4641      	mov	r1, r8
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	f000 fa9e 	bl	8004f3a <memmove>
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	1b9b      	subs	r3, r3, r6
 8004a02:	60a3      	str	r3, [r4, #8]
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	441e      	add	r6, r3
 8004a08:	6026      	str	r6, [r4, #0]
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e7dc      	b.n	80049c8 <__ssputs_r+0x58>
 8004a0e:	462a      	mov	r2, r5
 8004a10:	f000 fb54 	bl	80050bc <_realloc_r>
 8004a14:	4606      	mov	r6, r0
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d1e2      	bne.n	80049e0 <__ssputs_r+0x70>
 8004a1a:	6921      	ldr	r1, [r4, #16]
 8004a1c:	4650      	mov	r0, sl
 8004a1e:	f000 faa5 	bl	8004f6c <_free_r>
 8004a22:	e7c8      	b.n	80049b6 <__ssputs_r+0x46>

08004a24 <_svfiprintf_r>:
 8004a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a28:	461d      	mov	r5, r3
 8004a2a:	898b      	ldrh	r3, [r1, #12]
 8004a2c:	061f      	lsls	r7, r3, #24
 8004a2e:	b09d      	sub	sp, #116	; 0x74
 8004a30:	4680      	mov	r8, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	4616      	mov	r6, r2
 8004a36:	d50f      	bpl.n	8004a58 <_svfiprintf_r+0x34>
 8004a38:	690b      	ldr	r3, [r1, #16]
 8004a3a:	b96b      	cbnz	r3, 8004a58 <_svfiprintf_r+0x34>
 8004a3c:	2140      	movs	r1, #64	; 0x40
 8004a3e:	f000 fae3 	bl	8005008 <_malloc_r>
 8004a42:	6020      	str	r0, [r4, #0]
 8004a44:	6120      	str	r0, [r4, #16]
 8004a46:	b928      	cbnz	r0, 8004a54 <_svfiprintf_r+0x30>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	f8c8 3000 	str.w	r3, [r8]
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a52:	e0c8      	b.n	8004be6 <_svfiprintf_r+0x1c2>
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	6163      	str	r3, [r4, #20]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a62:	2330      	movs	r3, #48	; 0x30
 8004a64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a68:	9503      	str	r5, [sp, #12]
 8004a6a:	f04f 0b01 	mov.w	fp, #1
 8004a6e:	4637      	mov	r7, r6
 8004a70:	463d      	mov	r5, r7
 8004a72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a76:	b10b      	cbz	r3, 8004a7c <_svfiprintf_r+0x58>
 8004a78:	2b25      	cmp	r3, #37	; 0x25
 8004a7a:	d13e      	bne.n	8004afa <_svfiprintf_r+0xd6>
 8004a7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a80:	d00b      	beq.n	8004a9a <_svfiprintf_r+0x76>
 8004a82:	4653      	mov	r3, sl
 8004a84:	4632      	mov	r2, r6
 8004a86:	4621      	mov	r1, r4
 8004a88:	4640      	mov	r0, r8
 8004a8a:	f7ff ff71 	bl	8004970 <__ssputs_r>
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f000 80a4 	beq.w	8004bdc <_svfiprintf_r+0x1b8>
 8004a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a96:	4453      	add	r3, sl
 8004a98:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9a:	783b      	ldrb	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 809d 	beq.w	8004bdc <_svfiprintf_r+0x1b8>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	9307      	str	r3, [sp, #28]
 8004ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ab6:	462f      	mov	r7, r5
 8004ab8:	2205      	movs	r2, #5
 8004aba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004abe:	4850      	ldr	r0, [pc, #320]	; (8004c00 <_svfiprintf_r+0x1dc>)
 8004ac0:	f7fb fb96 	bl	80001f0 <memchr>
 8004ac4:	9b04      	ldr	r3, [sp, #16]
 8004ac6:	b9d0      	cbnz	r0, 8004afe <_svfiprintf_r+0xda>
 8004ac8:	06d9      	lsls	r1, r3, #27
 8004aca:	bf44      	itt	mi
 8004acc:	2220      	movmi	r2, #32
 8004ace:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ad2:	071a      	lsls	r2, r3, #28
 8004ad4:	bf44      	itt	mi
 8004ad6:	222b      	movmi	r2, #43	; 0x2b
 8004ad8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004adc:	782a      	ldrb	r2, [r5, #0]
 8004ade:	2a2a      	cmp	r2, #42	; 0x2a
 8004ae0:	d015      	beq.n	8004b0e <_svfiprintf_r+0xea>
 8004ae2:	9a07      	ldr	r2, [sp, #28]
 8004ae4:	462f      	mov	r7, r5
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	250a      	movs	r5, #10
 8004aea:	4639      	mov	r1, r7
 8004aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004af0:	3b30      	subs	r3, #48	; 0x30
 8004af2:	2b09      	cmp	r3, #9
 8004af4:	d94d      	bls.n	8004b92 <_svfiprintf_r+0x16e>
 8004af6:	b1b8      	cbz	r0, 8004b28 <_svfiprintf_r+0x104>
 8004af8:	e00f      	b.n	8004b1a <_svfiprintf_r+0xf6>
 8004afa:	462f      	mov	r7, r5
 8004afc:	e7b8      	b.n	8004a70 <_svfiprintf_r+0x4c>
 8004afe:	4a40      	ldr	r2, [pc, #256]	; (8004c00 <_svfiprintf_r+0x1dc>)
 8004b00:	1a80      	subs	r0, r0, r2
 8004b02:	fa0b f000 	lsl.w	r0, fp, r0
 8004b06:	4318      	orrs	r0, r3
 8004b08:	9004      	str	r0, [sp, #16]
 8004b0a:	463d      	mov	r5, r7
 8004b0c:	e7d3      	b.n	8004ab6 <_svfiprintf_r+0x92>
 8004b0e:	9a03      	ldr	r2, [sp, #12]
 8004b10:	1d11      	adds	r1, r2, #4
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	9103      	str	r1, [sp, #12]
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	db01      	blt.n	8004b1e <_svfiprintf_r+0xfa>
 8004b1a:	9207      	str	r2, [sp, #28]
 8004b1c:	e004      	b.n	8004b28 <_svfiprintf_r+0x104>
 8004b1e:	4252      	negs	r2, r2
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	9207      	str	r2, [sp, #28]
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	783b      	ldrb	r3, [r7, #0]
 8004b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b2c:	d10c      	bne.n	8004b48 <_svfiprintf_r+0x124>
 8004b2e:	787b      	ldrb	r3, [r7, #1]
 8004b30:	2b2a      	cmp	r3, #42	; 0x2a
 8004b32:	d133      	bne.n	8004b9c <_svfiprintf_r+0x178>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	9203      	str	r2, [sp, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bfb8      	it	lt
 8004b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b44:	3702      	adds	r7, #2
 8004b46:	9305      	str	r3, [sp, #20]
 8004b48:	4d2e      	ldr	r5, [pc, #184]	; (8004c04 <_svfiprintf_r+0x1e0>)
 8004b4a:	7839      	ldrb	r1, [r7, #0]
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7fb fb4e 	bl	80001f0 <memchr>
 8004b54:	b138      	cbz	r0, 8004b66 <_svfiprintf_r+0x142>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	1b40      	subs	r0, r0, r5
 8004b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b5e:	9b04      	ldr	r3, [sp, #16]
 8004b60:	4303      	orrs	r3, r0
 8004b62:	3701      	adds	r7, #1
 8004b64:	9304      	str	r3, [sp, #16]
 8004b66:	7839      	ldrb	r1, [r7, #0]
 8004b68:	4827      	ldr	r0, [pc, #156]	; (8004c08 <_svfiprintf_r+0x1e4>)
 8004b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b6e:	2206      	movs	r2, #6
 8004b70:	1c7e      	adds	r6, r7, #1
 8004b72:	f7fb fb3d 	bl	80001f0 <memchr>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d038      	beq.n	8004bec <_svfiprintf_r+0x1c8>
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <_svfiprintf_r+0x1e8>)
 8004b7c:	bb13      	cbnz	r3, 8004bc4 <_svfiprintf_r+0x1a0>
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	3307      	adds	r3, #7
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	3308      	adds	r3, #8
 8004b88:	9303      	str	r3, [sp, #12]
 8004b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8c:	444b      	add	r3, r9
 8004b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b90:	e76d      	b.n	8004a6e <_svfiprintf_r+0x4a>
 8004b92:	fb05 3202 	mla	r2, r5, r2, r3
 8004b96:	2001      	movs	r0, #1
 8004b98:	460f      	mov	r7, r1
 8004b9a:	e7a6      	b.n	8004aea <_svfiprintf_r+0xc6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	3701      	adds	r7, #1
 8004ba0:	9305      	str	r3, [sp, #20]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	250a      	movs	r5, #10
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bac:	3a30      	subs	r2, #48	; 0x30
 8004bae:	2a09      	cmp	r2, #9
 8004bb0:	d903      	bls.n	8004bba <_svfiprintf_r+0x196>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0c8      	beq.n	8004b48 <_svfiprintf_r+0x124>
 8004bb6:	9105      	str	r1, [sp, #20]
 8004bb8:	e7c6      	b.n	8004b48 <_svfiprintf_r+0x124>
 8004bba:	fb05 2101 	mla	r1, r5, r1, r2
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	e7f0      	b.n	8004ba6 <_svfiprintf_r+0x182>
 8004bc4:	ab03      	add	r3, sp, #12
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <_svfiprintf_r+0x1ec>)
 8004bcc:	a904      	add	r1, sp, #16
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f3af 8000 	nop.w
 8004bd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bd8:	4681      	mov	r9, r0
 8004bda:	d1d6      	bne.n	8004b8a <_svfiprintf_r+0x166>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	065b      	lsls	r3, r3, #25
 8004be0:	f53f af35 	bmi.w	8004a4e <_svfiprintf_r+0x2a>
 8004be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be6:	b01d      	add	sp, #116	; 0x74
 8004be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bec:	ab03      	add	r3, sp, #12
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <_svfiprintf_r+0x1ec>)
 8004bf4:	a904      	add	r1, sp, #16
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f000 f882 	bl	8004d00 <_printf_i>
 8004bfc:	e7ea      	b.n	8004bd4 <_svfiprintf_r+0x1b0>
 8004bfe:	bf00      	nop
 8004c00:	08005188 	.word	0x08005188
 8004c04:	0800518e 	.word	0x0800518e
 8004c08:	08005192 	.word	0x08005192
 8004c0c:	00000000 	.word	0x00000000
 8004c10:	08004971 	.word	0x08004971

08004c14 <_printf_common>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	4691      	mov	r9, r2
 8004c1a:	461f      	mov	r7, r3
 8004c1c:	688a      	ldr	r2, [r1, #8]
 8004c1e:	690b      	ldr	r3, [r1, #16]
 8004c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bfb8      	it	lt
 8004c28:	4613      	movlt	r3, r2
 8004c2a:	f8c9 3000 	str.w	r3, [r9]
 8004c2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c32:	4606      	mov	r6, r0
 8004c34:	460c      	mov	r4, r1
 8004c36:	b112      	cbz	r2, 8004c3e <_printf_common+0x2a>
 8004c38:	3301      	adds	r3, #1
 8004c3a:	f8c9 3000 	str.w	r3, [r9]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	0699      	lsls	r1, r3, #26
 8004c42:	bf42      	ittt	mi
 8004c44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c48:	3302      	addmi	r3, #2
 8004c4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004c4e:	6825      	ldr	r5, [r4, #0]
 8004c50:	f015 0506 	ands.w	r5, r5, #6
 8004c54:	d107      	bne.n	8004c66 <_printf_common+0x52>
 8004c56:	f104 0a19 	add.w	sl, r4, #25
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	42ab      	cmp	r3, r5
 8004c64:	dc28      	bgt.n	8004cb8 <_printf_common+0xa4>
 8004c66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	3300      	adds	r3, #0
 8004c6e:	bf18      	it	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	0692      	lsls	r2, r2, #26
 8004c74:	d42d      	bmi.n	8004cd2 <_printf_common+0xbe>
 8004c76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7a:	4639      	mov	r1, r7
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	47c0      	blx	r8
 8004c80:	3001      	adds	r0, #1
 8004c82:	d020      	beq.n	8004cc6 <_printf_common+0xb2>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	68e5      	ldr	r5, [r4, #12]
 8004c88:	f8d9 2000 	ldr.w	r2, [r9]
 8004c8c:	f003 0306 	and.w	r3, r3, #6
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	bf08      	it	eq
 8004c94:	1aad      	subeq	r5, r5, r2
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	bf0c      	ite	eq
 8004c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca0:	2500      	movne	r5, #0
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bfc4      	itt	gt
 8004ca6:	1a9b      	subgt	r3, r3, r2
 8004ca8:	18ed      	addgt	r5, r5, r3
 8004caa:	f04f 0900 	mov.w	r9, #0
 8004cae:	341a      	adds	r4, #26
 8004cb0:	454d      	cmp	r5, r9
 8004cb2:	d11a      	bne.n	8004cea <_printf_common+0xd6>
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e008      	b.n	8004cca <_printf_common+0xb6>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4652      	mov	r2, sl
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	47c0      	blx	r8
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d103      	bne.n	8004cce <_printf_common+0xba>
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cce:	3501      	adds	r5, #1
 8004cd0:	e7c3      	b.n	8004c5a <_printf_common+0x46>
 8004cd2:	18e1      	adds	r1, r4, r3
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	2030      	movs	r0, #48	; 0x30
 8004cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cdc:	4422      	add	r2, r4
 8004cde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ce2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	e7c5      	b.n	8004c76 <_printf_common+0x62>
 8004cea:	2301      	movs	r3, #1
 8004cec:	4622      	mov	r2, r4
 8004cee:	4639      	mov	r1, r7
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	47c0      	blx	r8
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d0e6      	beq.n	8004cc6 <_printf_common+0xb2>
 8004cf8:	f109 0901 	add.w	r9, r9, #1
 8004cfc:	e7d8      	b.n	8004cb0 <_printf_common+0x9c>
	...

08004d00 <_printf_i>:
 8004d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d08:	460c      	mov	r4, r1
 8004d0a:	7e09      	ldrb	r1, [r1, #24]
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	296e      	cmp	r1, #110	; 0x6e
 8004d10:	4617      	mov	r7, r2
 8004d12:	4606      	mov	r6, r0
 8004d14:	4698      	mov	r8, r3
 8004d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d18:	f000 80b3 	beq.w	8004e82 <_printf_i+0x182>
 8004d1c:	d822      	bhi.n	8004d64 <_printf_i+0x64>
 8004d1e:	2963      	cmp	r1, #99	; 0x63
 8004d20:	d036      	beq.n	8004d90 <_printf_i+0x90>
 8004d22:	d80a      	bhi.n	8004d3a <_printf_i+0x3a>
 8004d24:	2900      	cmp	r1, #0
 8004d26:	f000 80b9 	beq.w	8004e9c <_printf_i+0x19c>
 8004d2a:	2958      	cmp	r1, #88	; 0x58
 8004d2c:	f000 8083 	beq.w	8004e36 <_printf_i+0x136>
 8004d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d38:	e032      	b.n	8004da0 <_printf_i+0xa0>
 8004d3a:	2964      	cmp	r1, #100	; 0x64
 8004d3c:	d001      	beq.n	8004d42 <_printf_i+0x42>
 8004d3e:	2969      	cmp	r1, #105	; 0x69
 8004d40:	d1f6      	bne.n	8004d30 <_printf_i+0x30>
 8004d42:	6820      	ldr	r0, [r4, #0]
 8004d44:	6813      	ldr	r3, [r2, #0]
 8004d46:	0605      	lsls	r5, r0, #24
 8004d48:	f103 0104 	add.w	r1, r3, #4
 8004d4c:	d52a      	bpl.n	8004da4 <_printf_i+0xa4>
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da03      	bge.n	8004d5e <_printf_i+0x5e>
 8004d56:	222d      	movs	r2, #45	; 0x2d
 8004d58:	425b      	negs	r3, r3
 8004d5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d5e:	486f      	ldr	r0, [pc, #444]	; (8004f1c <_printf_i+0x21c>)
 8004d60:	220a      	movs	r2, #10
 8004d62:	e039      	b.n	8004dd8 <_printf_i+0xd8>
 8004d64:	2973      	cmp	r1, #115	; 0x73
 8004d66:	f000 809d 	beq.w	8004ea4 <_printf_i+0x1a4>
 8004d6a:	d808      	bhi.n	8004d7e <_printf_i+0x7e>
 8004d6c:	296f      	cmp	r1, #111	; 0x6f
 8004d6e:	d020      	beq.n	8004db2 <_printf_i+0xb2>
 8004d70:	2970      	cmp	r1, #112	; 0x70
 8004d72:	d1dd      	bne.n	8004d30 <_printf_i+0x30>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f043 0320 	orr.w	r3, r3, #32
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	e003      	b.n	8004d86 <_printf_i+0x86>
 8004d7e:	2975      	cmp	r1, #117	; 0x75
 8004d80:	d017      	beq.n	8004db2 <_printf_i+0xb2>
 8004d82:	2978      	cmp	r1, #120	; 0x78
 8004d84:	d1d4      	bne.n	8004d30 <_printf_i+0x30>
 8004d86:	2378      	movs	r3, #120	; 0x78
 8004d88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8c:	4864      	ldr	r0, [pc, #400]	; (8004f20 <_printf_i+0x220>)
 8004d8e:	e055      	b.n	8004e3c <_printf_i+0x13c>
 8004d90:	6813      	ldr	r3, [r2, #0]
 8004d92:	1d19      	adds	r1, r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6011      	str	r1, [r2, #0]
 8004d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da0:	2301      	movs	r3, #1
 8004da2:	e08c      	b.n	8004ebe <_printf_i+0x1be>
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6011      	str	r1, [r2, #0]
 8004da8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dac:	bf18      	it	ne
 8004dae:	b21b      	sxthne	r3, r3
 8004db0:	e7cf      	b.n	8004d52 <_printf_i+0x52>
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	6825      	ldr	r5, [r4, #0]
 8004db6:	1d18      	adds	r0, r3, #4
 8004db8:	6010      	str	r0, [r2, #0]
 8004dba:	0628      	lsls	r0, r5, #24
 8004dbc:	d501      	bpl.n	8004dc2 <_printf_i+0xc2>
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	e002      	b.n	8004dc8 <_printf_i+0xc8>
 8004dc2:	0668      	lsls	r0, r5, #25
 8004dc4:	d5fb      	bpl.n	8004dbe <_printf_i+0xbe>
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	4854      	ldr	r0, [pc, #336]	; (8004f1c <_printf_i+0x21c>)
 8004dca:	296f      	cmp	r1, #111	; 0x6f
 8004dcc:	bf14      	ite	ne
 8004dce:	220a      	movne	r2, #10
 8004dd0:	2208      	moveq	r2, #8
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dd8:	6865      	ldr	r5, [r4, #4]
 8004dda:	60a5      	str	r5, [r4, #8]
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	f2c0 8095 	blt.w	8004f0c <_printf_i+0x20c>
 8004de2:	6821      	ldr	r1, [r4, #0]
 8004de4:	f021 0104 	bic.w	r1, r1, #4
 8004de8:	6021      	str	r1, [r4, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13d      	bne.n	8004e6a <_printf_i+0x16a>
 8004dee:	2d00      	cmp	r5, #0
 8004df0:	f040 808e 	bne.w	8004f10 <_printf_i+0x210>
 8004df4:	4665      	mov	r5, ip
 8004df6:	2a08      	cmp	r2, #8
 8004df8:	d10b      	bne.n	8004e12 <_printf_i+0x112>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	07db      	lsls	r3, r3, #31
 8004dfe:	d508      	bpl.n	8004e12 <_printf_i+0x112>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	bfde      	ittt	le
 8004e08:	2330      	movle	r3, #48	; 0x30
 8004e0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e12:	ebac 0305 	sub.w	r3, ip, r5
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	f8cd 8000 	str.w	r8, [sp]
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	aa03      	add	r2, sp, #12
 8004e20:	4621      	mov	r1, r4
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff fef6 	bl	8004c14 <_printf_common>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d14d      	bne.n	8004ec8 <_printf_i+0x1c8>
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	b005      	add	sp, #20
 8004e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e36:	4839      	ldr	r0, [pc, #228]	; (8004f1c <_printf_i+0x21c>)
 8004e38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	1d1d      	adds	r5, r3, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6015      	str	r5, [r2, #0]
 8004e46:	060a      	lsls	r2, r1, #24
 8004e48:	d50b      	bpl.n	8004e62 <_printf_i+0x162>
 8004e4a:	07ca      	lsls	r2, r1, #31
 8004e4c:	bf44      	itt	mi
 8004e4e:	f041 0120 	orrmi.w	r1, r1, #32
 8004e52:	6021      	strmi	r1, [r4, #0]
 8004e54:	b91b      	cbnz	r3, 8004e5e <_printf_i+0x15e>
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	f022 0220 	bic.w	r2, r2, #32
 8004e5c:	6022      	str	r2, [r4, #0]
 8004e5e:	2210      	movs	r2, #16
 8004e60:	e7b7      	b.n	8004dd2 <_printf_i+0xd2>
 8004e62:	064d      	lsls	r5, r1, #25
 8004e64:	bf48      	it	mi
 8004e66:	b29b      	uxthmi	r3, r3
 8004e68:	e7ef      	b.n	8004e4a <_printf_i+0x14a>
 8004e6a:	4665      	mov	r5, ip
 8004e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e70:	fb02 3311 	mls	r3, r2, r1, r3
 8004e74:	5cc3      	ldrb	r3, [r0, r3]
 8004e76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d1f5      	bne.n	8004e6c <_printf_i+0x16c>
 8004e80:	e7b9      	b.n	8004df6 <_printf_i+0xf6>
 8004e82:	6813      	ldr	r3, [r2, #0]
 8004e84:	6825      	ldr	r5, [r4, #0]
 8004e86:	6961      	ldr	r1, [r4, #20]
 8004e88:	1d18      	adds	r0, r3, #4
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	0628      	lsls	r0, r5, #24
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	d501      	bpl.n	8004e96 <_printf_i+0x196>
 8004e92:	6019      	str	r1, [r3, #0]
 8004e94:	e002      	b.n	8004e9c <_printf_i+0x19c>
 8004e96:	066a      	lsls	r2, r5, #25
 8004e98:	d5fb      	bpl.n	8004e92 <_printf_i+0x192>
 8004e9a:	8019      	strh	r1, [r3, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	4665      	mov	r5, ip
 8004ea2:	e7b9      	b.n	8004e18 <_printf_i+0x118>
 8004ea4:	6813      	ldr	r3, [r2, #0]
 8004ea6:	1d19      	adds	r1, r3, #4
 8004ea8:	6011      	str	r1, [r2, #0]
 8004eaa:	681d      	ldr	r5, [r3, #0]
 8004eac:	6862      	ldr	r2, [r4, #4]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f7fb f99d 	bl	80001f0 <memchr>
 8004eb6:	b108      	cbz	r0, 8004ebc <_printf_i+0x1bc>
 8004eb8:	1b40      	subs	r0, r0, r5
 8004eba:	6060      	str	r0, [r4, #4]
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	6123      	str	r3, [r4, #16]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec6:	e7a7      	b.n	8004e18 <_printf_i+0x118>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	462a      	mov	r2, r5
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4630      	mov	r0, r6
 8004ed0:	47c0      	blx	r8
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d0aa      	beq.n	8004e2c <_printf_i+0x12c>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	d413      	bmi.n	8004f04 <_printf_i+0x204>
 8004edc:	68e0      	ldr	r0, [r4, #12]
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	4298      	cmp	r0, r3
 8004ee2:	bfb8      	it	lt
 8004ee4:	4618      	movlt	r0, r3
 8004ee6:	e7a3      	b.n	8004e30 <_printf_i+0x130>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	464a      	mov	r2, r9
 8004eec:	4639      	mov	r1, r7
 8004eee:	4630      	mov	r0, r6
 8004ef0:	47c0      	blx	r8
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d09a      	beq.n	8004e2c <_printf_i+0x12c>
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	68e3      	ldr	r3, [r4, #12]
 8004efa:	9a03      	ldr	r2, [sp, #12]
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	42ab      	cmp	r3, r5
 8004f00:	dcf2      	bgt.n	8004ee8 <_printf_i+0x1e8>
 8004f02:	e7eb      	b.n	8004edc <_printf_i+0x1dc>
 8004f04:	2500      	movs	r5, #0
 8004f06:	f104 0919 	add.w	r9, r4, #25
 8004f0a:	e7f5      	b.n	8004ef8 <_printf_i+0x1f8>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ac      	bne.n	8004e6a <_printf_i+0x16a>
 8004f10:	7803      	ldrb	r3, [r0, #0]
 8004f12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f1a:	e76c      	b.n	8004df6 <_printf_i+0xf6>
 8004f1c:	08005199 	.word	0x08005199
 8004f20:	080051aa 	.word	0x080051aa

08004f24 <memcpy>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	1e43      	subs	r3, r0, #1
 8004f28:	440a      	add	r2, r1
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d100      	bne.n	8004f30 <memcpy+0xc>
 8004f2e:	bd10      	pop	{r4, pc}
 8004f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f38:	e7f7      	b.n	8004f2a <memcpy+0x6>

08004f3a <memmove>:
 8004f3a:	4288      	cmp	r0, r1
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	eb01 0302 	add.w	r3, r1, r2
 8004f42:	d807      	bhi.n	8004f54 <memmove+0x1a>
 8004f44:	1e42      	subs	r2, r0, #1
 8004f46:	4299      	cmp	r1, r3
 8004f48:	d00a      	beq.n	8004f60 <memmove+0x26>
 8004f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f52:	e7f8      	b.n	8004f46 <memmove+0xc>
 8004f54:	4283      	cmp	r3, r0
 8004f56:	d9f5      	bls.n	8004f44 <memmove+0xa>
 8004f58:	1881      	adds	r1, r0, r2
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	42d3      	cmn	r3, r2
 8004f5e:	d100      	bne.n	8004f62 <memmove+0x28>
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f6a:	e7f7      	b.n	8004f5c <memmove+0x22>

08004f6c <_free_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4605      	mov	r5, r0
 8004f70:	2900      	cmp	r1, #0
 8004f72:	d045      	beq.n	8005000 <_free_r+0x94>
 8004f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f78:	1f0c      	subs	r4, r1, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bfb8      	it	lt
 8004f7e:	18e4      	addlt	r4, r4, r3
 8004f80:	f000 f8d2 	bl	8005128 <__malloc_lock>
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <_free_r+0x98>)
 8004f86:	6813      	ldr	r3, [r2, #0]
 8004f88:	4610      	mov	r0, r2
 8004f8a:	b933      	cbnz	r3, 8004f9a <_free_r+0x2e>
 8004f8c:	6063      	str	r3, [r4, #4]
 8004f8e:	6014      	str	r4, [r2, #0]
 8004f90:	4628      	mov	r0, r5
 8004f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f96:	f000 b8c8 	b.w	800512a <__malloc_unlock>
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	d90c      	bls.n	8004fb8 <_free_r+0x4c>
 8004f9e:	6821      	ldr	r1, [r4, #0]
 8004fa0:	1862      	adds	r2, r4, r1
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	bf04      	itt	eq
 8004fa6:	681a      	ldreq	r2, [r3, #0]
 8004fa8:	685b      	ldreq	r3, [r3, #4]
 8004faa:	6063      	str	r3, [r4, #4]
 8004fac:	bf04      	itt	eq
 8004fae:	1852      	addeq	r2, r2, r1
 8004fb0:	6022      	streq	r2, [r4, #0]
 8004fb2:	6004      	str	r4, [r0, #0]
 8004fb4:	e7ec      	b.n	8004f90 <_free_r+0x24>
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	b10a      	cbz	r2, 8004fc0 <_free_r+0x54>
 8004fbc:	42a2      	cmp	r2, r4
 8004fbe:	d9fa      	bls.n	8004fb6 <_free_r+0x4a>
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	1858      	adds	r0, r3, r1
 8004fc4:	42a0      	cmp	r0, r4
 8004fc6:	d10b      	bne.n	8004fe0 <_free_r+0x74>
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	4401      	add	r1, r0
 8004fcc:	1858      	adds	r0, r3, r1
 8004fce:	4282      	cmp	r2, r0
 8004fd0:	6019      	str	r1, [r3, #0]
 8004fd2:	d1dd      	bne.n	8004f90 <_free_r+0x24>
 8004fd4:	6810      	ldr	r0, [r2, #0]
 8004fd6:	6852      	ldr	r2, [r2, #4]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	4401      	add	r1, r0
 8004fdc:	6019      	str	r1, [r3, #0]
 8004fde:	e7d7      	b.n	8004f90 <_free_r+0x24>
 8004fe0:	d902      	bls.n	8004fe8 <_free_r+0x7c>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	e7d3      	b.n	8004f90 <_free_r+0x24>
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	1821      	adds	r1, r4, r0
 8004fec:	428a      	cmp	r2, r1
 8004fee:	bf04      	itt	eq
 8004ff0:	6811      	ldreq	r1, [r2, #0]
 8004ff2:	6852      	ldreq	r2, [r2, #4]
 8004ff4:	6062      	str	r2, [r4, #4]
 8004ff6:	bf04      	itt	eq
 8004ff8:	1809      	addeq	r1, r1, r0
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	605c      	str	r4, [r3, #4]
 8004ffe:	e7c7      	b.n	8004f90 <_free_r+0x24>
 8005000:	bd38      	pop	{r3, r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	20000094 	.word	0x20000094

08005008 <_malloc_r>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	1ccd      	adds	r5, r1, #3
 800500c:	f025 0503 	bic.w	r5, r5, #3
 8005010:	3508      	adds	r5, #8
 8005012:	2d0c      	cmp	r5, #12
 8005014:	bf38      	it	cc
 8005016:	250c      	movcc	r5, #12
 8005018:	2d00      	cmp	r5, #0
 800501a:	4606      	mov	r6, r0
 800501c:	db01      	blt.n	8005022 <_malloc_r+0x1a>
 800501e:	42a9      	cmp	r1, r5
 8005020:	d903      	bls.n	800502a <_malloc_r+0x22>
 8005022:	230c      	movs	r3, #12
 8005024:	6033      	str	r3, [r6, #0]
 8005026:	2000      	movs	r0, #0
 8005028:	bd70      	pop	{r4, r5, r6, pc}
 800502a:	f000 f87d 	bl	8005128 <__malloc_lock>
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <_malloc_r+0xac>)
 8005030:	6814      	ldr	r4, [r2, #0]
 8005032:	4621      	mov	r1, r4
 8005034:	b991      	cbnz	r1, 800505c <_malloc_r+0x54>
 8005036:	4c20      	ldr	r4, [pc, #128]	; (80050b8 <_malloc_r+0xb0>)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	b91b      	cbnz	r3, 8005044 <_malloc_r+0x3c>
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f863 	bl	8005108 <_sbrk_r>
 8005042:	6020      	str	r0, [r4, #0]
 8005044:	4629      	mov	r1, r5
 8005046:	4630      	mov	r0, r6
 8005048:	f000 f85e 	bl	8005108 <_sbrk_r>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d124      	bne.n	800509a <_malloc_r+0x92>
 8005050:	230c      	movs	r3, #12
 8005052:	6033      	str	r3, [r6, #0]
 8005054:	4630      	mov	r0, r6
 8005056:	f000 f868 	bl	800512a <__malloc_unlock>
 800505a:	e7e4      	b.n	8005026 <_malloc_r+0x1e>
 800505c:	680b      	ldr	r3, [r1, #0]
 800505e:	1b5b      	subs	r3, r3, r5
 8005060:	d418      	bmi.n	8005094 <_malloc_r+0x8c>
 8005062:	2b0b      	cmp	r3, #11
 8005064:	d90f      	bls.n	8005086 <_malloc_r+0x7e>
 8005066:	600b      	str	r3, [r1, #0]
 8005068:	50cd      	str	r5, [r1, r3]
 800506a:	18cc      	adds	r4, r1, r3
 800506c:	4630      	mov	r0, r6
 800506e:	f000 f85c 	bl	800512a <__malloc_unlock>
 8005072:	f104 000b 	add.w	r0, r4, #11
 8005076:	1d23      	adds	r3, r4, #4
 8005078:	f020 0007 	bic.w	r0, r0, #7
 800507c:	1ac3      	subs	r3, r0, r3
 800507e:	d0d3      	beq.n	8005028 <_malloc_r+0x20>
 8005080:	425a      	negs	r2, r3
 8005082:	50e2      	str	r2, [r4, r3]
 8005084:	e7d0      	b.n	8005028 <_malloc_r+0x20>
 8005086:	428c      	cmp	r4, r1
 8005088:	684b      	ldr	r3, [r1, #4]
 800508a:	bf16      	itet	ne
 800508c:	6063      	strne	r3, [r4, #4]
 800508e:	6013      	streq	r3, [r2, #0]
 8005090:	460c      	movne	r4, r1
 8005092:	e7eb      	b.n	800506c <_malloc_r+0x64>
 8005094:	460c      	mov	r4, r1
 8005096:	6849      	ldr	r1, [r1, #4]
 8005098:	e7cc      	b.n	8005034 <_malloc_r+0x2c>
 800509a:	1cc4      	adds	r4, r0, #3
 800509c:	f024 0403 	bic.w	r4, r4, #3
 80050a0:	42a0      	cmp	r0, r4
 80050a2:	d005      	beq.n	80050b0 <_malloc_r+0xa8>
 80050a4:	1a21      	subs	r1, r4, r0
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 f82e 	bl	8005108 <_sbrk_r>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0cf      	beq.n	8005050 <_malloc_r+0x48>
 80050b0:	6025      	str	r5, [r4, #0]
 80050b2:	e7db      	b.n	800506c <_malloc_r+0x64>
 80050b4:	20000094 	.word	0x20000094
 80050b8:	20000098 	.word	0x20000098

080050bc <_realloc_r>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	4607      	mov	r7, r0
 80050c0:	4614      	mov	r4, r2
 80050c2:	460e      	mov	r6, r1
 80050c4:	b921      	cbnz	r1, 80050d0 <_realloc_r+0x14>
 80050c6:	4611      	mov	r1, r2
 80050c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050cc:	f7ff bf9c 	b.w	8005008 <_malloc_r>
 80050d0:	b922      	cbnz	r2, 80050dc <_realloc_r+0x20>
 80050d2:	f7ff ff4b 	bl	8004f6c <_free_r>
 80050d6:	4625      	mov	r5, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050dc:	f000 f826 	bl	800512c <_malloc_usable_size_r>
 80050e0:	42a0      	cmp	r0, r4
 80050e2:	d20f      	bcs.n	8005104 <_realloc_r+0x48>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4638      	mov	r0, r7
 80050e8:	f7ff ff8e 	bl	8005008 <_malloc_r>
 80050ec:	4605      	mov	r5, r0
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0f2      	beq.n	80050d8 <_realloc_r+0x1c>
 80050f2:	4631      	mov	r1, r6
 80050f4:	4622      	mov	r2, r4
 80050f6:	f7ff ff15 	bl	8004f24 <memcpy>
 80050fa:	4631      	mov	r1, r6
 80050fc:	4638      	mov	r0, r7
 80050fe:	f7ff ff35 	bl	8004f6c <_free_r>
 8005102:	e7e9      	b.n	80050d8 <_realloc_r+0x1c>
 8005104:	4635      	mov	r5, r6
 8005106:	e7e7      	b.n	80050d8 <_realloc_r+0x1c>

08005108 <_sbrk_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4c06      	ldr	r4, [pc, #24]	; (8005124 <_sbrk_r+0x1c>)
 800510c:	2300      	movs	r3, #0
 800510e:	4605      	mov	r5, r0
 8005110:	4608      	mov	r0, r1
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	f7fc fa92 	bl	800163c <_sbrk>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_sbrk_r+0x1a>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	b103      	cbz	r3, 8005122 <_sbrk_r+0x1a>
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	2000025c 	.word	0x2000025c

08005128 <__malloc_lock>:
 8005128:	4770      	bx	lr

0800512a <__malloc_unlock>:
 800512a:	4770      	bx	lr

0800512c <_malloc_usable_size_r>:
 800512c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005130:	1f18      	subs	r0, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	bfbc      	itt	lt
 8005136:	580b      	ldrlt	r3, [r1, r0]
 8005138:	18c0      	addlt	r0, r0, r3
 800513a:	4770      	bx	lr

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
