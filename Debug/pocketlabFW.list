
pocketlabFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005660  08005660  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005668  08005668  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000070  080056e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080056e0  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000245e  00000000  00000000  00030a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00032eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  00033cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001835e  00000000  00000000  000349c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd05  00000000  00000000  0004cd26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092421  00000000  00000000  00058a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eae4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000eaec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055d8 	.word	0x080055d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080055d8 	.word	0x080055d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sendFormat>:

	//Send buffer
	sendPacket(&nack, 1);
}

void sendFormat(char* format, ...) {
 8000590:	b40f      	push	{r0, r1, r2, r3}
 8000592:	b580      	push	{r7, lr}
 8000594:	b086      	sub	sp, #24
 8000596:	af00      	add	r7, sp, #0

	//Arguments list
	va_list args;

	//Start argument parsing
	va_start(args, format);
 8000598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800059c:	603b      	str	r3, [r7, #0]

	//Print to string
	vsprintf(message, format, args);
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	6a39      	ldr	r1, [r7, #32]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 fc27 	bl	8004df8 <vsiprintf>

	//Check if UART is available, then send.
	if(HAL_UART_GetState(&huart1) != HAL_UART_STATE_BUSY) {
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <sendFormat+0x4c>)
 80005ac:	f003 fe34 	bl	8004218 <HAL_UART_GetState>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b24      	cmp	r3, #36	; 0x24
 80005b4:	d00b      	beq.n	80005ce <sendFormat+0x3e>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fe11 	bl	80001e0 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	1d39      	adds	r1, r7, #4
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <sendFormat+0x4c>)
 80005ca:	f003 fbee 	bl	8003daa <HAL_UART_Transmit>
	}
	va_end(args);
}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr
 80005dc:	2000016c 	.word	0x2000016c

080005e0 <debug>:
 */


#include "debugger.h"

void debug(char* format, ...) {
 80005e0:	b40f      	push	{r0, r1, r2, r3}
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b09a      	sub	sp, #104	; 0x68
 80005e6:	af00      	add	r7, sp, #0

	//Arguments
	va_list args;

	//Get arguments from format
	va_start(args, format);
 80005e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005ec:	603b      	str	r3, [r7, #0]

	//Copy arguments to the message
	vsprintf(message, format, args);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fbff 	bl	8004df8 <vsiprintf>

	//Send message
	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fdef 	bl	80001e0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	1d39      	adds	r1, r7, #4
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <debug+0x40>)
 800060e:	f003 fbcc 	bl	8003daa <HAL_UART_Transmit>
	va_end(args);
}
 8000612:	bf00      	nop
 8000614:	3768      	adds	r7, #104	; 0x68
 8000616:	46bd      	mov	sp, r7
 8000618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr
 8000620:	20000218 	.word	0x20000218

08000624 <processCMD>:

//PWM command status
bool isWaitingPWM = false;


void processCMD(char* command_) {
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	ed2d 8b02 	vpush	{d8}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	//Command buffer's first character.
	char header_ = command_[0];
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	73fb      	strb	r3, [r7, #15]

	//Number of digits after decimal
	int decimals = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

	//Is there decimal in the command
	bool decimalFlag = false;
 800063a:	2300      	movs	r3, #0
 800063c:	76fb      	strb	r3, [r7, #27]

	//General use iterator
	int iter = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]

	//PWM pointer
	int pwmSource = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]

	switch(header_) {
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	3b47      	subs	r3, #71	; 0x47
 800064a:	2b10      	cmp	r3, #16
 800064c:	f200 82d9 	bhi.w	8000c02 <processCMD+0x5de>
 8000650:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <processCMD+0x34>)
 8000652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000656:	bf00      	nop
 8000658:	08000b35 	.word	0x08000b35
 800065c:	08000c03 	.word	0x08000c03
 8000660:	08000c03 	.word	0x08000c03
 8000664:	08000c03 	.word	0x08000c03
 8000668:	08000c03 	.word	0x08000c03
 800066c:	08000c03 	.word	0x08000c03
 8000670:	0800069d 	.word	0x0800069d
 8000674:	08000c03 	.word	0x08000c03
 8000678:	0800093f 	.word	0x0800093f
 800067c:	0800086b 	.word	0x0800086b
 8000680:	08000c03 	.word	0x08000c03
 8000684:	08000c03 	.word	0x08000c03
 8000688:	08000c03 	.word	0x08000c03
 800068c:	08000c03 	.word	0x08000c03
 8000690:	08000c03 	.word	0x08000c03
 8000694:	08000c03 	.word	0x08000c03
 8000698:	080006dd 	.word	0x080006dd
	//Multimeter command
	case MULTIMETER:
		//Store source
		multimeter_.source_ = parseInt(command_[1]);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fb5e 	bl	8000d64 <parseInt>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4bad      	ldr	r3, [pc, #692]	; (8000964 <processCMD+0x340>)
 80006ae:	705a      	strb	r2, [r3, #1]

		//Store state
		if(command_[2] == STATE_HIGH) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3302      	adds	r3, #2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b48      	cmp	r3, #72	; 0x48
 80006b8:	d103      	bne.n	80006c2 <processCMD+0x9e>
		  multimeter_.state_ = STATE_ON;
 80006ba:	4baa      	ldr	r3, [pc, #680]	; (8000964 <processCMD+0x340>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
		  multimeter_.state_ = STATE_OFF;
		} else {
		  debug("Bad command\n\r");
		}

		break;
 80006c0:	e2a0      	b.n	8000c04 <processCMD+0x5e0>
		} else if(command_[2] == STATE_LOW) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3302      	adds	r3, #2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b4c      	cmp	r3, #76	; 0x4c
 80006ca:	d103      	bne.n	80006d4 <processCMD+0xb0>
		  multimeter_.state_ = STATE_OFF;
 80006cc:	4ba5      	ldr	r3, [pc, #660]	; (8000964 <processCMD+0x340>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
		break;
 80006d2:	e297      	b.n	8000c04 <processCMD+0x5e0>
		  debug("Bad command\n\r");
 80006d4:	48a4      	ldr	r0, [pc, #656]	; (8000968 <processCMD+0x344>)
 80006d6:	f7ff ff83 	bl	80005e0 <debug>
		break;
 80006da:	e293      	b.n	8000c04 <processCMD+0x5e0>

	//Wave generator command
	case WAVE_GENERATOR:
		//Store source
		waveGenerator_.source_ = parseInt(command_[1]);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fb3e 	bl	8000d64 <parseInt>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b9f      	ldr	r3, [pc, #636]	; (800096c <processCMD+0x348>)
 80006ee:	701a      	strb	r2, [r3, #0]

		//Store state
		if(command_[2] == STATE_HIGH) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3302      	adds	r3, #2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b48      	cmp	r3, #72	; 0x48
 80006f8:	f040 80a1 	bne.w	800083e <processCMD+0x21a>
			waveGenerator_.state = STATE_ON;
 80006fc:	4b9b      	ldr	r3, [pc, #620]	; (800096c <processCMD+0x348>)
 80006fe:	2201      	movs	r2, #1
 8000700:	705a      	strb	r2, [r3, #1]

			//Store wave type
			switch(command_[3]) {
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3303      	adds	r3, #3
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b32      	cmp	r3, #50	; 0x32
 800070a:	d008      	beq.n	800071e <processCMD+0xfa>
 800070c:	2b33      	cmp	r3, #51	; 0x33
 800070e:	d00a      	beq.n	8000726 <processCMD+0x102>
 8000710:	2b31      	cmp	r3, #49	; 0x31
 8000712:	d000      	beq.n	8000716 <processCMD+0xf2>
					break;
				case '3':
					waveGenerator_.wave_ = TRIANG;
					break;
				default:
					break;
 8000714:	e00b      	b.n	800072e <processCMD+0x10a>
					waveGenerator_.wave_ = SINE;
 8000716:	4b95      	ldr	r3, [pc, #596]	; (800096c <processCMD+0x348>)
 8000718:	2201      	movs	r2, #1
 800071a:	709a      	strb	r2, [r3, #2]
					break;
 800071c:	e007      	b.n	800072e <processCMD+0x10a>
					waveGenerator_.wave_ = SQUARE;
 800071e:	4b93      	ldr	r3, [pc, #588]	; (800096c <processCMD+0x348>)
 8000720:	2202      	movs	r2, #2
 8000722:	709a      	strb	r2, [r3, #2]
					break;
 8000724:	e003      	b.n	800072e <processCMD+0x10a>
					waveGenerator_.wave_ = TRIANG;
 8000726:	4b91      	ldr	r3, [pc, #580]	; (800096c <processCMD+0x348>)
 8000728:	2203      	movs	r2, #3
 800072a:	709a      	strb	r2, [r3, #2]
					break;
 800072c:	bf00      	nop
				}

			//Parse and store wave phase as integer
			for(iter = 4; command_[iter] != 'A'; iter++) {
 800072e:	2304      	movs	r3, #4
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	e026      	b.n	8000782 <processCMD+0x15e>
				if(command_[iter] != '.') {
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b2e      	cmp	r3, #46	; 0x2e
 800073e:	d01b      	beq.n	8000778 <processCMD+0x154>
					if(decimalFlag) decimals++;
 8000740:	7efb      	ldrb	r3, [r7, #27]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <processCMD+0x128>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3301      	adds	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
					waveGenerator_.period_ = (waveGenerator_.period_* 10) + parseFloat(command_[iter]);
 800074c:	4b87      	ldr	r3, [pc, #540]	; (800096c <processCMD+0x348>)
 800074e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000752:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000756:	ee27 8a87 	vmul.f32	s16, s15, s14
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 faec 	bl	8000d40 <parseFloat>
 8000768:	eef0 7a40 	vmov.f32	s15, s0
 800076c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000770:	4b7e      	ldr	r3, [pc, #504]	; (800096c <processCMD+0x348>)
 8000772:	edc3 7a02 	vstr	s15, [r3, #8]
 8000776:	e001      	b.n	800077c <processCMD+0x158>
				} else {
					decimalFlag = true;
 8000778:	2301      	movs	r3, #1
 800077a:	76fb      	strb	r3, [r7, #27]
			for(iter = 4; command_[iter] != 'A'; iter++) {
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	3301      	adds	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b41      	cmp	r3, #65	; 0x41
 800078c:	d1d2      	bne.n	8000734 <processCMD+0x110>
				}
			}

			//Convert integer to float
			while(decimals > 0) {
 800078e:	e00c      	b.n	80007aa <processCMD+0x186>
				waveGenerator_.period_ = waveGenerator_.period_ / 10;
 8000790:	4b76      	ldr	r3, [pc, #472]	; (800096c <processCMD+0x348>)
 8000792:	ed93 7a02 	vldr	s14, [r3, #8]
 8000796:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800079a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800079e:	4b73      	ldr	r3, [pc, #460]	; (800096c <processCMD+0x348>)
 80007a0:	edc3 7a02 	vstr	s15, [r3, #8]
				decimals--;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
			while(decimals > 0) {
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dcef      	bgt.n	8000790 <processCMD+0x16c>
			}

			//Reset vars
			decimals = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
			decimalFlag = false;
 80007b4:	2300      	movs	r3, #0
 80007b6:	76fb      	strb	r3, [r7, #27]
			iter++;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]

			//Parse and store wave amplitude as integer
			while(command_[iter] != '-') {
 80007be:	e026      	b.n	800080e <processCMD+0x1ea>
				if(command_[iter] != '.') {
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b2e      	cmp	r3, #46	; 0x2e
 80007ca:	d01b      	beq.n	8000804 <processCMD+0x1e0>
					if(decimalFlag) decimals++;
 80007cc:	7efb      	ldrb	r3, [r7, #27]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <processCMD+0x1b4>
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3301      	adds	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
					waveGenerator_.amplitude_ = (waveGenerator_.amplitude_ * 10) + parseFloat(command_[iter]);
 80007d8:	4b64      	ldr	r3, [pc, #400]	; (800096c <processCMD+0x348>)
 80007da:	edd3 7a01 	vldr	s15, [r3, #4]
 80007de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80007e2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 faa6 	bl	8000d40 <parseFloat>
 80007f4:	eef0 7a40 	vmov.f32	s15, s0
 80007f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <processCMD+0x348>)
 80007fe:	edc3 7a01 	vstr	s15, [r3, #4]
 8000802:	e001      	b.n	8000808 <processCMD+0x1e4>
				} else {
					decimalFlag = true;
 8000804:	2301      	movs	r3, #1
 8000806:	76fb      	strb	r3, [r7, #27]
				}
				iter++;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
			while(command_[iter] != '-') {
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4413      	add	r3, r2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b2d      	cmp	r3, #45	; 0x2d
 8000818:	d1d2      	bne.n	80007c0 <processCMD+0x19c>
			}

			//Convert integer to float
			while(decimals > 0) {
 800081a:	e00c      	b.n	8000836 <processCMD+0x212>
				waveGenerator_.amplitude_ = waveGenerator_.amplitude_ / 10;
 800081c:	4b53      	ldr	r3, [pc, #332]	; (800096c <processCMD+0x348>)
 800081e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000822:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800082a:	4b50      	ldr	r3, [pc, #320]	; (800096c <processCMD+0x348>)
 800082c:	edc3 7a01 	vstr	s15, [r3, #4]
				decimals--;
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	3b01      	subs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
			while(decimals > 0) {
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dcef      	bgt.n	800081c <processCMD+0x1f8>
 800083c:	e00e      	b.n	800085c <processCMD+0x238>
			}
		} else if(command_[2] == STATE_LOW) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3302      	adds	r3, #2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b4c      	cmp	r3, #76	; 0x4c
 8000846:	d106      	bne.n	8000856 <processCMD+0x232>
			//Store state
			waveGenerator_.state = STATE_OFF;
 8000848:	4b48      	ldr	r3, [pc, #288]	; (800096c <processCMD+0x348>)
 800084a:	2200      	movs	r2, #0
 800084c:	705a      	strb	r2, [r3, #1]
			resetParams(WAVE_GENERATOR);
 800084e:	2057      	movs	r0, #87	; 0x57
 8000850:	f000 fa96 	bl	8000d80 <resetParams>
 8000854:	e002      	b.n	800085c <processCMD+0x238>
		} else {
			debug("Bad command\n\r");
 8000856:	4844      	ldr	r0, [pc, #272]	; (8000968 <processCMD+0x344>)
 8000858:	f7ff fec2 	bl	80005e0 <debug>
		}

		//Reset vars
		decimals = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
		decimalFlag = false;
 8000860:	2300      	movs	r3, #0
 8000862:	76fb      	strb	r3, [r7, #27]
		iter = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

		break;
 8000868:	e1cc      	b.n	8000c04 <processCMD+0x5e0>

	//Power source command
	case POWER_SOURCE:
		//Store source
		powerSource_.source_ = parseInt(command_[1]);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3301      	adds	r3, #1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fa77 	bl	8000d64 <parseInt>
 8000876:	4603      	mov	r3, r0
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <processCMD+0x34c>)
 800087c:	701a      	strb	r2, [r3, #0]

		//Store state
		if(command_[2] == STATE_HIGH) {
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3302      	adds	r3, #2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b48      	cmp	r3, #72	; 0x48
 8000886:	d144      	bne.n	8000912 <processCMD+0x2ee>
			powerSource_.state_ = STATE_ON;
 8000888:	4b39      	ldr	r3, [pc, #228]	; (8000970 <processCMD+0x34c>)
 800088a:	2201      	movs	r2, #1
 800088c:	705a      	strb	r2, [r3, #1]

			//Store amplitude as integer
			for(iter = 3; command_[iter] != '-'; iter++) {
 800088e:	2303      	movs	r3, #3
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	e026      	b.n	80008e2 <processCMD+0x2be>
				if(command_[iter] != '.') {
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b2e      	cmp	r3, #46	; 0x2e
 800089e:	d01b      	beq.n	80008d8 <processCMD+0x2b4>
					if(decimalFlag) decimals++;
 80008a0:	7efb      	ldrb	r3, [r7, #27]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <processCMD+0x288>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3301      	adds	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
					powerSource_.value_ = (powerSource_.value_ * 10) + parseFloat(command_[iter]);
 80008ac:	4b30      	ldr	r3, [pc, #192]	; (8000970 <processCMD+0x34c>)
 80008ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80008b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80008b6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fa3c 	bl	8000d40 <parseFloat>
 80008c8:	eef0 7a40 	vmov.f32	s15, s0
 80008cc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <processCMD+0x34c>)
 80008d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80008d6:	e001      	b.n	80008dc <processCMD+0x2b8>
				} else {
					decimalFlag = true;
 80008d8:	2301      	movs	r3, #1
 80008da:	76fb      	strb	r3, [r7, #27]
			for(iter = 3; command_[iter] != '-'; iter++) {
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3301      	adds	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b2d      	cmp	r3, #45	; 0x2d
 80008ec:	d1d2      	bne.n	8000894 <processCMD+0x270>
				}
			}

			//Convert integer to float
			while(decimals > 0) {
 80008ee:	e00c      	b.n	800090a <processCMD+0x2e6>
				powerSource_.value_ = powerSource_.value_ / 10;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <processCMD+0x34c>)
 80008f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80008f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80008fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <processCMD+0x34c>)
 8000900:	edc3 7a01 	vstr	s15, [r3, #4]
				decimals--;
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	3b01      	subs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
			while(decimals > 0) {
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dcef      	bgt.n	80008f0 <processCMD+0x2cc>
 8000910:	e00e      	b.n	8000930 <processCMD+0x30c>
			}
		} else if(command_[2] == STATE_LOW) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3302      	adds	r3, #2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b4c      	cmp	r3, #76	; 0x4c
 800091a:	d106      	bne.n	800092a <processCMD+0x306>
			//Store state and reset params
			powerSource_.state_ = STATE_OFF;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <processCMD+0x34c>)
 800091e:	2200      	movs	r2, #0
 8000920:	705a      	strb	r2, [r3, #1]
			resetParams(POWER_SOURCE);
 8000922:	2050      	movs	r0, #80	; 0x50
 8000924:	f000 fa2c 	bl	8000d80 <resetParams>
 8000928:	e002      	b.n	8000930 <processCMD+0x30c>
		} else {
			debug("Bad command\n\r");
 800092a:	480f      	ldr	r0, [pc, #60]	; (8000968 <processCMD+0x344>)
 800092c:	f7ff fe58 	bl	80005e0 <debug>
		}

		//Reset vars
		decimals = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
		decimalFlag = false;
 8000934:	2300      	movs	r3, #0
 8000936:	76fb      	strb	r3, [r7, #27]
		iter = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

		break;
 800093c:	e162      	b.n	8000c04 <processCMD+0x5e0>

	//Oscilloscope command
	case OSCILLOSCOPE:
		//Store channel
		switch(command_[1]) {
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3301      	adds	r3, #1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b31      	cmp	r3, #49	; 0x31
 8000946:	d002      	beq.n	800094e <processCMD+0x32a>
 8000948:	2b32      	cmp	r3, #50	; 0x32
 800094a:	d07e      	beq.n	8000a4a <processCMD+0x426>
			iter = 0;
			decimals = 0;
			decimalFlag = false;
			break;
		default:
			break;
 800094c:	e0f1      	b.n	8000b32 <processCMD+0x50e>
			if(command_[2] == STATE_HIGH) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3302      	adds	r3, #2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b48      	cmp	r3, #72	; 0x48
 8000956:	d167      	bne.n	8000a28 <processCMD+0x404>
				oscilloscopeCh1_.state_ = STATE_ON;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <processCMD+0x350>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
				for(iter = 3; command_[iter] != 'U'; iter++) {
 800095e:	2303      	movs	r3, #3
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	e030      	b.n	80009c6 <processCMD+0x3a2>
 8000964:	200001b8 	.word	0x200001b8
 8000968:	080055f0 	.word	0x080055f0
 800096c:	200001fc 	.word	0x200001fc
 8000970:	2000020c 	.word	0x2000020c
 8000974:	200001ac 	.word	0x200001ac
					if(command_[iter] != '.') {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b2e      	cmp	r3, #46	; 0x2e
 8000982:	d01b      	beq.n	80009bc <processCMD+0x398>
						if(decimalFlag) decimals++;
 8000984:	7efb      	ldrb	r3, [r7, #27]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d002      	beq.n	8000990 <processCMD+0x36c>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3301      	adds	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
						oscilloscopeCh1_.period_ = (oscilloscopeCh1_.period_ * 10) + parseFloat(command_[iter]);
 8000990:	4b9f      	ldr	r3, [pc, #636]	; (8000c10 <processCMD+0x5ec>)
 8000992:	edd3 7a01 	vldr	s15, [r3, #4]
 8000996:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800099a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f9ca 	bl	8000d40 <parseFloat>
 80009ac:	eef0 7a40 	vmov.f32	s15, s0
 80009b0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80009b4:	4b96      	ldr	r3, [pc, #600]	; (8000c10 <processCMD+0x5ec>)
 80009b6:	edc3 7a01 	vstr	s15, [r3, #4]
 80009ba:	e001      	b.n	80009c0 <processCMD+0x39c>
						decimalFlag = true;
 80009bc:	2301      	movs	r3, #1
 80009be:	76fb      	strb	r3, [r7, #27]
				for(iter = 3; command_[iter] != 'U'; iter++) {
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3301      	adds	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b55      	cmp	r3, #85	; 0x55
 80009d0:	d1d2      	bne.n	8000978 <processCMD+0x354>
				while(decimals > 0) {
 80009d2:	e00c      	b.n	80009ee <processCMD+0x3ca>
					oscilloscopeCh1_.period_ = oscilloscopeCh1_.period_ / 10;
 80009d4:	4b8e      	ldr	r3, [pc, #568]	; (8000c10 <processCMD+0x5ec>)
 80009d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80009da:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80009de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e2:	4b8b      	ldr	r3, [pc, #556]	; (8000c10 <processCMD+0x5ec>)
 80009e4:	edc3 7a01 	vstr	s15, [r3, #4]
					decimals--;
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
				while(decimals > 0) {
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dcef      	bgt.n	80009d4 <processCMD+0x3b0>
				iter++;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
				switch(command_[iter]) {
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b32      	cmp	r3, #50	; 0x32
 8000a04:	d008      	beq.n	8000a18 <processCMD+0x3f4>
 8000a06:	2b33      	cmp	r3, #51	; 0x33
 8000a08:	d00a      	beq.n	8000a20 <processCMD+0x3fc>
 8000a0a:	2b31      	cmp	r3, #49	; 0x31
 8000a0c:	d000      	beq.n	8000a10 <processCMD+0x3ec>
					break;
 8000a0e:	e015      	b.n	8000a3c <processCMD+0x418>
					oscilloscopeCh1_.unit_ = MICRO;
 8000a10:	4b7f      	ldr	r3, [pc, #508]	; (8000c10 <processCMD+0x5ec>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	721a      	strb	r2, [r3, #8]
					break;
 8000a16:	e011      	b.n	8000a3c <processCMD+0x418>
					oscilloscopeCh1_.unit_ = MILLI;
 8000a18:	4b7d      	ldr	r3, [pc, #500]	; (8000c10 <processCMD+0x5ec>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	721a      	strb	r2, [r3, #8]
					break;
 8000a1e:	e00d      	b.n	8000a3c <processCMD+0x418>
					oscilloscopeCh1_.unit_ = SECOND;
 8000a20:	4b7b      	ldr	r3, [pc, #492]	; (8000c10 <processCMD+0x5ec>)
 8000a22:	2203      	movs	r2, #3
 8000a24:	721a      	strb	r2, [r3, #8]
					break;
 8000a26:	e009      	b.n	8000a3c <processCMD+0x418>
				oscilloscopeCh1_.state_ = STATE_OFF;
 8000a28:	4b79      	ldr	r3, [pc, #484]	; (8000c10 <processCMD+0x5ec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
				oscilloscopeCh1_.period_ = 0;
 8000a2e:	4b78      	ldr	r3, [pc, #480]	; (8000c10 <processCMD+0x5ec>)
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
				oscilloscopeCh1_.unit_ = MICRO;
 8000a36:	4b76      	ldr	r3, [pc, #472]	; (8000c10 <processCMD+0x5ec>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	721a      	strb	r2, [r3, #8]
			iter = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
			decimals = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
			decimalFlag = false;
 8000a44:	2300      	movs	r3, #0
 8000a46:	76fb      	strb	r3, [r7, #27]
			break;
 8000a48:	e073      	b.n	8000b32 <processCMD+0x50e>
			if(command_[2] == STATE_HIGH) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b48      	cmp	r3, #72	; 0x48
 8000a52:	d15d      	bne.n	8000b10 <processCMD+0x4ec>
				oscilloscopeCh2_.state_ = STATE_ON;
 8000a54:	4b6f      	ldr	r3, [pc, #444]	; (8000c14 <processCMD+0x5f0>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
				for(iter = 3; command_[iter] != 'U'; iter++) {
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e026      	b.n	8000aae <processCMD+0x48a>
					if(command_[iter] != '.') {
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b2e      	cmp	r3, #46	; 0x2e
 8000a6a:	d01b      	beq.n	8000aa4 <processCMD+0x480>
						if(decimalFlag) decimals++;
 8000a6c:	7efb      	ldrb	r3, [r7, #27]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <processCMD+0x454>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
						oscilloscopeCh2_.period_ = (oscilloscopeCh2_.period_ * 10) + parseFloat(command_[iter]);
 8000a78:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <processCMD+0x5f0>)
 8000a7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a82:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f956 	bl	8000d40 <parseFloat>
 8000a94:	eef0 7a40 	vmov.f32	s15, s0
 8000a98:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000a9c:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <processCMD+0x5f0>)
 8000a9e:	edc3 7a01 	vstr	s15, [r3, #4]
 8000aa2:	e001      	b.n	8000aa8 <processCMD+0x484>
						decimalFlag = true;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	76fb      	strb	r3, [r7, #27]
				for(iter = 3; command_[iter] != 'U'; iter++) {
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b55      	cmp	r3, #85	; 0x55
 8000ab8:	d1d2      	bne.n	8000a60 <processCMD+0x43c>
				while(decimals > 0) {
 8000aba:	e00c      	b.n	8000ad6 <processCMD+0x4b2>
					oscilloscopeCh2_.period_ = oscilloscopeCh2_.period_ / 10;
 8000abc:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <processCMD+0x5f0>)
 8000abe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ac2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aca:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <processCMD+0x5f0>)
 8000acc:	edc3 7a01 	vstr	s15, [r3, #4]
					decimals--;
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
				while(decimals > 0) {
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dcef      	bgt.n	8000abc <processCMD+0x498>
				iter++;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
				switch(command_[iter]) {
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b32      	cmp	r3, #50	; 0x32
 8000aec:	d008      	beq.n	8000b00 <processCMD+0x4dc>
 8000aee:	2b33      	cmp	r3, #51	; 0x33
 8000af0:	d00a      	beq.n	8000b08 <processCMD+0x4e4>
 8000af2:	2b31      	cmp	r3, #49	; 0x31
 8000af4:	d000      	beq.n	8000af8 <processCMD+0x4d4>
					break;
 8000af6:	e015      	b.n	8000b24 <processCMD+0x500>
					oscilloscopeCh2_.unit_ = MICRO;
 8000af8:	4b46      	ldr	r3, [pc, #280]	; (8000c14 <processCMD+0x5f0>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	721a      	strb	r2, [r3, #8]
					break;
 8000afe:	e011      	b.n	8000b24 <processCMD+0x500>
					oscilloscopeCh2_.unit_ = MILLI;
 8000b00:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <processCMD+0x5f0>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	721a      	strb	r2, [r3, #8]
					break;
 8000b06:	e00d      	b.n	8000b24 <processCMD+0x500>
					oscilloscopeCh2_.unit_ = SECOND;
 8000b08:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <processCMD+0x5f0>)
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	721a      	strb	r2, [r3, #8]
					break;
 8000b0e:	e009      	b.n	8000b24 <processCMD+0x500>
				oscilloscopeCh2_.state_ = STATE_OFF;
 8000b10:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <processCMD+0x5f0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
				oscilloscopeCh2_.period_ = 0;
 8000b16:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <processCMD+0x5f0>)
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
				oscilloscopeCh2_.unit_ = MICRO;
 8000b1e:	4b3d      	ldr	r3, [pc, #244]	; (8000c14 <processCMD+0x5f0>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	721a      	strb	r2, [r3, #8]
			iter = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
			decimals = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
			decimalFlag = false;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	76fb      	strb	r3, [r7, #27]
			break;
 8000b30:	bf00      	nop
		}

		break;
 8000b32:	e067      	b.n	8000c04 <processCMD+0x5e0>

	//PWM generator command
	case PWM_GENERATOR:
		//Set source
		pwmSource = parseInt(command_[1]) - 1;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3301      	adds	r3, #1
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f912 	bl	8000d64 <parseInt>
 8000b40:	4603      	mov	r3, r0
 8000b42:	3b01      	subs	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]

		//Set state
		if(command_[2] == STATE_HIGH) {
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3302      	adds	r3, #2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b48      	cmp	r3, #72	; 0x48
 8000b4e:	d138      	bne.n	8000bc2 <processCMD+0x59e>
			pwmGenerator_[pwmSource].state_ = STATE_ON;
 8000b50:	4931      	ldr	r1, [pc, #196]	; (8000c18 <processCMD+0x5f4>)
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]

			//Parse duty cycle
			for(int iter = 3; command_[iter] != '-'; iter++) {
 8000b62:	2303      	movs	r3, #3
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	e022      	b.n	8000bae <processCMD+0x58a>
				pwmGenerator_[pwmSource].dutyCycle_ = (pwmGenerator_[pwmSource].dutyCycle_ * 10)
 8000b68:	492b      	ldr	r1, [pc, #172]	; (8000c18 <processCMD+0x5f4>)
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	3304      	adds	r3, #4
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	461c      	mov	r4, r3
														+ parseInt(command_[iter]);
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 f8e9 	bl	8000d64 <parseInt>
 8000b92:	4603      	mov	r3, r0
 8000b94:	18e1      	adds	r1, r4, r3
				pwmGenerator_[pwmSource].dutyCycle_ = (pwmGenerator_[pwmSource].dutyCycle_ * 10)
 8000b96:	4820      	ldr	r0, [pc, #128]	; (8000c18 <processCMD+0x5f4>)
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4403      	add	r3, r0
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	6019      	str	r1, [r3, #0]
			for(int iter = 3; command_[iter] != '-'; iter++) {
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	3301      	adds	r3, #1
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b2d      	cmp	r3, #45	; 0x2d
 8000bb8:	d1d6      	bne.n	8000b68 <processCMD+0x544>
			}

			//Set pwm state
			isWaitingPWM = true;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <processCMD+0x5f8>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
			isWaitingPWM = true;
		} else {
			debug("Bad command\n\r");
		}

		break;
 8000bc0:	e020      	b.n	8000c04 <processCMD+0x5e0>
		} else if(command_[2] == STATE_LOW) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b4c      	cmp	r3, #76	; 0x4c
 8000bca:	d116      	bne.n	8000bfa <processCMD+0x5d6>
			pwmGenerator_[pwmSource].state_ = STATE_OFF;
 8000bcc:	4912      	ldr	r1, [pc, #72]	; (8000c18 <processCMD+0x5f4>)
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	440b      	add	r3, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
			pwmGenerator_[pwmSource].dutyCycle_ = 0;
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <processCMD+0x5f4>)
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	440b      	add	r3, r1
 8000bec:	3304      	adds	r3, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
			isWaitingPWM = true;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <processCMD+0x5f8>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
		break;
 8000bf8:	e004      	b.n	8000c04 <processCMD+0x5e0>
			debug("Bad command\n\r");
 8000bfa:	4809      	ldr	r0, [pc, #36]	; (8000c20 <processCMD+0x5fc>)
 8000bfc:	f7ff fcf0 	bl	80005e0 <debug>
		break;
 8000c00:	e000      	b.n	8000c04 <processCMD+0x5e0>

	//Bad command received
	default:
		break;
 8000c02:	bf00      	nop
	}
}
 8000c04:	bf00      	nop
 8000c06:	3724      	adds	r7, #36	; 0x24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	ecbd 8b02 	vpop	{d8}
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	200001ac 	.word	0x200001ac
 8000c14:	200000b8 	.word	0x200000b8
 8000c18:	20000258 	.word	0x20000258
 8000c1c:	2000008e 	.word	0x2000008e
 8000c20:	080055f0 	.word	0x080055f0

08000c24 <runDevice>:


void runDevice(MultimeterTypedef mul_, WaveGeneratorTypedef wg_, PowerSourceTypedef ps_,
		OscilloscopeTypedef osc1_, OscilloscopeTypedef osc2_, PWMTypedef* pwm_) {
 8000c24:	b084      	sub	sp, #16
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	80b8      	strh	r0, [r7, #4]
 8000c2e:	f107 0014 	add.w	r0, r7, #20
 8000c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Multimeter turned on
	if(mul_.state_ == STATE_ON) {
 8000c36:	793b      	ldrb	r3, [r7, #4]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d11b      	bne.n	8000c74 <runDevice+0x50>
		//Stop any running service
		killOscilloscope();
 8000c3c:	f000 f8f8 	bl	8000e30 <killOscilloscope>

		//Start multimeter
		if(mul_.source_ == 1) {
 8000c40:	797b      	ldrb	r3, [r7, #5]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d109      	bne.n	8000c5a <runDevice+0x36>
			//Set channel
			selectChannel(MUL_CH1);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f954 	bl	8000ef4 <selectChannel>

			//Sample a value and send
			sampleAndSend(MUL_CH1);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f90d 	bl	8000e6c <sampleAndSend>

			//Delay in milliseconds
			delayMS(50);
 8000c52:	2032      	movs	r0, #50	; 0x32
 8000c54:	f000 f9c0 	bl	8000fd8 <delayMS>
		//TODO: Turn on PWM

		//Free device
		isWaitingPWM = false;
	}
}
 8000c58:	e049      	b.n	8000cee <runDevice+0xca>
		} else if(mul_.source_ == 2){
 8000c5a:	797b      	ldrb	r3, [r7, #5]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d146      	bne.n	8000cee <runDevice+0xca>
			selectChannel(MUL_CH2);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 f947 	bl	8000ef4 <selectChannel>
			sampleAndSend(MUL_CH2);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 f900 	bl	8000e6c <sampleAndSend>
			delayMS(150);
 8000c6c:	2096      	movs	r0, #150	; 0x96
 8000c6e:	f000 f9b3 	bl	8000fd8 <delayMS>
}
 8000c72:	e03c      	b.n	8000cee <runDevice+0xca>
	} else if(osc1_.state_ == STATE_ON || osc2_.state_ == STATE_ON) {
 8000c74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d003      	beq.n	8000c84 <runDevice+0x60>
 8000c7c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d11c      	bne.n	8000cbe <runDevice+0x9a>
		killMultimeter();
 8000c84:	f000 f8e6 	bl	8000e54 <killMultimeter>
		if(osc1_.state_ == STATE_ON) {
 8000c88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d108      	bne.n	8000ca2 <runDevice+0x7e>
			selectChannel(OSC_CH1);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f000 f92f 	bl	8000ef4 <selectChannel>
			sampleAndSend(OSC_CH1);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f000 f8e8 	bl	8000e6c <sampleAndSend>
			delayMS(150);
 8000c9c:	2096      	movs	r0, #150	; 0x96
 8000c9e:	f000 f99b 	bl	8000fd8 <delayMS>
		if(osc2_.state_ == STATE_ON) {
 8000ca2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d121      	bne.n	8000cee <runDevice+0xca>
			selectChannel(OSC_CH2);
 8000caa:	2003      	movs	r0, #3
 8000cac:	f000 f922 	bl	8000ef4 <selectChannel>
			sampleAndSend(OSC_CH2);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8db 	bl	8000e6c <sampleAndSend>
			delayMS(100);
 8000cb6:	2064      	movs	r0, #100	; 0x64
 8000cb8:	f000 f98e 	bl	8000fd8 <delayMS>
		if(osc2_.state_ == STATE_ON) {
 8000cbc:	e017      	b.n	8000cee <runDevice+0xca>
	} else if(waveGenerator_.isWaiting_) {
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <runDevice+0xd8>)
 8000cc0:	7b1b      	ldrb	r3, [r3, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <runDevice+0xaa>
		waveGenerator_.isWaiting_ = false;
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <runDevice+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	731a      	strb	r2, [r3, #12]
}
 8000ccc:	e00f      	b.n	8000cee <runDevice+0xca>
	} else if(powerSource_.isWaiting_) {
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <runDevice+0xdc>)
 8000cd0:	7a1b      	ldrb	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <runDevice+0xba>
		powerSource_.isWaiting_ = false;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <runDevice+0xdc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	721a      	strb	r2, [r3, #8]
}
 8000cdc:	e007      	b.n	8000cee <runDevice+0xca>
	} else if(isWaitingPWM){
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <runDevice+0xe0>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <runDevice+0xca>
		isWaitingPWM = false;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <runDevice+0xe0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
}
 8000cec:	e7ff      	b.n	8000cee <runDevice+0xca>
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr
 8000cfc:	200001fc 	.word	0x200001fc
 8000d00:	2000020c 	.word	0x2000020c
 8000d04:	2000008e 	.word	0x2000008e

08000d08 <getADCvalue>:

uint16_t getADCvalue(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	//ADC value
	uint16_t value_ = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	80fb      	strh	r3, [r7, #6]

	//Start conversion
	HAL_ADC_Start(&hadc1);
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <getADCvalue+0x34>)
 8000d14:	f000 ff40 	bl	8001b98 <HAL_ADC_Start>

	//Wait for conversion
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <getADCvalue+0x34>)
 8000d1e:	f001 f814 	bl	8001d4a <HAL_ADC_PollForConversion>

	//Get value and return
	value_ = HAL_ADC_GetValue(&hadc1);
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <getADCvalue+0x34>)
 8000d24:	f001 f895 	bl	8001e52 <HAL_ADC_GetValue>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	80fb      	strh	r3, [r7, #6]

	//Stop ADC
	HAL_ADC_Stop(&hadc1);
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <getADCvalue+0x34>)
 8000d2e:	f000 ffd9 	bl	8001ce4 <HAL_ADC_Stop>

	return value_;
 8000d32:	88fb      	ldrh	r3, [r7, #6]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000c4 	.word	0x200000c4

08000d40 <parseFloat>:

float parseFloat(char c) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	return c - '0';
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	3b30      	subs	r3, #48	; 0x30
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000d56:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <parseInt>:

int parseInt(char c) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	return c - '0';
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	3b30      	subs	r3, #48	; 0x30
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <resetParams>:

void resetParams(char device) {
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	//Set all params to default
	switch(device) {
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	3b4d      	subs	r3, #77	; 0x4d
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d83c      	bhi.n	8000e0c <resetParams+0x8c>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <resetParams+0x18>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000de3 	.word	0x08000de3
 8000d9c:	08000e0d 	.word	0x08000e0d
 8000da0:	08000dc5 	.word	0x08000dc5
 8000da4:	08000e03 	.word	0x08000e03
 8000da8:	08000e0d 	.word	0x08000e0d
 8000dac:	08000e0d 	.word	0x08000e0d
 8000db0:	08000e0d 	.word	0x08000e0d
 8000db4:	08000e0d 	.word	0x08000e0d
 8000db8:	08000e0d 	.word	0x08000e0d
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000df1 	.word	0x08000df1
	case OSCILLOSCOPE:
		oscilloscopeCh1_.period_ = 0;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <resetParams+0x9c>)
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
		oscilloscopeCh1_.unit_ = MICRO;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <resetParams+0x9c>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	721a      	strb	r2, [r3, #8]
		oscilloscopeCh2_.period_ = 0;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <resetParams+0xa0>)
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
		oscilloscopeCh2_.unit_ = MICRO;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <resetParams+0xa0>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	721a      	strb	r2, [r3, #8]
		break;
 8000de0:	e015      	b.n	8000e0e <resetParams+0x8e>
	case MULTIMETER:
		multimeter_.source_ = 1;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <resetParams+0xa4>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	705a      	strb	r2, [r3, #1]
		multimeter_.state_ = STATE_OFF;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <resetParams+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
		break;
 8000dee:	e00e      	b.n	8000e0e <resetParams+0x8e>
	case WAVE_GENERATOR:
		waveGenerator_.amplitude_ = 0;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <resetParams+0xa8>)
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
		waveGenerator_.period_ = 0;
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <resetParams+0xa8>)
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
		break;
 8000e00:	e005      	b.n	8000e0e <resetParams+0x8e>
	case POWER_SOURCE:
		powerSource_.value_ = 0;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <resetParams+0xac>)
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
		break;
 8000e0a:	e000      	b.n	8000e0e <resetParams+0x8e>
	default :
		break;
 8000e0c:	bf00      	nop
	}
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200001ac 	.word	0x200001ac
 8000e20:	200000b8 	.word	0x200000b8
 8000e24:	200001b8 	.word	0x200001b8
 8000e28:	200001fc 	.word	0x200001fc
 8000e2c:	2000020c 	.word	0x2000020c

08000e30 <killOscilloscope>:

void killOscilloscope(void) {
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	oscilloscopeCh1_.state_ = STATE_OFF;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <killOscilloscope+0x1c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
	oscilloscopeCh2_.state_ = STATE_OFF;
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <killOscilloscope+0x20>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	200001ac 	.word	0x200001ac
 8000e50:	200000b8 	.word	0x200000b8

08000e54 <killMultimeter>:

void killMultimeter(void) {
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	multimeter_.state_ = STATE_OFF;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <killMultimeter+0x14>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	200001b8 	.word	0x200001b8

08000e6c <sampleAndSend>:

void sampleAndSend(ChannelTypedef channel) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	//Sample one value
	adcRaw_ = getADCvalue();
 8000e76:	f7ff ff47 	bl	8000d08 <getADCvalue>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <sampleAndSend+0x78>)
 8000e80:	801a      	strh	r2, [r3, #0]

	//Send formatted packet
	switch(channel) {
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d827      	bhi.n	8000ed8 <sampleAndSend+0x6c>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <sampleAndSend+0x24>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000eaf 	.word	0x08000eaf
 8000e98:	08000ebd 	.word	0x08000ebd
 8000e9c:	08000ecb 	.word	0x08000ecb
	case MUL_CH1:
		//Send value
		sendFormat("%dM", adcRaw_);
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <sampleAndSend+0x78>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <sampleAndSend+0x7c>)
 8000ea8:	f7ff fb72 	bl	8000590 <sendFormat>

		break;
 8000eac:	e015      	b.n	8000eda <sampleAndSend+0x6e>
	case MUL_CH2:
		//Send value
		sendFormat("%dM", adcRaw_);
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <sampleAndSend+0x78>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <sampleAndSend+0x7c>)
 8000eb6:	f7ff fb6b 	bl	8000590 <sendFormat>

		break;
 8000eba:	e00e      	b.n	8000eda <sampleAndSend+0x6e>
	case OSC_CH1:
		//Send value, 'A' for oscilloscope channel 1
		sendFormat("%dA", adcRaw_);
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <sampleAndSend+0x78>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480a      	ldr	r0, [pc, #40]	; (8000eec <sampleAndSend+0x80>)
 8000ec4:	f7ff fb64 	bl	8000590 <sendFormat>

		break;
 8000ec8:	e007      	b.n	8000eda <sampleAndSend+0x6e>
	case OSC_CH2:
		//Send value, 'B' for oscilloscope channel 2
		sendFormat("%dB", adcRaw_);
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <sampleAndSend+0x78>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <sampleAndSend+0x84>)
 8000ed2:	f7ff fb5d 	bl	8000590 <sendFormat>

		break;
 8000ed6:	e000      	b.n	8000eda <sampleAndSend+0x6e>
	default:
		break;
 8000ed8:	bf00      	nop
	}
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000008c 	.word	0x2000008c
 8000ee8:	08005600 	.word	0x08005600
 8000eec:	08005604 	.word	0x08005604
 8000ef0:	08005608 	.word	0x08005608

08000ef4 <selectChannel>:

void selectChannel(ChannelTypedef channel) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	//ADC config
	ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]

	//Set chanel
	switch(channel) {
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d852      	bhi.n	8000fb8 <selectChannel+0xc4>
 8000f12:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <selectChannel+0x24>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f29 	.word	0x08000f29
 8000f1c:	08000f4d 	.word	0x08000f4d
 8000f20:	08000f71 	.word	0x08000f71
 8000f24:	08000f95 	.word	0x08000f95
	case MUL_CH1:
		//Set ADC channel to multimeter channel 1
		sConfig.Channel = ADC_CHANNEL_0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <selectChannel+0xe0>)
 8000f3c:	f000 ff96 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d03a      	beq.n	8000fbc <selectChannel+0xc8>
		{
			Error_Handler();
 8000f46:	f000 fb2f 	bl	80015a8 <Error_Handler>
		}

		break;
 8000f4a:	e037      	b.n	8000fbc <selectChannel+0xc8>
	case MUL_CH2:
		//Set ADC channel to multimeter channel 2
		sConfig.Channel = ADC_CHANNEL_1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <selectChannel+0xe0>)
 8000f60:	f000 ff84 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d02a      	beq.n	8000fc0 <selectChannel+0xcc>
		{
			Error_Handler();
 8000f6a:	f000 fb1d 	bl	80015a8 <Error_Handler>
		}

		break;
 8000f6e:	e027      	b.n	8000fc0 <selectChannel+0xcc>
	case OSC_CH1:
		//Set ADC channel to oscilloscope channel 1
		sConfig.Channel = ADC_CHANNEL_5;
 8000f70:	2305      	movs	r3, #5
 8000f72:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4619      	mov	r1, r3
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <selectChannel+0xe0>)
 8000f84:	f000 ff72 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d01a      	beq.n	8000fc4 <selectChannel+0xd0>
		{
			Error_Handler();
 8000f8e:	f000 fb0b 	bl	80015a8 <Error_Handler>
		}

		break;
 8000f92:	e017      	b.n	8000fc4 <selectChannel+0xd0>
	case OSC_CH2:
		//Set ADC channel to oscilloscope channel 2
		sConfig.Channel = ADC_CHANNEL_7;
 8000f94:	2307      	movs	r3, #7
 8000f96:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <selectChannel+0xe0>)
 8000fa8:	f000 ff60 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00a      	beq.n	8000fc8 <selectChannel+0xd4>
		{
			Error_Handler();
 8000fb2:	f000 faf9 	bl	80015a8 <Error_Handler>
		}

		break;
 8000fb6:	e007      	b.n	8000fc8 <selectChannel+0xd4>
	default:
		break;
 8000fb8:	bf00      	nop
 8000fba:	e006      	b.n	8000fca <selectChannel+0xd6>
		break;
 8000fbc:	bf00      	nop
 8000fbe:	e004      	b.n	8000fca <selectChannel+0xd6>
		break;
 8000fc0:	bf00      	nop
 8000fc2:	e002      	b.n	8000fca <selectChannel+0xd6>
		break;
 8000fc4:	bf00      	nop
 8000fc6:	e000      	b.n	8000fca <selectChannel+0xd6>
		break;
 8000fc8:	bf00      	nop
	}
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000c4 	.word	0x200000c4

08000fd8 <delayMS>:

void delayMS(uint32_t time) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fd73 	bl	8001acc <HAL_Delay>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fcf7 	bl	80019e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  initDevices();
 8000ffa:	f000 fa63 	bl	80014c4 <initDevices>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffe:	f000 f859 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001002:	f000 f9d9 	bl	80013b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001006:	f000 f9b7 	bl	8001378 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800100a:	f000 f959 	bl	80012c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800100e:	f000 f989 	bl	8001324 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001012:	f000 f8f1 	bl	80011f8 <MX_CRC_Init>
  MX_ADC1_Init();
 8001016:	f000 f8b5 	bl	8001184 <MX_ADC1_Init>
  MX_TIM1_Init();
 800101a:	f000 f901 	bl	8001220 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <main+0x9c>)
 8001020:	f002 fc13 	bl	800384a <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)commandBuffer, 20);
 8001024:	2214      	movs	r2, #20
 8001026:	491a      	ldr	r1, [pc, #104]	; (8001090 <main+0xa0>)
 8001028:	481a      	ldr	r0, [pc, #104]	; (8001094 <main+0xa4>)
 800102a:	f002 ff57 	bl	8003edc <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(commandState == WAITING) {
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <main+0xa8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d106      	bne.n	8001044 <main+0x54>
	  processCMD(commandBuffer);
 8001036:	4816      	ldr	r0, [pc, #88]	; (8001090 <main+0xa0>)
 8001038:	f7ff faf4 	bl	8000624 <processCMD>
	  commandState = FREE;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <main+0xa8>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e7f4      	b.n	800102e <main+0x3e>
	} else if(commandState == FREE) {
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <main+0xa8>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <main+0x3e>
	  runDevice(multimeter_, waveGenerator_, powerSource_, oscilloscopeCh1_, oscilloscopeCh2_, pwmGenerator_);
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <main+0xac>)
 800104e:	4d14      	ldr	r5, [pc, #80]	; (80010a0 <main+0xb0>)
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <main+0xb4>)
 8001052:	920a      	str	r2, [sp, #40]	; 0x28
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <main+0xb8>)
 8001056:	ac07      	add	r4, sp, #28
 8001058:	ca07      	ldmia	r2, {r0, r1, r2}
 800105a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <main+0xbc>)
 8001060:	ac04      	add	r4, sp, #16
 8001062:	ca07      	ldmia	r2, {r0, r1, r2}
 8001064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <main+0xc0>)
 800106a:	ac01      	add	r4, sp, #4
 800106c:	ca07      	ldmia	r2, {r0, r1, r2}
 800106e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001072:	782a      	ldrb	r2, [r5, #0]
 8001074:	7869      	ldrb	r1, [r5, #1]
 8001076:	0209      	lsls	r1, r1, #8
 8001078:	430a      	orrs	r2, r1
 800107a:	2000      	movs	r0, #0
 800107c:	f362 000f 	bfi	r0, r2, #0, #16
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	9200      	str	r2, [sp, #0]
 8001084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001086:	f7ff fdcd 	bl	8000c24 <runDevice>
	if(commandState == WAITING) {
 800108a:	e7d0      	b.n	800102e <main+0x3e>
 800108c:	200001bc 	.word	0x200001bc
 8001090:	2000009c 	.word	0x2000009c
 8001094:	2000016c 	.word	0x2000016c
 8001098:	2000008f 	.word	0x2000008f
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	200001b8 	.word	0x200001b8
 80010a4:	20000258 	.word	0x20000258
 80010a8:	200000b8 	.word	0x200000b8
 80010ac:	200001ac 	.word	0x200001ac
 80010b0:	2000020c 	.word	0x2000020c

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	; 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	; 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 fe7a 	bl	8004dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <SystemClock_Config+0xc8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <SystemClock_Config+0xc8>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <SystemClock_Config+0xc8>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <SystemClock_Config+0xcc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a20      	ldr	r2, [pc, #128]	; (8001180 <SystemClock_Config+0xcc>)
 80010fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <SystemClock_Config+0xcc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001118:	2310      	movs	r3, #16
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001120:	2300      	movs	r3, #0
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001124:	2308      	movs	r3, #8
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001130:	2304      	movs	r3, #4
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f001 ff1f 	bl	8002f7c <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001144:	f000 fa30 	bl	80015a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2103      	movs	r1, #3
 8001164:	4618      	mov	r0, r3
 8001166:	f002 f979 	bl	800345c <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001170:	f000 fa1a 	bl	80015a8 <Error_Handler>
  }
}
 8001174:	bf00      	nop
 8001176:	3750      	adds	r7, #80	; 0x50
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_ADC1_Init+0x68>)
 800118a:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <MX_ADC1_Init+0x6c>)
 800118c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_ADC1_Init+0x68>)
 8001190:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001194:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_ADC1_Init+0x68>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_ADC1_Init+0x68>)
 800119e:	2201      	movs	r2, #1
 80011a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_ADC1_Init+0x68>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_ADC1_Init+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_ADC1_Init+0x68>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_ADC1_Init+0x68>)
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <MX_ADC1_Init+0x70>)
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_ADC1_Init+0x68>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_ADC1_Init+0x68>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_ADC1_Init+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_ADC1_Init+0x68>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_ADC1_Init+0x68>)
 80011d8:	f000 fc9a 	bl	8001b10 <HAL_ADC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80011e2:	f000 f9e1 	bl	80015a8 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000c4 	.word	0x200000c4
 80011f0:	40012000 	.word	0x40012000
 80011f4:	0f000001 	.word	0x0f000001

080011f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_CRC_Init+0x20>)
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <MX_CRC_Init+0x24>)
 8001200:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_CRC_Init+0x20>)
 8001204:	f001 f971 	bl	80024ea <HAL_CRC_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800120e:	f000 f9cb 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000b0 	.word	0x200000b0
 800121c:	40023000 	.word	0x40023000

08001220 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_TIM1_Init+0x98>)
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <MX_TIM1_Init+0x9c>)
 8001240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM1_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM1_Init+0x98>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM1_Init+0x98>)
 8001250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM1_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_TIM1_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_TIM1_Init+0x98>)
 800126a:	f002 fac3 	bl	80037f4 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001274:	f000 f998 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM1_Init+0x98>)
 8001286:	f002 fb04 	bl	8003892 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001290:	f000 f98a 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM1_Init+0x98>)
 80012a2:	f002 fcc7 	bl	8003c34 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012ac:	f000 f97c 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200001bc 	.word	0x200001bc
 80012bc:	40010000 	.word	0x40010000

080012c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <MX_USART1_UART_Init+0x60>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f6:	4809      	ldr	r0, [pc, #36]	; (800131c <MX_USART1_UART_Init+0x5c>)
 80012f8:	f002 fd0a 	bl	8003d10 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f951 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //Enable receive interrupt
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <MX_USART1_UART_Init+0x5c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <MX_USART1_UART_Init+0x5c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0220 	orr.w	r2, r2, #32
 8001314:	60da      	str	r2, [r3, #12]
  //------------------------
  /* USER CODE END USART1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000016c 	.word	0x2000016c
 8001320:	40011000 	.word	0x40011000

08001324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_USART2_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800135c:	f002 fcd8 	bl	8003d10 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f000 f91f 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000218 	.word	0x20000218
 8001374:	40004400 	.word	0x40004400

08001378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_DMA_Init+0x3c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <MX_DMA_Init+0x3c>)
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_DMA_Init+0x3c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 12, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	210c      	movs	r1, #12
 800139e:	203a      	movs	r0, #58	; 0x3a
 80013a0:	f001 f86d 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013a4:	203a      	movs	r0, #58	; 0x3a
 80013a6:	f001 f886 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a30      	ldr	r2, [pc, #192]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a29      	ldr	r2, [pc, #164]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MX_GPIO_Init+0xe0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a22      	ldr	r2, [pc, #136]	; (8001498 <MX_GPIO_Init+0xe0>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <MX_GPIO_Init+0xe0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_GPIO_Init+0xe0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <MX_GPIO_Init+0xe0>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_GPIO_Init+0xe0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	4815      	ldr	r0, [pc, #84]	; (800149c <MX_GPIO_Init+0xe4>)
 8001446:	f001 fd7f 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2102      	movs	r1, #2
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <MX_GPIO_Init+0xe8>)
 8001450:	f001 fd7a 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <MX_GPIO_Init+0xe4>)
 800146e:	f001 fbe9 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001472:	2302      	movs	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_GPIO_Init+0xe8>)
 800148a:	f001 fbdb 	bl	8002c44 <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	commandState = WAITING;
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_UART_RxCpltCallback+0x1c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	2000008f 	.word	0x2000008f

080014c4 <initDevices>:

void initDevices(void) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	multimeter_.source_ = 1;
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <initDevices+0xc8>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	705a      	strb	r2, [r3, #1]
	multimeter_.state_ = STATE_OFF;
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <initDevices+0xc8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]

	waveGenerator_.amplitude_ = 0;
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <initDevices+0xcc>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
	waveGenerator_.period_ = 0;
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <initDevices+0xcc>)
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
	waveGenerator_.source_ = 1;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <initDevices+0xcc>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
	waveGenerator_.state = STATE_OFF;
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <initDevices+0xcc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	705a      	strb	r2, [r3, #1]
	waveGenerator_.wave_ = SINE;
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <initDevices+0xcc>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	709a      	strb	r2, [r3, #2]
	waveGenerator_.isWaiting_ = false;
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <initDevices+0xcc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	731a      	strb	r2, [r3, #12]

	powerSource_.source_ = 1;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <initDevices+0xd0>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
	powerSource_.state_ = STATE_OFF;
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <initDevices+0xd0>)
 8001506:	2200      	movs	r2, #0
 8001508:	705a      	strb	r2, [r3, #1]
	powerSource_.value_ = 0;
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <initDevices+0xd0>)
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
	powerSource_.isWaiting_ = false;
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <initDevices+0xd0>)
 8001514:	2200      	movs	r2, #0
 8001516:	721a      	strb	r2, [r3, #8]

	oscilloscopeCh1_.state_ = STATE_OFF;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <initDevices+0xd4>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
	oscilloscopeCh1_.period_ = 0;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <initDevices+0xd4>)
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
	oscilloscopeCh1_.unit_ = MICRO;
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <initDevices+0xd4>)
 8001528:	2201      	movs	r2, #1
 800152a:	721a      	strb	r2, [r3, #8]

	oscilloscopeCh2_.state_ = STATE_OFF;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <initDevices+0xd8>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
	oscilloscopeCh2_.period_ = 0;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <initDevices+0xd8>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
	oscilloscopeCh2_.unit_ = MICRO;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <initDevices+0xd8>)
 800153c:	2201      	movs	r2, #1
 800153e:	721a      	strb	r2, [r3, #8]

	for(int iter = 0; iter < 5; iter++) {
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	e015      	b.n	8001572 <initDevices+0xae>
		pwmGenerator_[iter].dutyCycle_ = 0;
 8001546:	4916      	ldr	r1, [pc, #88]	; (80015a0 <initDevices+0xdc>)
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3304      	adds	r3, #4
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
		pwmGenerator_[iter].state_ = STATE_OFF;
 800155a:	4911      	ldr	r1, [pc, #68]	; (80015a0 <initDevices+0xdc>)
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
	for(int iter = 0; iter < 5; iter++) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3301      	adds	r3, #1
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b04      	cmp	r3, #4
 8001576:	dde6      	ble.n	8001546 <initDevices+0x82>
	}

	commandState = FREE;
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <initDevices+0xe0>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200001b8 	.word	0x200001b8
 8001590:	200001fc 	.word	0x200001fc
 8001594:	2000020c 	.word	0x2000020c
 8001598:	200001ac 	.word	0x200001ac
 800159c:	200000b8 	.word	0x200000b8
 80015a0:	20000258 	.word	0x20000258
 80015a4:	2000008f 	.word	0x2000008f

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ae:	e7fe      	b.n	80015ae <Error_Handler+0x6>

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_MspInit+0x4c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_ADC_MspInit+0x7c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d127      	bne.n	8001672 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_ADC_MspInit+0x80>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <HAL_ADC_MspInit+0x80>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_ADC_MspInit+0x80>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_ADC_MspInit+0x80>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_ADC_MspInit+0x80>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_ADC_MspInit+0x80>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7;
 800165a:	23a3      	movs	r3, #163	; 0xa3
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165e:	2303      	movs	r3, #3
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_ADC_MspInit+0x84>)
 800166e:	f001 fae9 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40012000 	.word	0x40012000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_CRC_MspInit+0x3c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10d      	bne.n	80016b6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_CRC_MspInit+0x40>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_CRC_MspInit+0x40>)
 80016a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_CRC_MspInit+0x40>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023000 	.word	0x40023000
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_TIM_Base_MspInit+0x3c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10d      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_TIM_Base_MspInit+0x40>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_TIM_Base_MspInit+0x40>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_TIM_Base_MspInit+0x40>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40010000 	.word	0x40010000
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_UART_MspInit+0x158>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d165      	bne.n	80017fe <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	4b4d      	ldr	r3, [pc, #308]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a4c      	ldr	r2, [pc, #304]	; (800186c <HAL_UART_MspInit+0x15c>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b46      	ldr	r3, [pc, #280]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a45      	ldr	r2, [pc, #276]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177c:	2307      	movs	r3, #7
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	483a      	ldr	r0, [pc, #232]	; (8001870 <HAL_UART_MspInit+0x160>)
 8001788:	f001 fa5c 	bl	8002c44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_UART_MspInit+0x164>)
 800178e:	4a3a      	ldr	r2, [pc, #232]	; (8001878 <HAL_UART_MspInit+0x168>)
 8001790:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001792:	4b38      	ldr	r3, [pc, #224]	; (8001874 <HAL_UART_MspInit+0x164>)
 8001794:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001798:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_UART_MspInit+0x164>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a0:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a6:	4b33      	ldr	r3, [pc, #204]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017d0:	4828      	ldr	r0, [pc, #160]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017d2:	f000 fea7 	bl	8002524 <HAL_DMA_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80017dc:	f7ff fee4 	bl	80015a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a24      	ldr	r2, [pc, #144]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <HAL_UART_MspInit+0x164>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2025      	movs	r0, #37	; 0x25
 80017f2:	f000 fe44 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017f6:	2025      	movs	r0, #37	; 0x25
 80017f8:	f000 fe5d 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017fc:	e030      	b.n	8001860 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <HAL_UART_MspInit+0x16c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d12b      	bne.n	8001860 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_UART_MspInit+0x15c>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a16      	ldr	r2, [pc, #88]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_UART_MspInit+0x15c>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_UART_MspInit+0x15c>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_UART_MspInit+0x15c>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6313      	str	r3, [r2, #48]	; 0x30
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_UART_MspInit+0x15c>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001840:	230c      	movs	r3, #12
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001850:	2307      	movs	r3, #7
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_UART_MspInit+0x160>)
 800185c:	f001 f9f2 	bl	8002c44 <HAL_GPIO_Init>
}
 8001860:	bf00      	nop
 8001862:	3730      	adds	r7, #48	; 0x30
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40011000 	.word	0x40011000
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000
 8001874:	2000010c 	.word	0x2000010c
 8001878:	40026440 	.word	0x40026440
 800187c:	40004400 	.word	0x40004400

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f000 f8de 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <USART1_IRQHandler+0x10>)
 80018da:	f002 fb7f 	bl	8003fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000016c 	.word	0x2000016c

080018e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <DMA2_Stream2_IRQHandler+0x10>)
 80018ee:	f000 ff41 	bl	8002774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000010c 	.word	0x2000010c

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f003 fa1c 	bl	8004d68 <__errno>
 8001930:	4602      	mov	r2, r0
 8001932:	230c      	movs	r3, #12
 8001934:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20020000 	.word	0x20020000
 800195c:	00000400 	.word	0x00000400
 8001960:	20000090 	.word	0x20000090
 8001964:	200002a0 	.word	0x200002a0

08001968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <SystemInit+0x28>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <SystemInit+0x28>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SystemInit+0x28>)
 800197e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001982:	609a      	str	r2, [r3, #8]
#endif
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001998:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800199a:	e003      	b.n	80019a4 <LoopCopyDataInit>

0800199c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800199e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019a2:	3104      	adds	r1, #4

080019a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019ac:	d3f6      	bcc.n	800199c <CopyDataInit>
  ldr  r2, =_sbss
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019b0:	e002      	b.n	80019b8 <LoopFillZerobss>

080019b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019b4:	f842 3b04 	str.w	r3, [r2], #4

080019b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019bc:	d3f9      	bcc.n	80019b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019be:	f7ff ffd3 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f003 f9d7 	bl	8004d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff fb13 	bl	8000ff0 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019d0:	08005670 	.word	0x08005670
  ldr  r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80019dc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80019e0:	2000029c 	.word	0x2000029c

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 fd29 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fdc8 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fd41 	bl	80024d2 <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f000 fd09 	bl	800247e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000294 	.word	0x20000294

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000294 	.word	0x20000294

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff ffee 	bl	8001ab4 <HAL_GetTick>
 8001ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_Delay+0x40>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	bf00      	nop
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e033      	b.n	8001b8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fd66 	bl	8001600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b56:	f023 0302 	bic.w	r3, r3, #2
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fab4 	bl	80020d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7e:	e001      	b.n	8001b84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_Start+0x1a>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e08a      	b.n	8001cc8 <HAL_ADC_Start+0x130>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d018      	beq.n	8001bfa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <HAL_ADC_Start+0x13c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3e      	ldr	r2, [pc, #248]	; (8001cd8 <HAL_ADC_Start+0x140>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9a      	lsrs	r2, r3, #18
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d15e      	bne.n	8001cc6 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c46:	d106      	bne.n	8001c56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f023 0206 	bic.w	r2, r3, #6
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
 8001c54:	e002      	b.n	8001c5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_ADC_Start+0x144>)
 8001c66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c70:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11c      	bne.n	8001cc6 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e013      	b.n	8001cc6 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_ADC_Start+0x148>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_ADC_Start+0x12e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d107      	bne.n	8001cc6 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	431bde83 	.word	0x431bde83
 8001cdc:	40012300 	.word	0x40012300
 8001ce0:	40012000 	.word	0x40012000

08001ce4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_Stop+0x16>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e021      	b.n	8001d3e <HAL_ADC_Stop+0x5a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d109      	bne.n	8001d34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d113      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d76:	d10b      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f043 0220 	orr.w	r2, r3, #32
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e05c      	b.n	8001e4a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d90:	f7ff fe90 	bl	8001ab4 <HAL_GetTick>
 8001d94:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d96:	e01a      	b.n	8001dce <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9e:	d016      	beq.n	8001dce <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_ADC_PollForConversion+0x6c>
 8001da6:	f7ff fe85 	bl	8001ab4 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d20b      	bcs.n	8001dce <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f043 0204 	orr.w	r2, r3, #4
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e03d      	b.n	8001e4a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d1dd      	bne.n	8001d98 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0212 	mvn.w	r2, #18
 8001de4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d123      	bne.n	8001e48 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11f      	bne.n	8001e48 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d111      	bne.n	8001e48 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1c>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e113      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x244>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b09      	cmp	r3, #9
 8001e96:	d925      	bls.n	8001ee4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68d9      	ldr	r1, [r3, #12]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1e      	subs	r3, #30
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68d9      	ldr	r1, [r3, #12]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4403      	add	r3, r0
 8001ed6:	3b1e      	subs	r3, #30
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	e022      	b.n	8001f2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	2207      	movs	r2, #7
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6919      	ldr	r1, [r3, #16]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4403      	add	r3, r0
 8001f20:	409a      	lsls	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d824      	bhi.n	8001f7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b05      	subs	r3, #5
 8001f44:	221f      	movs	r2, #31
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	400a      	ands	r2, r1
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b05      	subs	r3, #5
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7a:	e04c      	b.n	8002016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d824      	bhi.n	8001fce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	3b23      	subs	r3, #35	; 0x23
 8001f96:	221f      	movs	r2, #31
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b23      	subs	r3, #35	; 0x23
 8001fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
 8001fcc:	e023      	b.n	8002016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b41      	subs	r3, #65	; 0x41
 8001fe0:	221f      	movs	r2, #31
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	400a      	ands	r2, r1
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	3b41      	subs	r3, #65	; 0x41
 800200a:	fa00 f203 	lsl.w	r2, r0, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_ADC_ConfigChannel+0x250>)
 8002018:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_ADC_ConfigChannel+0x254>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d10f      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1d8>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b12      	cmp	r3, #18
 800202a:	d10b      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_ADC_ConfigChannel+0x254>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12b      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x23a>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_ADC_ConfigChannel+0x258>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d003      	beq.n	8002060 <HAL_ADC_ConfigChannel+0x1f4>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b11      	cmp	r3, #17
 800205e:	d122      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_ADC_ConfigChannel+0x258>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d111      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_ADC_ConfigChannel+0x260>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	0c9a      	lsrs	r2, r3, #18
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002098:	e002      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3b01      	subs	r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f9      	bne.n	800209a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40012300 	.word	0x40012300
 80020c0:	40012000 	.word	0x40012000
 80020c4:	10000012 	.word	0x10000012
 80020c8:	20000000 	.word	0x20000000
 80020cc:	431bde83 	.word	0x431bde83

080020d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d8:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <ADC_Init+0x1f0>)
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	021a      	lsls	r2, r3, #8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <ADC_Init+0x1f4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d022      	beq.n	80021ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002176:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e00f      	b.n	80021ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0202 	bic.w	r2, r2, #2
 80021dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7e1b      	ldrb	r3, [r3, #24]
 80021e8:	005a      	lsls	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01b      	beq.n	8002234 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800220a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800221a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	3b01      	subs	r3, #1
 8002228:	035a      	lsls	r2, r3, #13
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	e007      	b.n	8002244 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002242:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	3b01      	subs	r3, #1
 8002260:	051a      	lsls	r2, r3, #20
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6899      	ldr	r1, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002286:	025a      	lsls	r2, r3, #9
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	029a      	lsls	r2, r3, #10
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40012300 	.word	0x40012300
 80022c4:	0f000001 	.word	0x0f000001

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff8e 	bl	8002368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff29 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff3e 	bl	8002310 <__NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff8e 	bl	80023bc <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5d 	bl	8002368 <__NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff31 	bl	800232c <__NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e00e      	b.n	800251a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	795b      	ldrb	r3, [r3, #5]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff f8bb 	bl	8001688 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff fac0 	bl	8001ab4 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e099      	b.n	8002674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002560:	e00f      	b.n	8002582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002562:	f7ff faa7 	bl	8001ab4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b05      	cmp	r3, #5
 800256e:	d908      	bls.n	8002582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2203      	movs	r2, #3
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e078      	b.n	8002674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1e8      	bne.n	8002562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <HAL_DMA_Init+0x158>)
 800259c:	4013      	ands	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d107      	bne.n	80025ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	4313      	orrs	r3, r2
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f023 0307 	bic.w	r3, r3, #7
 8002602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b04      	cmp	r3, #4
 8002614:	d117      	bne.n	8002646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00e      	beq.n	8002646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fa91 	bl	8002b50 <DMA_CheckFifoParam>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002642:	2301      	movs	r3, #1
 8002644:	e016      	b.n	8002674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa48 	bl	8002ae4 <DMA_CalcBaseAndBitshift>
 8002654:	4603      	mov	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	223f      	movs	r2, #63	; 0x3f
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	f010803f 	.word	0xf010803f

08002680 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Start_IT+0x26>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e040      	b.n	8002728 <HAL_DMA_Start_IT+0xa8>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d12f      	bne.n	800271a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f9da 	bl	8002a88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	223f      	movs	r2, #63	; 0x3f
 80026da:	409a      	lsls	r2, r3
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0216 	orr.w	r2, r2, #22
 80026ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0208 	orr.w	r2, r2, #8
 8002706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e005      	b.n	8002726 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002722:	2302      	movs	r3, #2
 8002724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002726:	7dfb      	ldrb	r3, [r7, #23]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d004      	beq.n	800274e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00c      	b.n	8002768 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2205      	movs	r2, #5
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002780:	4b92      	ldr	r3, [pc, #584]	; (80029cc <HAL_DMA_IRQHandler+0x258>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a92      	ldr	r2, [pc, #584]	; (80029d0 <HAL_DMA_IRQHandler+0x25c>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0a9b      	lsrs	r3, r3, #10
 800278c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	2208      	movs	r2, #8
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01a      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0204 	bic.w	r2, r2, #4
 80027c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2208      	movs	r2, #8
 80027ce:	409a      	lsls	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2201      	movs	r2, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d012      	beq.n	8002816 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2201      	movs	r2, #1
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f043 0202 	orr.w	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	2204      	movs	r2, #4
 800281c:	409a      	lsls	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2204      	movs	r2, #4
 800283a:	409a      	lsls	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0204 	orr.w	r2, r3, #4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2210      	movs	r2, #16
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d043      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03c      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	2210      	movs	r2, #16
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d018      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d108      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d024      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
 80028a2:	e01f      	b.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
 80028b4:	e016      	b.n	80028e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d107      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0208 	bic.w	r2, r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	2220      	movs	r2, #32
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 808e 	beq.w	8002a12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8086 	beq.w	8002a12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2220      	movs	r2, #32
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b05      	cmp	r3, #5
 800291c:	d136      	bne.n	800298c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0216 	bic.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_DMA_IRQHandler+0x1da>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0208 	bic.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	223f      	movs	r2, #63	; 0x3f
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	2b00      	cmp	r3, #0
 8002980:	d07d      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
        }
        return;
 800298a:	e078      	b.n	8002a7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01c      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d030      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e02b      	b.n	8002a12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d027      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
 80029ca:	e022      	b.n	8002a12 <HAL_DMA_IRQHandler+0x29e>
 80029cc:	20000000 	.word	0x20000000
 80029d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0210 	bic.w	r2, r2, #16
 80029f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d032      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d022      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2205      	movs	r2, #5
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3301      	adds	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d307      	bcc.n	8002a5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f2      	bne.n	8002a3e <HAL_DMA_IRQHandler+0x2ca>
 8002a58:	e000      	b.n	8002a5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a5a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	e000      	b.n	8002a80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a7e:	bf00      	nop
    }
  }
}
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop

08002a88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	d108      	bne.n	8002ac8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ac6:	e007      	b.n	8002ad8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	60da      	str	r2, [r3, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3b10      	subs	r3, #16
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <DMA_CalcBaseAndBitshift+0x64>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <DMA_CalcBaseAndBitshift+0x68>)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d909      	bls.n	8002b26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b1a:	f023 0303 	bic.w	r3, r3, #3
 8002b1e:	1d1a      	adds	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58
 8002b24:	e007      	b.n	8002b36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	aaaaaaab 	.word	0xaaaaaaab
 8002b4c:	08005624 	.word	0x08005624

08002b50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11f      	bne.n	8002baa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d855      	bhi.n	8002c1c <DMA_CheckFifoParam+0xcc>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <DMA_CheckFifoParam+0x28>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b9b 	.word	0x08002b9b
 8002b80:	08002b89 	.word	0x08002b89
 8002b84:	08002c1d 	.word	0x08002c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d045      	beq.n	8002c20 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b98:	e042      	b.n	8002c20 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba2:	d13f      	bne.n	8002c24 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba8:	e03c      	b.n	8002c24 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb2:	d121      	bne.n	8002bf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d836      	bhi.n	8002c28 <DMA_CheckFifoParam+0xd8>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <DMA_CheckFifoParam+0x70>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002bd7 	.word	0x08002bd7
 8002bc8:	08002bd1 	.word	0x08002bd1
 8002bcc:	08002be9 	.word	0x08002be9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e02f      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d024      	beq.n	8002c2c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be6:	e021      	b.n	8002c2c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf0:	d11e      	bne.n	8002c30 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bf6:	e01b      	b.n	8002c30 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d902      	bls.n	8002c04 <DMA_CheckFifoParam+0xb4>
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d003      	beq.n	8002c0a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c02:	e018      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;
 8002c08:	e015      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00e      	beq.n	8002c34 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1a:	e00b      	b.n	8002c34 <DMA_CheckFifoParam+0xe4>
      break;
 8002c1c:	bf00      	nop
 8002c1e:	e00a      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      break;
 8002c20:	bf00      	nop
 8002c22:	e008      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      break;
 8002c24:	bf00      	nop
 8002c26:	e006      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      break;
 8002c28:	bf00      	nop
 8002c2a:	e004      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      break;
 8002c2c:	bf00      	nop
 8002c2e:	e002      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c30:	bf00      	nop
 8002c32:	e000      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      break;
 8002c34:	bf00      	nop
    }
  } 
  
  return status; 
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e159      	b.n	8002f14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f040 8148 	bne.w	8002f0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d00b      	beq.n	8002c9e <HAL_GPIO_Init+0x5a>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d007      	beq.n	8002c9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c92:	2b11      	cmp	r3, #17
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b12      	cmp	r3, #18
 8002c9c:	d130      	bne.n	8002d00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 0201 	and.w	r2, r3, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0xfc>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b12      	cmp	r3, #18
 8002d3e:	d123      	bne.n	8002d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	08da      	lsrs	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3208      	adds	r2, #8
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a2 	beq.w	8002f0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <HAL_GPIO_Init+0x2e4>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a55      	ldr	r2, [pc, #340]	; (8002f28 <HAL_GPIO_Init+0x2e4>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_GPIO_Init+0x2e4>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de6:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a48      	ldr	r2, [pc, #288]	; (8002f30 <HAL_GPIO_Init+0x2ec>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0x202>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <HAL_GPIO_Init+0x2f0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0x1fe>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a46      	ldr	r2, [pc, #280]	; (8002f38 <HAL_GPIO_Init+0x2f4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a45      	ldr	r2, [pc, #276]	; (8002f3c <HAL_GPIO_Init+0x2f8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x1f6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a44      	ldr	r2, [pc, #272]	; (8002f40 <HAL_GPIO_Init+0x2fc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_GPIO_Init+0x1f2>
 8002e32:	2304      	movs	r3, #4
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e36:	2307      	movs	r3, #7
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e58:	4934      	ldr	r1, [pc, #208]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8a:	4a2e      	ldr	r2, [pc, #184]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e90:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb4:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee4:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f08:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f aea2 	bls.w	8002c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	3724      	adds	r7, #36	; 0x24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40013c00 	.word	0x40013c00

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e25b      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d075      	beq.n	8003086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9a:	4ba3      	ldr	r3, [pc, #652]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa6:	4ba0      	ldr	r3, [pc, #640]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d112      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb2:	4b9d      	ldr	r3, [pc, #628]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	4b99      	ldr	r3, [pc, #612]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d05b      	beq.n	8003084 <HAL_RCC_OscConfig+0x108>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d157      	bne.n	8003084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e236      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d106      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x74>
 8002fe2:	4b91      	ldr	r3, [pc, #580]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a90      	ldr	r2, [pc, #576]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e01d      	b.n	800302c <HAL_RCC_OscConfig+0xb0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x98>
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a8a      	ldr	r2, [pc, #552]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a87      	ldr	r2, [pc, #540]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xb0>
 8003014:	4b84      	ldr	r3, [pc, #528]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a83      	ldr	r2, [pc, #524]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b81      	ldr	r3, [pc, #516]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a80      	ldr	r2, [pc, #512]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe fd3e 	bl	8001ab4 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800303c:	f7fe fd3a 	bl	8001ab4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e1fb      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0xc0>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe fd2a 	bl	8001ab4 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe fd26 	bl	8001ab4 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1e7      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0xe8>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d063      	beq.n	800315a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x152>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e1bb      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4952      	ldr	r1, [pc, #328]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e03a      	b.n	800315a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b4f      	ldr	r3, [pc, #316]	; (800322c <HAL_RCC_OscConfig+0x2b0>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fcdf 	bl	8001ab4 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe fcdb 	bl	8001ab4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e19c      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4940      	ldr	r1, [pc, #256]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
 800312c:	e015      	b.n	800315a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_OscConfig+0x2b0>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fcbe 	bl	8001ab4 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313c:	f7fe fcba 	bl	8001ab4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e17b      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d030      	beq.n	80031c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b30      	ldr	r3, [pc, #192]	; (8003230 <HAL_RCC_OscConfig+0x2b4>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fc9e 	bl	8001ab4 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe fc9a 	bl	8001ab4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e15b      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x200>
 800319a:	e015      	b.n	80031c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_OscConfig+0x2b4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fe fc87 	bl	8001ab4 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fe fc83 	bl	8001ab4 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e144      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80a0 	beq.w	8003316 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d121      	bne.n	8003256 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321e:	f7fe fc49 	bl	8001ab4 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	e011      	b.n	800324a <HAL_RCC_OscConfig+0x2ce>
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	42470000 	.word	0x42470000
 8003230:	42470e80 	.word	0x42470e80
 8003234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003238:	f7fe fc3c 	bl	8001ab4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0fd      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b81      	ldr	r3, [pc, #516]	; (8003450 <HAL_RCC_OscConfig+0x4d4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x2f0>
 800325e:	4b7d      	ldr	r3, [pc, #500]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a7c      	ldr	r2, [pc, #496]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	e01c      	b.n	80032a6 <HAL_RCC_OscConfig+0x32a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d10c      	bne.n	800328e <HAL_RCC_OscConfig+0x312>
 8003274:	4b77      	ldr	r3, [pc, #476]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a76      	ldr	r2, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	4b74      	ldr	r3, [pc, #464]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a73      	ldr	r2, [pc, #460]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	e00b      	b.n	80032a6 <HAL_RCC_OscConfig+0x32a>
 800328e:	4b71      	ldr	r3, [pc, #452]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a70      	ldr	r2, [pc, #448]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	4b6e      	ldr	r3, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a6d      	ldr	r2, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d015      	beq.n	80032da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fe fc01 	bl	8001ab4 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fe fbfd 	bl	8001ab4 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0bc      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032cc:	4b61      	ldr	r3, [pc, #388]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ee      	beq.n	80032b6 <HAL_RCC_OscConfig+0x33a>
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe fbeb 	bl	8001ab4 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe fbe7 	bl	8001ab4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0a6      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f8:	4b56      	ldr	r3, [pc, #344]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ee      	bne.n	80032e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330a:	4b52      	ldr	r3, [pc, #328]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a51      	ldr	r2, [pc, #324]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8092 	beq.w	8003444 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003320:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b08      	cmp	r3, #8
 800332a:	d05c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d141      	bne.n	80033b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003334:	4b48      	ldr	r3, [pc, #288]	; (8003458 <HAL_RCC_OscConfig+0x4dc>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe fbbb 	bl	8001ab4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe fbb7 	bl	8001ab4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e078      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003354:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	019b      	lsls	r3, r3, #6
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4933      	ldr	r1, [pc, #204]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_OscConfig+0x4dc>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe fb90 	bl	8001ab4 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe fb8c 	bl	8001ab4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04d      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x41c>
 80033b6:	e045      	b.n	8003444 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x4dc>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe fb79 	bl	8001ab4 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fe fb75 	bl	8001ab4 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e036      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d8:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x44a>
 80033e4:	e02e      	b.n	8003444 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e029      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	429a      	cmp	r2, r3
 8003404:	d11c      	bne.n	8003440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d115      	bne.n	8003440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800341a:	4013      	ands	r3, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003420:	4293      	cmp	r3, r2
 8003422:	d10d      	bne.n	8003440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40007000 	.word	0x40007000
 8003454:	40023800 	.word	0x40023800
 8003458:	42470060 	.word	0x42470060

0800345c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0cc      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b68      	ldr	r3, [pc, #416]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d90c      	bls.n	8003498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b65      	ldr	r3, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d044      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d119      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d003      	beq.n	800351a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003516:	2b03      	cmp	r3, #3
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e06f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e067      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4934      	ldr	r1, [pc, #208]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7fe fab2 	bl	8001ab4 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fe faae 	bl	8001ab4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e04f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d20c      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f821 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035e6:	4601      	mov	r1, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	fa21 f303 	lsr.w	r3, r1, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fa12 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023c00 	.word	0x40023c00
 8003618:	40023800 	.word	0x40023800
 800361c:	0800560c 	.word	0x0800560c
 8003620:	20000000 	.word	0x20000000
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	2300      	movs	r3, #0
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363e:	4b50      	ldr	r3, [pc, #320]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b04      	cmp	r3, #4
 8003648:	d007      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x32>
 800364a:	2b08      	cmp	r3, #8
 800364c:	d008      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x38>
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 808d 	bne.w	800376e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003656:	60bb      	str	r3, [r7, #8]
       break;
 8003658:	e08c      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365a:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_RCC_GetSysClockFreq+0x160>)
 800365c:	60bb      	str	r3, [r7, #8]
      break;
 800365e:	e089      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003660:	4b47      	ldr	r3, [pc, #284]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003668:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366a:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d023      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003676:	4b42      	ldr	r3, [pc, #264]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	f04f 0400 	mov.w	r4, #0
 8003680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	ea03 0501 	and.w	r5, r3, r1
 800368c:	ea04 0602 	and.w	r6, r4, r2
 8003690:	4a3d      	ldr	r2, [pc, #244]	; (8003788 <HAL_RCC_GetSysClockFreq+0x160>)
 8003692:	fb02 f106 	mul.w	r1, r2, r6
 8003696:	2200      	movs	r2, #0
 8003698:	fb02 f205 	mul.w	r2, r2, r5
 800369c:	440a      	add	r2, r1
 800369e:	493a      	ldr	r1, [pc, #232]	; (8003788 <HAL_RCC_GetSysClockFreq+0x160>)
 80036a0:	fba5 0101 	umull	r0, r1, r5, r1
 80036a4:	1853      	adds	r3, r2, r1
 80036a6:	4619      	mov	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f04f 0400 	mov.w	r4, #0
 80036ae:	461a      	mov	r2, r3
 80036b0:	4623      	mov	r3, r4
 80036b2:	f7fc fded 	bl	8000290 <__aeabi_uldivmod>
 80036b6:	4603      	mov	r3, r0
 80036b8:	460c      	mov	r4, r1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	e049      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b30      	ldr	r3, [pc, #192]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	f04f 0400 	mov.w	r4, #0
 80036c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	ea03 0501 	and.w	r5, r3, r1
 80036d4:	ea04 0602 	and.w	r6, r4, r2
 80036d8:	4629      	mov	r1, r5
 80036da:	4632      	mov	r2, r6
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	f04f 0400 	mov.w	r4, #0
 80036e4:	0154      	lsls	r4, r2, #5
 80036e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ea:	014b      	lsls	r3, r1, #5
 80036ec:	4619      	mov	r1, r3
 80036ee:	4622      	mov	r2, r4
 80036f0:	1b49      	subs	r1, r1, r5
 80036f2:	eb62 0206 	sbc.w	r2, r2, r6
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	f04f 0400 	mov.w	r4, #0
 80036fe:	0194      	lsls	r4, r2, #6
 8003700:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003704:	018b      	lsls	r3, r1, #6
 8003706:	1a5b      	subs	r3, r3, r1
 8003708:	eb64 0402 	sbc.w	r4, r4, r2
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	00e2      	lsls	r2, r4, #3
 8003716:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800371a:	00d9      	lsls	r1, r3, #3
 800371c:	460b      	mov	r3, r1
 800371e:	4614      	mov	r4, r2
 8003720:	195b      	adds	r3, r3, r5
 8003722:	eb44 0406 	adc.w	r4, r4, r6
 8003726:	f04f 0100 	mov.w	r1, #0
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	02a2      	lsls	r2, r4, #10
 8003730:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003734:	0299      	lsls	r1, r3, #10
 8003736:	460b      	mov	r3, r1
 8003738:	4614      	mov	r4, r2
 800373a:	4618      	mov	r0, r3
 800373c:	4621      	mov	r1, r4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f04f 0400 	mov.w	r4, #0
 8003744:	461a      	mov	r2, r3
 8003746:	4623      	mov	r3, r4
 8003748:	f7fc fda2 	bl	8000290 <__aeabi_uldivmod>
 800374c:	4603      	mov	r3, r0
 800374e:	460c      	mov	r4, r1
 8003750:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	3301      	adds	r3, #1
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	fbb2 f3f3 	udiv	r3, r2, r3
 800376a:	60bb      	str	r3, [r7, #8]
      break;
 800376c:	e002      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003770:	60bb      	str	r3, [r7, #8]
      break;
 8003772:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003774:	68bb      	ldr	r3, [r7, #8]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	00f42400 	.word	0x00f42400
 8003788:	017d7840 	.word	0x017d7840

0800378c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000000 	.word	0x20000000

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037a8:	f7ff fff0 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037ac:	4601      	mov	r1, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0a9b      	lsrs	r3, r3, #10
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4a03      	ldr	r2, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	0800561c 	.word	0x0800561c

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d0:	f7ff ffdc 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037d4:	4601      	mov	r1, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0b5b      	lsrs	r3, r3, #13
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	0800561c 	.word	0x0800561c

080037f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e01d      	b.n	8003842 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd ff56 	bl	80016cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 f8e4 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b06      	cmp	r3, #6
 800386a:	d007      	beq.n	800387c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_ConfigClockSource+0x18>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0a6      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x166>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d067      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x120>
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d80b      	bhi.n	80038fe <HAL_TIM_ConfigClockSource+0x6c>
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d073      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x140>
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d802      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x62>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d06f      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038f2:	e078      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d06c      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x140>
 80038f8:	2b30      	cmp	r3, #48	; 0x30
 80038fa:	d06a      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038fc:	e073      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038fe:	2b70      	cmp	r3, #112	; 0x70
 8003900:	d00d      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x8c>
 8003902:	2b70      	cmp	r3, #112	; 0x70
 8003904:	d804      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x7e>
 8003906:	2b50      	cmp	r3, #80	; 0x50
 8003908:	d033      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0xe0>
 800390a:	2b60      	cmp	r3, #96	; 0x60
 800390c:	d041      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800390e:	e06a      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	d066      	beq.n	80039e4 <HAL_TIM_ConfigClockSource+0x152>
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	d017      	beq.n	800394c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800391c:	e063      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f000 f961 	bl	8003bf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003940:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
      break;
 800394a:	e04c      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6899      	ldr	r1, [r3, #8]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f000 f94a 	bl	8003bf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800396e:	609a      	str	r2, [r3, #8]
      break;
 8003970:	e039      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	461a      	mov	r2, r3
 8003980:	f000 f8be 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2150      	movs	r1, #80	; 0x50
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f917 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003990:	e029      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	461a      	mov	r2, r3
 80039a0:	f000 f8dd 	bl	8003b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2160      	movs	r1, #96	; 0x60
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f907 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80039b0:	e019      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	461a      	mov	r2, r3
 80039c0:	f000 f89e 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2140      	movs	r1, #64	; 0x40
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f8f7 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80039d0:	e009      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f000 f8ee 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80039e2:	e000      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80039e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a34      	ldr	r2, [pc, #208]	; (8003ae4 <TIM_Base_SetConfig+0xe4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a31      	ldr	r2, [pc, #196]	; (8003ae8 <TIM_Base_SetConfig+0xe8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a30      	ldr	r2, [pc, #192]	; (8003aec <TIM_Base_SetConfig+0xec>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <TIM_Base_SetConfig+0xf0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <TIM_Base_SetConfig+0xe4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01b      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d017      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <TIM_Base_SetConfig+0xe8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a21      	ldr	r2, [pc, #132]	; (8003aec <TIM_Base_SetConfig+0xec>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00f      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <TIM_Base_SetConfig+0xf0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00b      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <TIM_Base_SetConfig+0xf4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <TIM_Base_SetConfig+0xf8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <TIM_Base_SetConfig+0xfc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d108      	bne.n	8003a9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <TIM_Base_SetConfig+0xe4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d103      	bne.n	8003ad0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	615a      	str	r2, [r3, #20]
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 0307 	orr.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e050      	b.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d018      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d013      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a18      	ldr	r2, [pc, #96]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10c      	bne.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40014000 	.word	0x40014000

08003d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e03f      	b.n	8003da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fcea 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	; 0x24
 8003d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fc8b 	bl	8004670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b088      	sub	sp, #32
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	f040 8083 	bne.w	8003ed2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Transmit+0x2e>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e07b      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Transmit+0x40>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e074      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2221      	movs	r2, #33	; 0x21
 8003dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e00:	f7fd fe58 	bl	8001ab4 <HAL_GetTick>
 8003e04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e1a:	e042      	b.n	8003ea2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e32:	d122      	bne.n	8003e7a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fa94 	bl	800436c <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e042      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e60:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	e017      	b.n	8003ea2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	e013      	b.n	8003ea2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fa71 	bl	800436c <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e01f      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	60ba      	str	r2, [r7, #8]
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1b7      	bne.n	8003e1c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2140      	movs	r1, #64	; 0x40
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fa58 	bl	800436c <UART_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d166      	bne.n	8003fc4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Receive_DMA+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e05f      	b.n	8003fc6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Receive_DMA+0x38>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e058      	b.n	8003fc6 <HAL_UART_Receive_DMA+0xea>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2222      	movs	r2, #34	; 0x22
 8003f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3a:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <HAL_UART_Receive_DMA+0xf4>)
 8003f3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <HAL_UART_Receive_DMA+0xf8>)
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_UART_Receive_DMA+0xfc>)
 8003f4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	2200      	movs	r2, #0
 8003f54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	f7fe fb87 	bl	8002680 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fbe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	08004255 	.word	0x08004255
 8003fd4:	080042bd 	.word	0x080042bd
 8003fd8:	080042d9 	.word	0x080042d9

08003fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_UART_IRQHandler+0x52>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 faa0 	bl	800456c <UART_Receive_IT>
      return;
 800402c:	e0d1      	b.n	80041d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80b0 	beq.w	8004196 <HAL_UART_IRQHandler+0x1ba>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <HAL_UART_IRQHandler+0x70>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a5 	beq.w	8004196 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_UART_IRQHandler+0x90>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	f043 0201 	orr.w	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_UART_IRQHandler+0xb0>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	f043 0202 	orr.w	r2, r3, #2
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_UART_IRQHandler+0xd0>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	f043 0204 	orr.w	r2, r3, #4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00f      	beq.n	80040d6 <HAL_UART_IRQHandler+0xfa>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <HAL_UART_IRQHandler+0xee>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	f043 0208 	orr.w	r2, r3, #8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d078      	beq.n	80041d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_UART_IRQHandler+0x11c>
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fa3a 	bl	800456c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_UART_IRQHandler+0x144>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d031      	beq.n	8004184 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f983 	bl	800442c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d123      	bne.n	800417c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004142:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <HAL_UART_IRQHandler+0x1fc>)
 8004152:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fae9 	bl	8002730 <HAL_DMA_Abort_IT>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d016      	beq.n	8004192 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800416e:	4610      	mov	r0, r2
 8004170:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004172:	e00e      	b.n	8004192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f845 	bl	8004204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417a:	e00a      	b.n	8004192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f841 	bl	8004204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004182:	e006      	b.n	8004192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f83d 	bl	8004204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004190:	e01e      	b.n	80041d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004192:	bf00      	nop
    return;
 8004194:	e01c      	b.n	80041d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_UART_IRQHandler+0x1d6>
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f970 	bl	8004490 <UART_Transmit_IT>
    return;
 80041b0:	e00f      	b.n	80041d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1f6>
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9b8 	bl	800453c <UART_EndTransmit_IT>
    return;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80041d0:	bf00      	nop
  }
}
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	08004469 	.word	0x08004469

080041dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800422e:	b2db      	uxtb	r3, r3
 8004230:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004238:	b2db      	uxtb	r3, r3
 800423a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	4313      	orrs	r3, r2
 8004246:	b2db      	uxtb	r3, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11e      	bne.n	80042ae <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004284:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7fd f8f8 	bl	80014a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff ff90 	bl	80041f0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b21      	cmp	r3, #33	; 0x21
 800430a:	d108      	bne.n	800431e <UART_DMAError+0x46>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004318:	68b8      	ldr	r0, [r7, #8]
 800431a:	f000 f871 	bl	8004400 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b22      	cmp	r3, #34	; 0x22
 800433e:	d108      	bne.n	8004352 <UART_DMAError+0x7a>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2200      	movs	r2, #0
 800434a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800434c:	68b8      	ldr	r0, [r7, #8]
 800434e:	f000 f86d 	bl	800442c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	f043 0210 	orr.w	r2, r3, #16
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800435e:	68b8      	ldr	r0, [r7, #8]
 8004360:	f7ff ff50 	bl	8004204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437c:	e02c      	b.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d028      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <UART_WaitOnFlagUntilTimeout+0x30>
 800438c:	f7fd fb92 	bl	8001ab4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	429a      	cmp	r2, r3
 800439a:	d21d      	bcs.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e00f      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d0c3      	beq.n	800437e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004416:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004442:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff febe 	bl	8004204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b21      	cmp	r3, #33	; 0x21
 80044a2:	d144      	bne.n	800452e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ac:	d11a      	bne.n	80044e4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	1c9a      	adds	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	621a      	str	r2, [r3, #32]
 80044d6:	e00e      	b.n	80044f6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]
 80044e2:	e008      	b.n	80044f6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6211      	str	r1, [r2, #32]
 80044ee:	781a      	ldrb	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29b      	uxth	r3, r3
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4619      	mov	r1, r3
 8004504:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004518:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004528:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004552:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fe3d 	bl	80041dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b22      	cmp	r3, #34	; 0x22
 800457e:	d171      	bne.n	8004664 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004588:	d123      	bne.n	80045d2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10e      	bne.n	80045b6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	1c9a      	adds	r2, r3, #2
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
 80045b4:	e029      	b.n	800460a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
 80045d0:	e01b      	b.n	800460a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6858      	ldr	r0, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	1c59      	adds	r1, r3, #1
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6291      	str	r1, [r2, #40]	; 0x28
 80045ea:	b2c2      	uxtb	r2, r0
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e00c      	b.n	800460a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	1c58      	adds	r0, r3, #1
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	6288      	str	r0, [r1, #40]	; 0x28
 8004602:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29b      	uxth	r3, r3
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4619      	mov	r1, r3
 8004618:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800461a:	2b00      	cmp	r3, #0
 800461c:	d120      	bne.n	8004660 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0220 	bic.w	r2, r2, #32
 800462c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800463c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc ff24 	bl	80014a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e002      	b.n	8004666 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80046b2:	f023 030c 	bic.w	r3, r3, #12
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	430b      	orrs	r3, r1
 80046be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046de:	f040 818b 	bne.w	80049f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4ac1      	ldr	r2, [pc, #772]	; (80049ec <UART_SetConfig+0x37c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d005      	beq.n	80046f8 <UART_SetConfig+0x88>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4abf      	ldr	r2, [pc, #764]	; (80049f0 <UART_SetConfig+0x380>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	f040 80bd 	bne.w	8004872 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7ff f868 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 80046fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	461d      	mov	r5, r3
 8004702:	f04f 0600 	mov.w	r6, #0
 8004706:	46a8      	mov	r8, r5
 8004708:	46b1      	mov	r9, r6
 800470a:	eb18 0308 	adds.w	r3, r8, r8
 800470e:	eb49 0409 	adc.w	r4, r9, r9
 8004712:	4698      	mov	r8, r3
 8004714:	46a1      	mov	r9, r4
 8004716:	eb18 0805 	adds.w	r8, r8, r5
 800471a:	eb49 0906 	adc.w	r9, r9, r6
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800472a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800472e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004732:	4688      	mov	r8, r1
 8004734:	4691      	mov	r9, r2
 8004736:	eb18 0005 	adds.w	r0, r8, r5
 800473a:	eb49 0106 	adc.w	r1, r9, r6
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	461d      	mov	r5, r3
 8004744:	f04f 0600 	mov.w	r6, #0
 8004748:	196b      	adds	r3, r5, r5
 800474a:	eb46 0406 	adc.w	r4, r6, r6
 800474e:	461a      	mov	r2, r3
 8004750:	4623      	mov	r3, r4
 8004752:	f7fb fd9d 	bl	8000290 <__aeabi_uldivmod>
 8004756:	4603      	mov	r3, r0
 8004758:	460c      	mov	r4, r1
 800475a:	461a      	mov	r2, r3
 800475c:	4ba5      	ldr	r3, [pc, #660]	; (80049f4 <UART_SetConfig+0x384>)
 800475e:	fba3 2302 	umull	r2, r3, r3, r2
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	461d      	mov	r5, r3
 800476c:	f04f 0600 	mov.w	r6, #0
 8004770:	46a9      	mov	r9, r5
 8004772:	46b2      	mov	sl, r6
 8004774:	eb19 0309 	adds.w	r3, r9, r9
 8004778:	eb4a 040a 	adc.w	r4, sl, sl
 800477c:	4699      	mov	r9, r3
 800477e:	46a2      	mov	sl, r4
 8004780:	eb19 0905 	adds.w	r9, r9, r5
 8004784:	eb4a 0a06 	adc.w	sl, sl, r6
 8004788:	f04f 0100 	mov.w	r1, #0
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004794:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004798:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800479c:	4689      	mov	r9, r1
 800479e:	4692      	mov	sl, r2
 80047a0:	eb19 0005 	adds.w	r0, r9, r5
 80047a4:	eb4a 0106 	adc.w	r1, sl, r6
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	461d      	mov	r5, r3
 80047ae:	f04f 0600 	mov.w	r6, #0
 80047b2:	196b      	adds	r3, r5, r5
 80047b4:	eb46 0406 	adc.w	r4, r6, r6
 80047b8:	461a      	mov	r2, r3
 80047ba:	4623      	mov	r3, r4
 80047bc:	f7fb fd68 	bl	8000290 <__aeabi_uldivmod>
 80047c0:	4603      	mov	r3, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b8b      	ldr	r3, [pc, #556]	; (80049f4 <UART_SetConfig+0x384>)
 80047c8:	fba3 1302 	umull	r1, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	2164      	movs	r1, #100	; 0x64
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	3332      	adds	r3, #50	; 0x32
 80047da:	4a86      	ldr	r2, [pc, #536]	; (80049f4 <UART_SetConfig+0x384>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047e8:	4498      	add	r8, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	461d      	mov	r5, r3
 80047ee:	f04f 0600 	mov.w	r6, #0
 80047f2:	46a9      	mov	r9, r5
 80047f4:	46b2      	mov	sl, r6
 80047f6:	eb19 0309 	adds.w	r3, r9, r9
 80047fa:	eb4a 040a 	adc.w	r4, sl, sl
 80047fe:	4699      	mov	r9, r3
 8004800:	46a2      	mov	sl, r4
 8004802:	eb19 0905 	adds.w	r9, r9, r5
 8004806:	eb4a 0a06 	adc.w	sl, sl, r6
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004816:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800481a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800481e:	4689      	mov	r9, r1
 8004820:	4692      	mov	sl, r2
 8004822:	eb19 0005 	adds.w	r0, r9, r5
 8004826:	eb4a 0106 	adc.w	r1, sl, r6
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	461d      	mov	r5, r3
 8004830:	f04f 0600 	mov.w	r6, #0
 8004834:	196b      	adds	r3, r5, r5
 8004836:	eb46 0406 	adc.w	r4, r6, r6
 800483a:	461a      	mov	r2, r3
 800483c:	4623      	mov	r3, r4
 800483e:	f7fb fd27 	bl	8000290 <__aeabi_uldivmod>
 8004842:	4603      	mov	r3, r0
 8004844:	460c      	mov	r4, r1
 8004846:	461a      	mov	r2, r3
 8004848:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <UART_SetConfig+0x384>)
 800484a:	fba3 1302 	umull	r1, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2164      	movs	r1, #100	; 0x64
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	3332      	adds	r3, #50	; 0x32
 800485c:	4a65      	ldr	r2, [pc, #404]	; (80049f4 <UART_SetConfig+0x384>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f003 0207 	and.w	r2, r3, #7
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4442      	add	r2, r8
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	e26f      	b.n	8004d52 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004872:	f7fe ff97 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8004876:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	461d      	mov	r5, r3
 800487c:	f04f 0600 	mov.w	r6, #0
 8004880:	46a8      	mov	r8, r5
 8004882:	46b1      	mov	r9, r6
 8004884:	eb18 0308 	adds.w	r3, r8, r8
 8004888:	eb49 0409 	adc.w	r4, r9, r9
 800488c:	4698      	mov	r8, r3
 800488e:	46a1      	mov	r9, r4
 8004890:	eb18 0805 	adds.w	r8, r8, r5
 8004894:	eb49 0906 	adc.w	r9, r9, r6
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048ac:	4688      	mov	r8, r1
 80048ae:	4691      	mov	r9, r2
 80048b0:	eb18 0005 	adds.w	r0, r8, r5
 80048b4:	eb49 0106 	adc.w	r1, r9, r6
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	461d      	mov	r5, r3
 80048be:	f04f 0600 	mov.w	r6, #0
 80048c2:	196b      	adds	r3, r5, r5
 80048c4:	eb46 0406 	adc.w	r4, r6, r6
 80048c8:	461a      	mov	r2, r3
 80048ca:	4623      	mov	r3, r4
 80048cc:	f7fb fce0 	bl	8000290 <__aeabi_uldivmod>
 80048d0:	4603      	mov	r3, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <UART_SetConfig+0x384>)
 80048d8:	fba3 2302 	umull	r2, r3, r3, r2
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	461d      	mov	r5, r3
 80048e6:	f04f 0600 	mov.w	r6, #0
 80048ea:	46a9      	mov	r9, r5
 80048ec:	46b2      	mov	sl, r6
 80048ee:	eb19 0309 	adds.w	r3, r9, r9
 80048f2:	eb4a 040a 	adc.w	r4, sl, sl
 80048f6:	4699      	mov	r9, r3
 80048f8:	46a2      	mov	sl, r4
 80048fa:	eb19 0905 	adds.w	r9, r9, r5
 80048fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004912:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004916:	4689      	mov	r9, r1
 8004918:	4692      	mov	sl, r2
 800491a:	eb19 0005 	adds.w	r0, r9, r5
 800491e:	eb4a 0106 	adc.w	r1, sl, r6
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	461d      	mov	r5, r3
 8004928:	f04f 0600 	mov.w	r6, #0
 800492c:	196b      	adds	r3, r5, r5
 800492e:	eb46 0406 	adc.w	r4, r6, r6
 8004932:	461a      	mov	r2, r3
 8004934:	4623      	mov	r3, r4
 8004936:	f7fb fcab 	bl	8000290 <__aeabi_uldivmod>
 800493a:	4603      	mov	r3, r0
 800493c:	460c      	mov	r4, r1
 800493e:	461a      	mov	r2, r3
 8004940:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <UART_SetConfig+0x384>)
 8004942:	fba3 1302 	umull	r1, r3, r3, r2
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2164      	movs	r1, #100	; 0x64
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	3332      	adds	r3, #50	; 0x32
 8004954:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <UART_SetConfig+0x384>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004962:	4498      	add	r8, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	461d      	mov	r5, r3
 8004968:	f04f 0600 	mov.w	r6, #0
 800496c:	46a9      	mov	r9, r5
 800496e:	46b2      	mov	sl, r6
 8004970:	eb19 0309 	adds.w	r3, r9, r9
 8004974:	eb4a 040a 	adc.w	r4, sl, sl
 8004978:	4699      	mov	r9, r3
 800497a:	46a2      	mov	sl, r4
 800497c:	eb19 0905 	adds.w	r9, r9, r5
 8004980:	eb4a 0a06 	adc.w	sl, sl, r6
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004990:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004998:	4689      	mov	r9, r1
 800499a:	4692      	mov	sl, r2
 800499c:	eb19 0005 	adds.w	r0, r9, r5
 80049a0:	eb4a 0106 	adc.w	r1, sl, r6
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	461d      	mov	r5, r3
 80049aa:	f04f 0600 	mov.w	r6, #0
 80049ae:	196b      	adds	r3, r5, r5
 80049b0:	eb46 0406 	adc.w	r4, r6, r6
 80049b4:	461a      	mov	r2, r3
 80049b6:	4623      	mov	r3, r4
 80049b8:	f7fb fc6a 	bl	8000290 <__aeabi_uldivmod>
 80049bc:	4603      	mov	r3, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <UART_SetConfig+0x384>)
 80049c4:	fba3 1302 	umull	r1, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2164      	movs	r1, #100	; 0x64
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	3332      	adds	r3, #50	; 0x32
 80049d6:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <UART_SetConfig+0x384>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 0207 	and.w	r2, r3, #7
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4442      	add	r2, r8
 80049e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80049ea:	e1b2      	b.n	8004d52 <UART_SetConfig+0x6e2>
 80049ec:	40011000 	.word	0x40011000
 80049f0:	40011400 	.word	0x40011400
 80049f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4ad7      	ldr	r2, [pc, #860]	; (8004d5c <UART_SetConfig+0x6ec>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d005      	beq.n	8004a0e <UART_SetConfig+0x39e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4ad6      	ldr	r2, [pc, #856]	; (8004d60 <UART_SetConfig+0x6f0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f040 80d1 	bne.w	8004bb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a0e:	f7fe fedd 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8004a12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	469a      	mov	sl, r3
 8004a18:	f04f 0b00 	mov.w	fp, #0
 8004a1c:	46d0      	mov	r8, sl
 8004a1e:	46d9      	mov	r9, fp
 8004a20:	eb18 0308 	adds.w	r3, r8, r8
 8004a24:	eb49 0409 	adc.w	r4, r9, r9
 8004a28:	4698      	mov	r8, r3
 8004a2a:	46a1      	mov	r9, r4
 8004a2c:	eb18 080a 	adds.w	r8, r8, sl
 8004a30:	eb49 090b 	adc.w	r9, r9, fp
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a48:	4688      	mov	r8, r1
 8004a4a:	4691      	mov	r9, r2
 8004a4c:	eb1a 0508 	adds.w	r5, sl, r8
 8004a50:	eb4b 0609 	adc.w	r6, fp, r9
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	f04f 0400 	mov.w	r4, #0
 8004a66:	0094      	lsls	r4, r2, #2
 8004a68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a6c:	008b      	lsls	r3, r1, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4623      	mov	r3, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	4631      	mov	r1, r6
 8004a76:	f7fb fc0b 	bl	8000290 <__aeabi_uldivmod>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4bb8      	ldr	r3, [pc, #736]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004a82:	fba3 2302 	umull	r2, r3, r3, r2
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	469b      	mov	fp, r3
 8004a90:	f04f 0c00 	mov.w	ip, #0
 8004a94:	46d9      	mov	r9, fp
 8004a96:	46e2      	mov	sl, ip
 8004a98:	eb19 0309 	adds.w	r3, r9, r9
 8004a9c:	eb4a 040a 	adc.w	r4, sl, sl
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	46a2      	mov	sl, r4
 8004aa4:	eb19 090b 	adds.w	r9, r9, fp
 8004aa8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004aac:	f04f 0100 	mov.w	r1, #0
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004abc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ac0:	4689      	mov	r9, r1
 8004ac2:	4692      	mov	sl, r2
 8004ac4:	eb1b 0509 	adds.w	r5, fp, r9
 8004ac8:	eb4c 060a 	adc.w	r6, ip, sl
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	f04f 0400 	mov.w	r4, #0
 8004ade:	0094      	lsls	r4, r2, #2
 8004ae0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ae4:	008b      	lsls	r3, r1, #2
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4623      	mov	r3, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	4631      	mov	r1, r6
 8004aee:	f7fb fbcf 	bl	8000290 <__aeabi_uldivmod>
 8004af2:	4603      	mov	r3, r0
 8004af4:	460c      	mov	r4, r1
 8004af6:	461a      	mov	r2, r3
 8004af8:	4b9a      	ldr	r3, [pc, #616]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004afa:	fba3 1302 	umull	r1, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2164      	movs	r1, #100	; 0x64
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	3332      	adds	r3, #50	; 0x32
 8004b0c:	4a95      	ldr	r2, [pc, #596]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b18:	4498      	add	r8, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	469b      	mov	fp, r3
 8004b1e:	f04f 0c00 	mov.w	ip, #0
 8004b22:	46d9      	mov	r9, fp
 8004b24:	46e2      	mov	sl, ip
 8004b26:	eb19 0309 	adds.w	r3, r9, r9
 8004b2a:	eb4a 040a 	adc.w	r4, sl, sl
 8004b2e:	4699      	mov	r9, r3
 8004b30:	46a2      	mov	sl, r4
 8004b32:	eb19 090b 	adds.w	r9, r9, fp
 8004b36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b3a:	f04f 0100 	mov.w	r1, #0
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b4e:	4689      	mov	r9, r1
 8004b50:	4692      	mov	sl, r2
 8004b52:	eb1b 0509 	adds.w	r5, fp, r9
 8004b56:	eb4c 060a 	adc.w	r6, ip, sl
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	f04f 0400 	mov.w	r4, #0
 8004b6c:	0094      	lsls	r4, r2, #2
 8004b6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b72:	008b      	lsls	r3, r1, #2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4623      	mov	r3, r4
 8004b78:	4628      	mov	r0, r5
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	f7fb fb88 	bl	8000290 <__aeabi_uldivmod>
 8004b80:	4603      	mov	r3, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	461a      	mov	r2, r3
 8004b86:	4b77      	ldr	r3, [pc, #476]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	; 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	3332      	adds	r3, #50	; 0x32
 8004b9a:	4a72      	ldr	r2, [pc, #456]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4442      	add	r2, r8
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	e0d0      	b.n	8004d52 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7fe fdf8 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	469a      	mov	sl, r3
 8004bba:	f04f 0b00 	mov.w	fp, #0
 8004bbe:	46d0      	mov	r8, sl
 8004bc0:	46d9      	mov	r9, fp
 8004bc2:	eb18 0308 	adds.w	r3, r8, r8
 8004bc6:	eb49 0409 	adc.w	r4, r9, r9
 8004bca:	4698      	mov	r8, r3
 8004bcc:	46a1      	mov	r9, r4
 8004bce:	eb18 080a 	adds.w	r8, r8, sl
 8004bd2:	eb49 090b 	adc.w	r9, r9, fp
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004be2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004be6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bea:	4688      	mov	r8, r1
 8004bec:	4691      	mov	r9, r2
 8004bee:	eb1a 0508 	adds.w	r5, sl, r8
 8004bf2:	eb4b 0609 	adc.w	r6, fp, r9
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	f04f 0400 	mov.w	r4, #0
 8004c08:	0094      	lsls	r4, r2, #2
 8004c0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c0e:	008b      	lsls	r3, r1, #2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	4631      	mov	r1, r6
 8004c18:	f7fb fb3a 	bl	8000290 <__aeabi_uldivmod>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004c24:	fba3 2302 	umull	r2, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	469b      	mov	fp, r3
 8004c32:	f04f 0c00 	mov.w	ip, #0
 8004c36:	46d9      	mov	r9, fp
 8004c38:	46e2      	mov	sl, ip
 8004c3a:	eb19 0309 	adds.w	r3, r9, r9
 8004c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8004c42:	4699      	mov	r9, r3
 8004c44:	46a2      	mov	sl, r4
 8004c46:	eb19 090b 	adds.w	r9, r9, fp
 8004c4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c62:	4689      	mov	r9, r1
 8004c64:	4692      	mov	sl, r2
 8004c66:	eb1b 0509 	adds.w	r5, fp, r9
 8004c6a:	eb4c 060a 	adc.w	r6, ip, sl
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4619      	mov	r1, r3
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	0094      	lsls	r4, r2, #2
 8004c82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c86:	008b      	lsls	r3, r1, #2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	4631      	mov	r1, r6
 8004c90:	f7fb fafe 	bl	8000290 <__aeabi_uldivmod>
 8004c94:	4603      	mov	r3, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	2164      	movs	r1, #100	; 0x64
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	3332      	adds	r3, #50	; 0x32
 8004cae:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cba:	4498      	add	r8, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	469b      	mov	fp, r3
 8004cc0:	f04f 0c00 	mov.w	ip, #0
 8004cc4:	46d9      	mov	r9, fp
 8004cc6:	46e2      	mov	sl, ip
 8004cc8:	eb19 0309 	adds.w	r3, r9, r9
 8004ccc:	eb4a 040a 	adc.w	r4, sl, sl
 8004cd0:	4699      	mov	r9, r3
 8004cd2:	46a2      	mov	sl, r4
 8004cd4:	eb19 090b 	adds.w	r9, r9, fp
 8004cd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cf0:	4689      	mov	r9, r1
 8004cf2:	4692      	mov	sl, r2
 8004cf4:	eb1b 0509 	adds.w	r5, fp, r9
 8004cf8:	eb4c 060a 	adc.w	r6, ip, sl
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4619      	mov	r1, r3
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	f04f 0400 	mov.w	r4, #0
 8004d0e:	0094      	lsls	r4, r2, #2
 8004d10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d14:	008b      	lsls	r3, r1, #2
 8004d16:	461a      	mov	r2, r3
 8004d18:	4623      	mov	r3, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	f7fb fab7 	bl	8000290 <__aeabi_uldivmod>
 8004d22:	4603      	mov	r3, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	2164      	movs	r1, #100	; 0x64
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	3332      	adds	r3, #50	; 0x32
 8004d3c:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <UART_SetConfig+0x6f4>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	f003 020f 	and.w	r2, r3, #15
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4442      	add	r2, r8
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	e7ff      	b.n	8004d52 <UART_SetConfig+0x6e2>
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5c:	40011000 	.word	0x40011000
 8004d60:	40011400 	.word	0x40011400
 8004d64:	51eb851f 	.word	0x51eb851f

08004d68 <__errno>:
 8004d68:	4b01      	ldr	r3, [pc, #4]	; (8004d70 <__errno+0x8>)
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	2000000c 	.word	0x2000000c

08004d74 <__libc_init_array>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4e0d      	ldr	r6, [pc, #52]	; (8004dac <__libc_init_array+0x38>)
 8004d78:	4c0d      	ldr	r4, [pc, #52]	; (8004db0 <__libc_init_array+0x3c>)
 8004d7a:	1ba4      	subs	r4, r4, r6
 8004d7c:	10a4      	asrs	r4, r4, #2
 8004d7e:	2500      	movs	r5, #0
 8004d80:	42a5      	cmp	r5, r4
 8004d82:	d109      	bne.n	8004d98 <__libc_init_array+0x24>
 8004d84:	4e0b      	ldr	r6, [pc, #44]	; (8004db4 <__libc_init_array+0x40>)
 8004d86:	4c0c      	ldr	r4, [pc, #48]	; (8004db8 <__libc_init_array+0x44>)
 8004d88:	f000 fc26 	bl	80055d8 <_init>
 8004d8c:	1ba4      	subs	r4, r4, r6
 8004d8e:	10a4      	asrs	r4, r4, #2
 8004d90:	2500      	movs	r5, #0
 8004d92:	42a5      	cmp	r5, r4
 8004d94:	d105      	bne.n	8004da2 <__libc_init_array+0x2e>
 8004d96:	bd70      	pop	{r4, r5, r6, pc}
 8004d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d9c:	4798      	blx	r3
 8004d9e:	3501      	adds	r5, #1
 8004da0:	e7ee      	b.n	8004d80 <__libc_init_array+0xc>
 8004da2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004da6:	4798      	blx	r3
 8004da8:	3501      	adds	r5, #1
 8004daa:	e7f2      	b.n	8004d92 <__libc_init_array+0x1e>
 8004dac:	08005668 	.word	0x08005668
 8004db0:	08005668 	.word	0x08005668
 8004db4:	08005668 	.word	0x08005668
 8004db8:	0800566c 	.word	0x0800566c

08004dbc <memset>:
 8004dbc:	4402      	add	r2, r0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <memset+0xa>
 8004dc4:	4770      	bx	lr
 8004dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dca:	e7f9      	b.n	8004dc0 <memset+0x4>

08004dcc <_vsiprintf_r>:
 8004dcc:	b500      	push	{lr}
 8004dce:	b09b      	sub	sp, #108	; 0x6c
 8004dd0:	9100      	str	r1, [sp, #0]
 8004dd2:	9104      	str	r1, [sp, #16]
 8004dd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dd8:	9105      	str	r1, [sp, #20]
 8004dda:	9102      	str	r1, [sp, #8]
 8004ddc:	4905      	ldr	r1, [pc, #20]	; (8004df4 <_vsiprintf_r+0x28>)
 8004dde:	9103      	str	r1, [sp, #12]
 8004de0:	4669      	mov	r1, sp
 8004de2:	f000 f86d 	bl	8004ec0 <_svfiprintf_r>
 8004de6:	9b00      	ldr	r3, [sp, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	b01b      	add	sp, #108	; 0x6c
 8004dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8004df2:	bf00      	nop
 8004df4:	ffff0208 	.word	0xffff0208

08004df8 <vsiprintf>:
 8004df8:	4613      	mov	r3, r2
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	4601      	mov	r1, r0
 8004dfe:	4802      	ldr	r0, [pc, #8]	; (8004e08 <vsiprintf+0x10>)
 8004e00:	6800      	ldr	r0, [r0, #0]
 8004e02:	f7ff bfe3 	b.w	8004dcc <_vsiprintf_r>
 8004e06:	bf00      	nop
 8004e08:	2000000c 	.word	0x2000000c

08004e0c <__ssputs_r>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	688e      	ldr	r6, [r1, #8]
 8004e12:	429e      	cmp	r6, r3
 8004e14:	4682      	mov	sl, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	4690      	mov	r8, r2
 8004e1a:	4699      	mov	r9, r3
 8004e1c:	d837      	bhi.n	8004e8e <__ssputs_r+0x82>
 8004e1e:	898a      	ldrh	r2, [r1, #12]
 8004e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e24:	d031      	beq.n	8004e8a <__ssputs_r+0x7e>
 8004e26:	6825      	ldr	r5, [r4, #0]
 8004e28:	6909      	ldr	r1, [r1, #16]
 8004e2a:	1a6f      	subs	r7, r5, r1
 8004e2c:	6965      	ldr	r5, [r4, #20]
 8004e2e:	2302      	movs	r3, #2
 8004e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e34:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e38:	f109 0301 	add.w	r3, r9, #1
 8004e3c:	443b      	add	r3, r7
 8004e3e:	429d      	cmp	r5, r3
 8004e40:	bf38      	it	cc
 8004e42:	461d      	movcc	r5, r3
 8004e44:	0553      	lsls	r3, r2, #21
 8004e46:	d530      	bpl.n	8004eaa <__ssputs_r+0x9e>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f000 fb2b 	bl	80054a4 <_malloc_r>
 8004e4e:	4606      	mov	r6, r0
 8004e50:	b950      	cbnz	r0, 8004e68 <__ssputs_r+0x5c>
 8004e52:	230c      	movs	r3, #12
 8004e54:	f8ca 3000 	str.w	r3, [sl]
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e68:	463a      	mov	r2, r7
 8004e6a:	6921      	ldr	r1, [r4, #16]
 8004e6c:	f000 faa8 	bl	80053c0 <memcpy>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	6126      	str	r6, [r4, #16]
 8004e7e:	6165      	str	r5, [r4, #20]
 8004e80:	443e      	add	r6, r7
 8004e82:	1bed      	subs	r5, r5, r7
 8004e84:	6026      	str	r6, [r4, #0]
 8004e86:	60a5      	str	r5, [r4, #8]
 8004e88:	464e      	mov	r6, r9
 8004e8a:	454e      	cmp	r6, r9
 8004e8c:	d900      	bls.n	8004e90 <__ssputs_r+0x84>
 8004e8e:	464e      	mov	r6, r9
 8004e90:	4632      	mov	r2, r6
 8004e92:	4641      	mov	r1, r8
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	f000 fa9e 	bl	80053d6 <memmove>
 8004e9a:	68a3      	ldr	r3, [r4, #8]
 8004e9c:	1b9b      	subs	r3, r3, r6
 8004e9e:	60a3      	str	r3, [r4, #8]
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	441e      	add	r6, r3
 8004ea4:	6026      	str	r6, [r4, #0]
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	e7dc      	b.n	8004e64 <__ssputs_r+0x58>
 8004eaa:	462a      	mov	r2, r5
 8004eac:	f000 fb54 	bl	8005558 <_realloc_r>
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d1e2      	bne.n	8004e7c <__ssputs_r+0x70>
 8004eb6:	6921      	ldr	r1, [r4, #16]
 8004eb8:	4650      	mov	r0, sl
 8004eba:	f000 faa5 	bl	8005408 <_free_r>
 8004ebe:	e7c8      	b.n	8004e52 <__ssputs_r+0x46>

08004ec0 <_svfiprintf_r>:
 8004ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	461d      	mov	r5, r3
 8004ec6:	898b      	ldrh	r3, [r1, #12]
 8004ec8:	061f      	lsls	r7, r3, #24
 8004eca:	b09d      	sub	sp, #116	; 0x74
 8004ecc:	4680      	mov	r8, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	d50f      	bpl.n	8004ef4 <_svfiprintf_r+0x34>
 8004ed4:	690b      	ldr	r3, [r1, #16]
 8004ed6:	b96b      	cbnz	r3, 8004ef4 <_svfiprintf_r+0x34>
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	f000 fae3 	bl	80054a4 <_malloc_r>
 8004ede:	6020      	str	r0, [r4, #0]
 8004ee0:	6120      	str	r0, [r4, #16]
 8004ee2:	b928      	cbnz	r0, 8004ef0 <_svfiprintf_r+0x30>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	f8c8 3000 	str.w	r3, [r8]
 8004eea:	f04f 30ff 	mov.w	r0, #4294967295
 8004eee:	e0c8      	b.n	8005082 <_svfiprintf_r+0x1c2>
 8004ef0:	2340      	movs	r3, #64	; 0x40
 8004ef2:	6163      	str	r3, [r4, #20]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef8:	2320      	movs	r3, #32
 8004efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004efe:	2330      	movs	r3, #48	; 0x30
 8004f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f04:	9503      	str	r5, [sp, #12]
 8004f06:	f04f 0b01 	mov.w	fp, #1
 8004f0a:	4637      	mov	r7, r6
 8004f0c:	463d      	mov	r5, r7
 8004f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f12:	b10b      	cbz	r3, 8004f18 <_svfiprintf_r+0x58>
 8004f14:	2b25      	cmp	r3, #37	; 0x25
 8004f16:	d13e      	bne.n	8004f96 <_svfiprintf_r+0xd6>
 8004f18:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f1c:	d00b      	beq.n	8004f36 <_svfiprintf_r+0x76>
 8004f1e:	4653      	mov	r3, sl
 8004f20:	4632      	mov	r2, r6
 8004f22:	4621      	mov	r1, r4
 8004f24:	4640      	mov	r0, r8
 8004f26:	f7ff ff71 	bl	8004e0c <__ssputs_r>
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	f000 80a4 	beq.w	8005078 <_svfiprintf_r+0x1b8>
 8004f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f32:	4453      	add	r3, sl
 8004f34:	9309      	str	r3, [sp, #36]	; 0x24
 8004f36:	783b      	ldrb	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 809d 	beq.w	8005078 <_svfiprintf_r+0x1b8>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f04f 32ff 	mov.w	r2, #4294967295
 8004f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	9307      	str	r3, [sp, #28]
 8004f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f50:	931a      	str	r3, [sp, #104]	; 0x68
 8004f52:	462f      	mov	r7, r5
 8004f54:	2205      	movs	r2, #5
 8004f56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f5a:	4850      	ldr	r0, [pc, #320]	; (800509c <_svfiprintf_r+0x1dc>)
 8004f5c:	f7fb f948 	bl	80001f0 <memchr>
 8004f60:	9b04      	ldr	r3, [sp, #16]
 8004f62:	b9d0      	cbnz	r0, 8004f9a <_svfiprintf_r+0xda>
 8004f64:	06d9      	lsls	r1, r3, #27
 8004f66:	bf44      	itt	mi
 8004f68:	2220      	movmi	r2, #32
 8004f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f6e:	071a      	lsls	r2, r3, #28
 8004f70:	bf44      	itt	mi
 8004f72:	222b      	movmi	r2, #43	; 0x2b
 8004f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f78:	782a      	ldrb	r2, [r5, #0]
 8004f7a:	2a2a      	cmp	r2, #42	; 0x2a
 8004f7c:	d015      	beq.n	8004faa <_svfiprintf_r+0xea>
 8004f7e:	9a07      	ldr	r2, [sp, #28]
 8004f80:	462f      	mov	r7, r5
 8004f82:	2000      	movs	r0, #0
 8004f84:	250a      	movs	r5, #10
 8004f86:	4639      	mov	r1, r7
 8004f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f8c:	3b30      	subs	r3, #48	; 0x30
 8004f8e:	2b09      	cmp	r3, #9
 8004f90:	d94d      	bls.n	800502e <_svfiprintf_r+0x16e>
 8004f92:	b1b8      	cbz	r0, 8004fc4 <_svfiprintf_r+0x104>
 8004f94:	e00f      	b.n	8004fb6 <_svfiprintf_r+0xf6>
 8004f96:	462f      	mov	r7, r5
 8004f98:	e7b8      	b.n	8004f0c <_svfiprintf_r+0x4c>
 8004f9a:	4a40      	ldr	r2, [pc, #256]	; (800509c <_svfiprintf_r+0x1dc>)
 8004f9c:	1a80      	subs	r0, r0, r2
 8004f9e:	fa0b f000 	lsl.w	r0, fp, r0
 8004fa2:	4318      	orrs	r0, r3
 8004fa4:	9004      	str	r0, [sp, #16]
 8004fa6:	463d      	mov	r5, r7
 8004fa8:	e7d3      	b.n	8004f52 <_svfiprintf_r+0x92>
 8004faa:	9a03      	ldr	r2, [sp, #12]
 8004fac:	1d11      	adds	r1, r2, #4
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	9103      	str	r1, [sp, #12]
 8004fb2:	2a00      	cmp	r2, #0
 8004fb4:	db01      	blt.n	8004fba <_svfiprintf_r+0xfa>
 8004fb6:	9207      	str	r2, [sp, #28]
 8004fb8:	e004      	b.n	8004fc4 <_svfiprintf_r+0x104>
 8004fba:	4252      	negs	r2, r2
 8004fbc:	f043 0302 	orr.w	r3, r3, #2
 8004fc0:	9207      	str	r2, [sp, #28]
 8004fc2:	9304      	str	r3, [sp, #16]
 8004fc4:	783b      	ldrb	r3, [r7, #0]
 8004fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fc8:	d10c      	bne.n	8004fe4 <_svfiprintf_r+0x124>
 8004fca:	787b      	ldrb	r3, [r7, #1]
 8004fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fce:	d133      	bne.n	8005038 <_svfiprintf_r+0x178>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	9203      	str	r2, [sp, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfb8      	it	lt
 8004fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fe0:	3702      	adds	r7, #2
 8004fe2:	9305      	str	r3, [sp, #20]
 8004fe4:	4d2e      	ldr	r5, [pc, #184]	; (80050a0 <_svfiprintf_r+0x1e0>)
 8004fe6:	7839      	ldrb	r1, [r7, #0]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	4628      	mov	r0, r5
 8004fec:	f7fb f900 	bl	80001f0 <memchr>
 8004ff0:	b138      	cbz	r0, 8005002 <_svfiprintf_r+0x142>
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	1b40      	subs	r0, r0, r5
 8004ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8004ffa:	9b04      	ldr	r3, [sp, #16]
 8004ffc:	4303      	orrs	r3, r0
 8004ffe:	3701      	adds	r7, #1
 8005000:	9304      	str	r3, [sp, #16]
 8005002:	7839      	ldrb	r1, [r7, #0]
 8005004:	4827      	ldr	r0, [pc, #156]	; (80050a4 <_svfiprintf_r+0x1e4>)
 8005006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800500a:	2206      	movs	r2, #6
 800500c:	1c7e      	adds	r6, r7, #1
 800500e:	f7fb f8ef 	bl	80001f0 <memchr>
 8005012:	2800      	cmp	r0, #0
 8005014:	d038      	beq.n	8005088 <_svfiprintf_r+0x1c8>
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <_svfiprintf_r+0x1e8>)
 8005018:	bb13      	cbnz	r3, 8005060 <_svfiprintf_r+0x1a0>
 800501a:	9b03      	ldr	r3, [sp, #12]
 800501c:	3307      	adds	r3, #7
 800501e:	f023 0307 	bic.w	r3, r3, #7
 8005022:	3308      	adds	r3, #8
 8005024:	9303      	str	r3, [sp, #12]
 8005026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005028:	444b      	add	r3, r9
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
 800502c:	e76d      	b.n	8004f0a <_svfiprintf_r+0x4a>
 800502e:	fb05 3202 	mla	r2, r5, r2, r3
 8005032:	2001      	movs	r0, #1
 8005034:	460f      	mov	r7, r1
 8005036:	e7a6      	b.n	8004f86 <_svfiprintf_r+0xc6>
 8005038:	2300      	movs	r3, #0
 800503a:	3701      	adds	r7, #1
 800503c:	9305      	str	r3, [sp, #20]
 800503e:	4619      	mov	r1, r3
 8005040:	250a      	movs	r5, #10
 8005042:	4638      	mov	r0, r7
 8005044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005048:	3a30      	subs	r2, #48	; 0x30
 800504a:	2a09      	cmp	r2, #9
 800504c:	d903      	bls.n	8005056 <_svfiprintf_r+0x196>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0c8      	beq.n	8004fe4 <_svfiprintf_r+0x124>
 8005052:	9105      	str	r1, [sp, #20]
 8005054:	e7c6      	b.n	8004fe4 <_svfiprintf_r+0x124>
 8005056:	fb05 2101 	mla	r1, r5, r1, r2
 800505a:	2301      	movs	r3, #1
 800505c:	4607      	mov	r7, r0
 800505e:	e7f0      	b.n	8005042 <_svfiprintf_r+0x182>
 8005060:	ab03      	add	r3, sp, #12
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	4622      	mov	r2, r4
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <_svfiprintf_r+0x1ec>)
 8005068:	a904      	add	r1, sp, #16
 800506a:	4640      	mov	r0, r8
 800506c:	f3af 8000 	nop.w
 8005070:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005074:	4681      	mov	r9, r0
 8005076:	d1d6      	bne.n	8005026 <_svfiprintf_r+0x166>
 8005078:	89a3      	ldrh	r3, [r4, #12]
 800507a:	065b      	lsls	r3, r3, #25
 800507c:	f53f af35 	bmi.w	8004eea <_svfiprintf_r+0x2a>
 8005080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005082:	b01d      	add	sp, #116	; 0x74
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005088:	ab03      	add	r3, sp, #12
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4622      	mov	r2, r4
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <_svfiprintf_r+0x1ec>)
 8005090:	a904      	add	r1, sp, #16
 8005092:	4640      	mov	r0, r8
 8005094:	f000 f882 	bl	800519c <_printf_i>
 8005098:	e7ea      	b.n	8005070 <_svfiprintf_r+0x1b0>
 800509a:	bf00      	nop
 800509c:	0800562c 	.word	0x0800562c
 80050a0:	08005632 	.word	0x08005632
 80050a4:	08005636 	.word	0x08005636
 80050a8:	00000000 	.word	0x00000000
 80050ac:	08004e0d 	.word	0x08004e0d

080050b0 <_printf_common>:
 80050b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b4:	4691      	mov	r9, r2
 80050b6:	461f      	mov	r7, r3
 80050b8:	688a      	ldr	r2, [r1, #8]
 80050ba:	690b      	ldr	r3, [r1, #16]
 80050bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050c0:	4293      	cmp	r3, r2
 80050c2:	bfb8      	it	lt
 80050c4:	4613      	movlt	r3, r2
 80050c6:	f8c9 3000 	str.w	r3, [r9]
 80050ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ce:	4606      	mov	r6, r0
 80050d0:	460c      	mov	r4, r1
 80050d2:	b112      	cbz	r2, 80050da <_printf_common+0x2a>
 80050d4:	3301      	adds	r3, #1
 80050d6:	f8c9 3000 	str.w	r3, [r9]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	0699      	lsls	r1, r3, #26
 80050de:	bf42      	ittt	mi
 80050e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050e4:	3302      	addmi	r3, #2
 80050e6:	f8c9 3000 	strmi.w	r3, [r9]
 80050ea:	6825      	ldr	r5, [r4, #0]
 80050ec:	f015 0506 	ands.w	r5, r5, #6
 80050f0:	d107      	bne.n	8005102 <_printf_common+0x52>
 80050f2:	f104 0a19 	add.w	sl, r4, #25
 80050f6:	68e3      	ldr	r3, [r4, #12]
 80050f8:	f8d9 2000 	ldr.w	r2, [r9]
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	42ab      	cmp	r3, r5
 8005100:	dc28      	bgt.n	8005154 <_printf_common+0xa4>
 8005102:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	3300      	adds	r3, #0
 800510a:	bf18      	it	ne
 800510c:	2301      	movne	r3, #1
 800510e:	0692      	lsls	r2, r2, #26
 8005110:	d42d      	bmi.n	800516e <_printf_common+0xbe>
 8005112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005116:	4639      	mov	r1, r7
 8005118:	4630      	mov	r0, r6
 800511a:	47c0      	blx	r8
 800511c:	3001      	adds	r0, #1
 800511e:	d020      	beq.n	8005162 <_printf_common+0xb2>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	68e5      	ldr	r5, [r4, #12]
 8005124:	f8d9 2000 	ldr.w	r2, [r9]
 8005128:	f003 0306 	and.w	r3, r3, #6
 800512c:	2b04      	cmp	r3, #4
 800512e:	bf08      	it	eq
 8005130:	1aad      	subeq	r5, r5, r2
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	bf0c      	ite	eq
 8005138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800513c:	2500      	movne	r5, #0
 800513e:	4293      	cmp	r3, r2
 8005140:	bfc4      	itt	gt
 8005142:	1a9b      	subgt	r3, r3, r2
 8005144:	18ed      	addgt	r5, r5, r3
 8005146:	f04f 0900 	mov.w	r9, #0
 800514a:	341a      	adds	r4, #26
 800514c:	454d      	cmp	r5, r9
 800514e:	d11a      	bne.n	8005186 <_printf_common+0xd6>
 8005150:	2000      	movs	r0, #0
 8005152:	e008      	b.n	8005166 <_printf_common+0xb6>
 8005154:	2301      	movs	r3, #1
 8005156:	4652      	mov	r2, sl
 8005158:	4639      	mov	r1, r7
 800515a:	4630      	mov	r0, r6
 800515c:	47c0      	blx	r8
 800515e:	3001      	adds	r0, #1
 8005160:	d103      	bne.n	800516a <_printf_common+0xba>
 8005162:	f04f 30ff 	mov.w	r0, #4294967295
 8005166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516a:	3501      	adds	r5, #1
 800516c:	e7c3      	b.n	80050f6 <_printf_common+0x46>
 800516e:	18e1      	adds	r1, r4, r3
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	2030      	movs	r0, #48	; 0x30
 8005174:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005178:	4422      	add	r2, r4
 800517a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800517e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005182:	3302      	adds	r3, #2
 8005184:	e7c5      	b.n	8005112 <_printf_common+0x62>
 8005186:	2301      	movs	r3, #1
 8005188:	4622      	mov	r2, r4
 800518a:	4639      	mov	r1, r7
 800518c:	4630      	mov	r0, r6
 800518e:	47c0      	blx	r8
 8005190:	3001      	adds	r0, #1
 8005192:	d0e6      	beq.n	8005162 <_printf_common+0xb2>
 8005194:	f109 0901 	add.w	r9, r9, #1
 8005198:	e7d8      	b.n	800514c <_printf_common+0x9c>
	...

0800519c <_printf_i>:
 800519c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051a4:	460c      	mov	r4, r1
 80051a6:	7e09      	ldrb	r1, [r1, #24]
 80051a8:	b085      	sub	sp, #20
 80051aa:	296e      	cmp	r1, #110	; 0x6e
 80051ac:	4617      	mov	r7, r2
 80051ae:	4606      	mov	r6, r0
 80051b0:	4698      	mov	r8, r3
 80051b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051b4:	f000 80b3 	beq.w	800531e <_printf_i+0x182>
 80051b8:	d822      	bhi.n	8005200 <_printf_i+0x64>
 80051ba:	2963      	cmp	r1, #99	; 0x63
 80051bc:	d036      	beq.n	800522c <_printf_i+0x90>
 80051be:	d80a      	bhi.n	80051d6 <_printf_i+0x3a>
 80051c0:	2900      	cmp	r1, #0
 80051c2:	f000 80b9 	beq.w	8005338 <_printf_i+0x19c>
 80051c6:	2958      	cmp	r1, #88	; 0x58
 80051c8:	f000 8083 	beq.w	80052d2 <_printf_i+0x136>
 80051cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051d4:	e032      	b.n	800523c <_printf_i+0xa0>
 80051d6:	2964      	cmp	r1, #100	; 0x64
 80051d8:	d001      	beq.n	80051de <_printf_i+0x42>
 80051da:	2969      	cmp	r1, #105	; 0x69
 80051dc:	d1f6      	bne.n	80051cc <_printf_i+0x30>
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	6813      	ldr	r3, [r2, #0]
 80051e2:	0605      	lsls	r5, r0, #24
 80051e4:	f103 0104 	add.w	r1, r3, #4
 80051e8:	d52a      	bpl.n	8005240 <_printf_i+0xa4>
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	da03      	bge.n	80051fa <_printf_i+0x5e>
 80051f2:	222d      	movs	r2, #45	; 0x2d
 80051f4:	425b      	negs	r3, r3
 80051f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051fa:	486f      	ldr	r0, [pc, #444]	; (80053b8 <_printf_i+0x21c>)
 80051fc:	220a      	movs	r2, #10
 80051fe:	e039      	b.n	8005274 <_printf_i+0xd8>
 8005200:	2973      	cmp	r1, #115	; 0x73
 8005202:	f000 809d 	beq.w	8005340 <_printf_i+0x1a4>
 8005206:	d808      	bhi.n	800521a <_printf_i+0x7e>
 8005208:	296f      	cmp	r1, #111	; 0x6f
 800520a:	d020      	beq.n	800524e <_printf_i+0xb2>
 800520c:	2970      	cmp	r1, #112	; 0x70
 800520e:	d1dd      	bne.n	80051cc <_printf_i+0x30>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	f043 0320 	orr.w	r3, r3, #32
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	e003      	b.n	8005222 <_printf_i+0x86>
 800521a:	2975      	cmp	r1, #117	; 0x75
 800521c:	d017      	beq.n	800524e <_printf_i+0xb2>
 800521e:	2978      	cmp	r1, #120	; 0x78
 8005220:	d1d4      	bne.n	80051cc <_printf_i+0x30>
 8005222:	2378      	movs	r3, #120	; 0x78
 8005224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005228:	4864      	ldr	r0, [pc, #400]	; (80053bc <_printf_i+0x220>)
 800522a:	e055      	b.n	80052d8 <_printf_i+0x13c>
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	1d19      	adds	r1, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6011      	str	r1, [r2, #0]
 8005234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800523c:	2301      	movs	r3, #1
 800523e:	e08c      	b.n	800535a <_printf_i+0x1be>
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6011      	str	r1, [r2, #0]
 8005244:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005248:	bf18      	it	ne
 800524a:	b21b      	sxthne	r3, r3
 800524c:	e7cf      	b.n	80051ee <_printf_i+0x52>
 800524e:	6813      	ldr	r3, [r2, #0]
 8005250:	6825      	ldr	r5, [r4, #0]
 8005252:	1d18      	adds	r0, r3, #4
 8005254:	6010      	str	r0, [r2, #0]
 8005256:	0628      	lsls	r0, r5, #24
 8005258:	d501      	bpl.n	800525e <_printf_i+0xc2>
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	e002      	b.n	8005264 <_printf_i+0xc8>
 800525e:	0668      	lsls	r0, r5, #25
 8005260:	d5fb      	bpl.n	800525a <_printf_i+0xbe>
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	4854      	ldr	r0, [pc, #336]	; (80053b8 <_printf_i+0x21c>)
 8005266:	296f      	cmp	r1, #111	; 0x6f
 8005268:	bf14      	ite	ne
 800526a:	220a      	movne	r2, #10
 800526c:	2208      	moveq	r2, #8
 800526e:	2100      	movs	r1, #0
 8005270:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005274:	6865      	ldr	r5, [r4, #4]
 8005276:	60a5      	str	r5, [r4, #8]
 8005278:	2d00      	cmp	r5, #0
 800527a:	f2c0 8095 	blt.w	80053a8 <_printf_i+0x20c>
 800527e:	6821      	ldr	r1, [r4, #0]
 8005280:	f021 0104 	bic.w	r1, r1, #4
 8005284:	6021      	str	r1, [r4, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d13d      	bne.n	8005306 <_printf_i+0x16a>
 800528a:	2d00      	cmp	r5, #0
 800528c:	f040 808e 	bne.w	80053ac <_printf_i+0x210>
 8005290:	4665      	mov	r5, ip
 8005292:	2a08      	cmp	r2, #8
 8005294:	d10b      	bne.n	80052ae <_printf_i+0x112>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	07db      	lsls	r3, r3, #31
 800529a:	d508      	bpl.n	80052ae <_printf_i+0x112>
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	6862      	ldr	r2, [r4, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	bfde      	ittt	le
 80052a4:	2330      	movle	r3, #48	; 0x30
 80052a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ae:	ebac 0305 	sub.w	r3, ip, r5
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	f8cd 8000 	str.w	r8, [sp]
 80052b8:	463b      	mov	r3, r7
 80052ba:	aa03      	add	r2, sp, #12
 80052bc:	4621      	mov	r1, r4
 80052be:	4630      	mov	r0, r6
 80052c0:	f7ff fef6 	bl	80050b0 <_printf_common>
 80052c4:	3001      	adds	r0, #1
 80052c6:	d14d      	bne.n	8005364 <_printf_i+0x1c8>
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	b005      	add	sp, #20
 80052ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052d2:	4839      	ldr	r0, [pc, #228]	; (80053b8 <_printf_i+0x21c>)
 80052d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052d8:	6813      	ldr	r3, [r2, #0]
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	1d1d      	adds	r5, r3, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6015      	str	r5, [r2, #0]
 80052e2:	060a      	lsls	r2, r1, #24
 80052e4:	d50b      	bpl.n	80052fe <_printf_i+0x162>
 80052e6:	07ca      	lsls	r2, r1, #31
 80052e8:	bf44      	itt	mi
 80052ea:	f041 0120 	orrmi.w	r1, r1, #32
 80052ee:	6021      	strmi	r1, [r4, #0]
 80052f0:	b91b      	cbnz	r3, 80052fa <_printf_i+0x15e>
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	f022 0220 	bic.w	r2, r2, #32
 80052f8:	6022      	str	r2, [r4, #0]
 80052fa:	2210      	movs	r2, #16
 80052fc:	e7b7      	b.n	800526e <_printf_i+0xd2>
 80052fe:	064d      	lsls	r5, r1, #25
 8005300:	bf48      	it	mi
 8005302:	b29b      	uxthmi	r3, r3
 8005304:	e7ef      	b.n	80052e6 <_printf_i+0x14a>
 8005306:	4665      	mov	r5, ip
 8005308:	fbb3 f1f2 	udiv	r1, r3, r2
 800530c:	fb02 3311 	mls	r3, r2, r1, r3
 8005310:	5cc3      	ldrb	r3, [r0, r3]
 8005312:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005316:	460b      	mov	r3, r1
 8005318:	2900      	cmp	r1, #0
 800531a:	d1f5      	bne.n	8005308 <_printf_i+0x16c>
 800531c:	e7b9      	b.n	8005292 <_printf_i+0xf6>
 800531e:	6813      	ldr	r3, [r2, #0]
 8005320:	6825      	ldr	r5, [r4, #0]
 8005322:	6961      	ldr	r1, [r4, #20]
 8005324:	1d18      	adds	r0, r3, #4
 8005326:	6010      	str	r0, [r2, #0]
 8005328:	0628      	lsls	r0, r5, #24
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	d501      	bpl.n	8005332 <_printf_i+0x196>
 800532e:	6019      	str	r1, [r3, #0]
 8005330:	e002      	b.n	8005338 <_printf_i+0x19c>
 8005332:	066a      	lsls	r2, r5, #25
 8005334:	d5fb      	bpl.n	800532e <_printf_i+0x192>
 8005336:	8019      	strh	r1, [r3, #0]
 8005338:	2300      	movs	r3, #0
 800533a:	6123      	str	r3, [r4, #16]
 800533c:	4665      	mov	r5, ip
 800533e:	e7b9      	b.n	80052b4 <_printf_i+0x118>
 8005340:	6813      	ldr	r3, [r2, #0]
 8005342:	1d19      	adds	r1, r3, #4
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	681d      	ldr	r5, [r3, #0]
 8005348:	6862      	ldr	r2, [r4, #4]
 800534a:	2100      	movs	r1, #0
 800534c:	4628      	mov	r0, r5
 800534e:	f7fa ff4f 	bl	80001f0 <memchr>
 8005352:	b108      	cbz	r0, 8005358 <_printf_i+0x1bc>
 8005354:	1b40      	subs	r0, r0, r5
 8005356:	6060      	str	r0, [r4, #4]
 8005358:	6863      	ldr	r3, [r4, #4]
 800535a:	6123      	str	r3, [r4, #16]
 800535c:	2300      	movs	r3, #0
 800535e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005362:	e7a7      	b.n	80052b4 <_printf_i+0x118>
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	462a      	mov	r2, r5
 8005368:	4639      	mov	r1, r7
 800536a:	4630      	mov	r0, r6
 800536c:	47c0      	blx	r8
 800536e:	3001      	adds	r0, #1
 8005370:	d0aa      	beq.n	80052c8 <_printf_i+0x12c>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	079b      	lsls	r3, r3, #30
 8005376:	d413      	bmi.n	80053a0 <_printf_i+0x204>
 8005378:	68e0      	ldr	r0, [r4, #12]
 800537a:	9b03      	ldr	r3, [sp, #12]
 800537c:	4298      	cmp	r0, r3
 800537e:	bfb8      	it	lt
 8005380:	4618      	movlt	r0, r3
 8005382:	e7a3      	b.n	80052cc <_printf_i+0x130>
 8005384:	2301      	movs	r3, #1
 8005386:	464a      	mov	r2, r9
 8005388:	4639      	mov	r1, r7
 800538a:	4630      	mov	r0, r6
 800538c:	47c0      	blx	r8
 800538e:	3001      	adds	r0, #1
 8005390:	d09a      	beq.n	80052c8 <_printf_i+0x12c>
 8005392:	3501      	adds	r5, #1
 8005394:	68e3      	ldr	r3, [r4, #12]
 8005396:	9a03      	ldr	r2, [sp, #12]
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	42ab      	cmp	r3, r5
 800539c:	dcf2      	bgt.n	8005384 <_printf_i+0x1e8>
 800539e:	e7eb      	b.n	8005378 <_printf_i+0x1dc>
 80053a0:	2500      	movs	r5, #0
 80053a2:	f104 0919 	add.w	r9, r4, #25
 80053a6:	e7f5      	b.n	8005394 <_printf_i+0x1f8>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1ac      	bne.n	8005306 <_printf_i+0x16a>
 80053ac:	7803      	ldrb	r3, [r0, #0]
 80053ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b6:	e76c      	b.n	8005292 <_printf_i+0xf6>
 80053b8:	0800563d 	.word	0x0800563d
 80053bc:	0800564e 	.word	0x0800564e

080053c0 <memcpy>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	1e43      	subs	r3, r0, #1
 80053c4:	440a      	add	r2, r1
 80053c6:	4291      	cmp	r1, r2
 80053c8:	d100      	bne.n	80053cc <memcpy+0xc>
 80053ca:	bd10      	pop	{r4, pc}
 80053cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053d4:	e7f7      	b.n	80053c6 <memcpy+0x6>

080053d6 <memmove>:
 80053d6:	4288      	cmp	r0, r1
 80053d8:	b510      	push	{r4, lr}
 80053da:	eb01 0302 	add.w	r3, r1, r2
 80053de:	d807      	bhi.n	80053f0 <memmove+0x1a>
 80053e0:	1e42      	subs	r2, r0, #1
 80053e2:	4299      	cmp	r1, r3
 80053e4:	d00a      	beq.n	80053fc <memmove+0x26>
 80053e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053ee:	e7f8      	b.n	80053e2 <memmove+0xc>
 80053f0:	4283      	cmp	r3, r0
 80053f2:	d9f5      	bls.n	80053e0 <memmove+0xa>
 80053f4:	1881      	adds	r1, r0, r2
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	42d3      	cmn	r3, r2
 80053fa:	d100      	bne.n	80053fe <memmove+0x28>
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005402:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005406:	e7f7      	b.n	80053f8 <memmove+0x22>

08005408 <_free_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4605      	mov	r5, r0
 800540c:	2900      	cmp	r1, #0
 800540e:	d045      	beq.n	800549c <_free_r+0x94>
 8005410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005414:	1f0c      	subs	r4, r1, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfb8      	it	lt
 800541a:	18e4      	addlt	r4, r4, r3
 800541c:	f000 f8d2 	bl	80055c4 <__malloc_lock>
 8005420:	4a1f      	ldr	r2, [pc, #124]	; (80054a0 <_free_r+0x98>)
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	4610      	mov	r0, r2
 8005426:	b933      	cbnz	r3, 8005436 <_free_r+0x2e>
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	6014      	str	r4, [r2, #0]
 800542c:	4628      	mov	r0, r5
 800542e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005432:	f000 b8c8 	b.w	80055c6 <__malloc_unlock>
 8005436:	42a3      	cmp	r3, r4
 8005438:	d90c      	bls.n	8005454 <_free_r+0x4c>
 800543a:	6821      	ldr	r1, [r4, #0]
 800543c:	1862      	adds	r2, r4, r1
 800543e:	4293      	cmp	r3, r2
 8005440:	bf04      	itt	eq
 8005442:	681a      	ldreq	r2, [r3, #0]
 8005444:	685b      	ldreq	r3, [r3, #4]
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	bf04      	itt	eq
 800544a:	1852      	addeq	r2, r2, r1
 800544c:	6022      	streq	r2, [r4, #0]
 800544e:	6004      	str	r4, [r0, #0]
 8005450:	e7ec      	b.n	800542c <_free_r+0x24>
 8005452:	4613      	mov	r3, r2
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	b10a      	cbz	r2, 800545c <_free_r+0x54>
 8005458:	42a2      	cmp	r2, r4
 800545a:	d9fa      	bls.n	8005452 <_free_r+0x4a>
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	1858      	adds	r0, r3, r1
 8005460:	42a0      	cmp	r0, r4
 8005462:	d10b      	bne.n	800547c <_free_r+0x74>
 8005464:	6820      	ldr	r0, [r4, #0]
 8005466:	4401      	add	r1, r0
 8005468:	1858      	adds	r0, r3, r1
 800546a:	4282      	cmp	r2, r0
 800546c:	6019      	str	r1, [r3, #0]
 800546e:	d1dd      	bne.n	800542c <_free_r+0x24>
 8005470:	6810      	ldr	r0, [r2, #0]
 8005472:	6852      	ldr	r2, [r2, #4]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	4401      	add	r1, r0
 8005478:	6019      	str	r1, [r3, #0]
 800547a:	e7d7      	b.n	800542c <_free_r+0x24>
 800547c:	d902      	bls.n	8005484 <_free_r+0x7c>
 800547e:	230c      	movs	r3, #12
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	e7d3      	b.n	800542c <_free_r+0x24>
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	1821      	adds	r1, r4, r0
 8005488:	428a      	cmp	r2, r1
 800548a:	bf04      	itt	eq
 800548c:	6811      	ldreq	r1, [r2, #0]
 800548e:	6852      	ldreq	r2, [r2, #4]
 8005490:	6062      	str	r2, [r4, #4]
 8005492:	bf04      	itt	eq
 8005494:	1809      	addeq	r1, r1, r0
 8005496:	6021      	streq	r1, [r4, #0]
 8005498:	605c      	str	r4, [r3, #4]
 800549a:	e7c7      	b.n	800542c <_free_r+0x24>
 800549c:	bd38      	pop	{r3, r4, r5, pc}
 800549e:	bf00      	nop
 80054a0:	20000094 	.word	0x20000094

080054a4 <_malloc_r>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	1ccd      	adds	r5, r1, #3
 80054a8:	f025 0503 	bic.w	r5, r5, #3
 80054ac:	3508      	adds	r5, #8
 80054ae:	2d0c      	cmp	r5, #12
 80054b0:	bf38      	it	cc
 80054b2:	250c      	movcc	r5, #12
 80054b4:	2d00      	cmp	r5, #0
 80054b6:	4606      	mov	r6, r0
 80054b8:	db01      	blt.n	80054be <_malloc_r+0x1a>
 80054ba:	42a9      	cmp	r1, r5
 80054bc:	d903      	bls.n	80054c6 <_malloc_r+0x22>
 80054be:	230c      	movs	r3, #12
 80054c0:	6033      	str	r3, [r6, #0]
 80054c2:	2000      	movs	r0, #0
 80054c4:	bd70      	pop	{r4, r5, r6, pc}
 80054c6:	f000 f87d 	bl	80055c4 <__malloc_lock>
 80054ca:	4a21      	ldr	r2, [pc, #132]	; (8005550 <_malloc_r+0xac>)
 80054cc:	6814      	ldr	r4, [r2, #0]
 80054ce:	4621      	mov	r1, r4
 80054d0:	b991      	cbnz	r1, 80054f8 <_malloc_r+0x54>
 80054d2:	4c20      	ldr	r4, [pc, #128]	; (8005554 <_malloc_r+0xb0>)
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	b91b      	cbnz	r3, 80054e0 <_malloc_r+0x3c>
 80054d8:	4630      	mov	r0, r6
 80054da:	f000 f863 	bl	80055a4 <_sbrk_r>
 80054de:	6020      	str	r0, [r4, #0]
 80054e0:	4629      	mov	r1, r5
 80054e2:	4630      	mov	r0, r6
 80054e4:	f000 f85e 	bl	80055a4 <_sbrk_r>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d124      	bne.n	8005536 <_malloc_r+0x92>
 80054ec:	230c      	movs	r3, #12
 80054ee:	6033      	str	r3, [r6, #0]
 80054f0:	4630      	mov	r0, r6
 80054f2:	f000 f868 	bl	80055c6 <__malloc_unlock>
 80054f6:	e7e4      	b.n	80054c2 <_malloc_r+0x1e>
 80054f8:	680b      	ldr	r3, [r1, #0]
 80054fa:	1b5b      	subs	r3, r3, r5
 80054fc:	d418      	bmi.n	8005530 <_malloc_r+0x8c>
 80054fe:	2b0b      	cmp	r3, #11
 8005500:	d90f      	bls.n	8005522 <_malloc_r+0x7e>
 8005502:	600b      	str	r3, [r1, #0]
 8005504:	50cd      	str	r5, [r1, r3]
 8005506:	18cc      	adds	r4, r1, r3
 8005508:	4630      	mov	r0, r6
 800550a:	f000 f85c 	bl	80055c6 <__malloc_unlock>
 800550e:	f104 000b 	add.w	r0, r4, #11
 8005512:	1d23      	adds	r3, r4, #4
 8005514:	f020 0007 	bic.w	r0, r0, #7
 8005518:	1ac3      	subs	r3, r0, r3
 800551a:	d0d3      	beq.n	80054c4 <_malloc_r+0x20>
 800551c:	425a      	negs	r2, r3
 800551e:	50e2      	str	r2, [r4, r3]
 8005520:	e7d0      	b.n	80054c4 <_malloc_r+0x20>
 8005522:	428c      	cmp	r4, r1
 8005524:	684b      	ldr	r3, [r1, #4]
 8005526:	bf16      	itet	ne
 8005528:	6063      	strne	r3, [r4, #4]
 800552a:	6013      	streq	r3, [r2, #0]
 800552c:	460c      	movne	r4, r1
 800552e:	e7eb      	b.n	8005508 <_malloc_r+0x64>
 8005530:	460c      	mov	r4, r1
 8005532:	6849      	ldr	r1, [r1, #4]
 8005534:	e7cc      	b.n	80054d0 <_malloc_r+0x2c>
 8005536:	1cc4      	adds	r4, r0, #3
 8005538:	f024 0403 	bic.w	r4, r4, #3
 800553c:	42a0      	cmp	r0, r4
 800553e:	d005      	beq.n	800554c <_malloc_r+0xa8>
 8005540:	1a21      	subs	r1, r4, r0
 8005542:	4630      	mov	r0, r6
 8005544:	f000 f82e 	bl	80055a4 <_sbrk_r>
 8005548:	3001      	adds	r0, #1
 800554a:	d0cf      	beq.n	80054ec <_malloc_r+0x48>
 800554c:	6025      	str	r5, [r4, #0]
 800554e:	e7db      	b.n	8005508 <_malloc_r+0x64>
 8005550:	20000094 	.word	0x20000094
 8005554:	20000098 	.word	0x20000098

08005558 <_realloc_r>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	4607      	mov	r7, r0
 800555c:	4614      	mov	r4, r2
 800555e:	460e      	mov	r6, r1
 8005560:	b921      	cbnz	r1, 800556c <_realloc_r+0x14>
 8005562:	4611      	mov	r1, r2
 8005564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005568:	f7ff bf9c 	b.w	80054a4 <_malloc_r>
 800556c:	b922      	cbnz	r2, 8005578 <_realloc_r+0x20>
 800556e:	f7ff ff4b 	bl	8005408 <_free_r>
 8005572:	4625      	mov	r5, r4
 8005574:	4628      	mov	r0, r5
 8005576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005578:	f000 f826 	bl	80055c8 <_malloc_usable_size_r>
 800557c:	42a0      	cmp	r0, r4
 800557e:	d20f      	bcs.n	80055a0 <_realloc_r+0x48>
 8005580:	4621      	mov	r1, r4
 8005582:	4638      	mov	r0, r7
 8005584:	f7ff ff8e 	bl	80054a4 <_malloc_r>
 8005588:	4605      	mov	r5, r0
 800558a:	2800      	cmp	r0, #0
 800558c:	d0f2      	beq.n	8005574 <_realloc_r+0x1c>
 800558e:	4631      	mov	r1, r6
 8005590:	4622      	mov	r2, r4
 8005592:	f7ff ff15 	bl	80053c0 <memcpy>
 8005596:	4631      	mov	r1, r6
 8005598:	4638      	mov	r0, r7
 800559a:	f7ff ff35 	bl	8005408 <_free_r>
 800559e:	e7e9      	b.n	8005574 <_realloc_r+0x1c>
 80055a0:	4635      	mov	r5, r6
 80055a2:	e7e7      	b.n	8005574 <_realloc_r+0x1c>

080055a4 <_sbrk_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4c06      	ldr	r4, [pc, #24]	; (80055c0 <_sbrk_r+0x1c>)
 80055a8:	2300      	movs	r3, #0
 80055aa:	4605      	mov	r5, r0
 80055ac:	4608      	mov	r0, r1
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	f7fc f9a4 	bl	80018fc <_sbrk>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_sbrk_r+0x1a>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	b103      	cbz	r3, 80055be <_sbrk_r+0x1a>
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	20000298 	.word	0x20000298

080055c4 <__malloc_lock>:
 80055c4:	4770      	bx	lr

080055c6 <__malloc_unlock>:
 80055c6:	4770      	bx	lr

080055c8 <_malloc_usable_size_r>:
 80055c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055cc:	1f18      	subs	r0, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bfbc      	itt	lt
 80055d2:	580b      	ldrlt	r3, [r1, r0]
 80055d4:	18c0      	addlt	r0, r0, r3
 80055d6:	4770      	bx	lr

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr
